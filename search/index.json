[{"content":"この記事は？ この記事は、某企業アドベントカレンダー2024 八日目の記事です。\n買ってよかったもの 今年は就職で関西から関東に引っ越したのもあって、いろいろなものを買いました。中でも特に買ってよかったものを紹介します。順不同です。\n3Dプリンタ A1 mini（Bambu Lab） 2024年買ってよかったものを語るうえで避けられないのはやっぱりこの3Dプリンタです。印刷の精度もさることながら、セールで3万円くらいで買えるとは思えないプロダクトクオリティ、よく考えられたスマホ連携、印刷速度など、買ってよかった点を挙げればキリがないほど気に入っています。見た目もスタイリッシュでいい感じなので本気で一家に一台おススメできます。開封の様子などは別の記事でまとめているのでそちらもご覧ください。\nUSBはんだごて HS-01（FNIRSI） 今まで使っていた中華の激安はんだごてからそろそろ乗り換えたいなと思っていたところ、電気系のYouTuberであるイチケンさんがとある記事でUSBはんだごてを紹介していたので買ってみました。\n今までのはんだごてはコンセントにつなぐ必要があったのですが、これはUSB Type-Cで使えるので、机の脇から生えているType-Cケーブルを挿すだけで使えるのが一番便利なポイントです。数十秒～2分もあれば使える温度になりますし、軽量で取り回しもいいので重宝しています。私はAliExpressで追加のこて先がついたセットを買いました。\nMacbook Pro （M4 Pro・Apple） 正確には会社のお金で買ったものなのですが、この度Macbookデビューしました。PCを触り始めてからずっとWindows民がMacbookを触ると、まずTouch Padをはじめとしたハードウェア、ソフトウェアのUXが本当によくできているなと思いました。まだ完全に慣れたわけではないのでショートカットとか逆張り仕様につまずくことも多いですが、総合的にかなり触り心地がいいPCです。所有欲もみたされます（会社の固定資産ですが\u0026hellip;）。\nMX Keys Mini（Logicool） これは今年買ったものではないですし、研究室から拝借しているものですが、今年から本格稼働を始めたのでノミネートです。私は基本的に仕事中はMacbookをクラムシェルモードで運用しているのでこういったBluetoothキーボードを重宝しています。このキーボードはテンキーレスでコンパクト、薄さと打鍵感をある程度両立しているバランスのいいワイヤレスキーボードです。登録先を3台まで保存でき、Fn + F1, F2, F3で瞬時に登録先を切り替えられるのもグッドです。\nサメ型ボディバッグ 大阪梅田のルクアで偶然出会って、一目ぼれして入手しました。こういう何かをモチーフにしたアイテムが大好きなので、大変満足しています。誰に見せてもウケるので嬉しいです。\nバックパック Black Hole Mini MLC 30L（patagonia） 先代のバックパックが6年くらい使ってボロボロだったので、ちょっといいやつをと思って新調しました。これのすごいところは、腰を固定するバンドをとりはずして肩掛けにできたり、肩ひもを収納してスーツケースに固定できたりと自由度が高い点です。蓋もバックリ開いてめちゃ便利です。\nNポルダ（ニトリ） 本棚の一つも実家から持ってこなかったので買いました。壁際に手軽に棚を追加でき、側面の骨にS字フックでいろいろ掛けられるのでかなり便利です。ただ、組み立てと設置が若干大変でした。\nNボックス（ニトリ） 同じく引っ越しのタイミングで買いました。同じシリーズなら縦横にドッキングしてカスタマイズできるのがめちゃくちゃ便利です。家では通常のカラーボックスに加えて、扉付き、段が一つ少ないものを買い足して小物の置き場所を増やしています。\n伸縮カーペットクリーナー（ニトリ） ニトリで見かけて買いました。賃貸だと思った時間に掃除機をかけられないことがありますし、ちょっとしたゴミとか髪の毛を掃除したいときに重宝しています。持ち手が伸びるので腰へのダメージも低いです。\n生徒会にも穴はある！（講談社・Kindle） ずっと前から追っていて、最近Kindleで全巻買いました。私はこういうギャグ味が強いラブコメが大好きでよく読むのですが、この漫画は最近読んだ中では一番刺さった漫画です。買え。読め。\nKindleリンク\n連載リンク\n","date":"2024-12-08T00:00:00Z","image":"https://twoooooda.net/post/katteyokatta/IMG_7538_hu12558230255591340777.JPG","permalink":"https://twoooooda.net/post/katteyokatta/","title":"いっとりうむの買ってよかったもの2024"},{"content":"この記事は？ この記事は、某企業アドベントカレンダー2024七日目の記事です。 飯テロにご注意ください。\n3Dスキャン 3Dスキャンとは、文字通り空間や物体などを3次元的に記録するものです。空間や景色を平面敵に切り取る写真と違って、記録を残す時の周りの空間ごと残せるというのは大きな利点だと思います。飯スキャンに限らず、例えば自室を3Dスキャンして模様替えに利用したり、文化財などを3Dスキャンしてより情報量の多いアーカイブとして後世に残すといったことへの利用が注目されています。\n3Dスキャンする手法はいろいろありますが、一般的には多視点からの物体の写真を大量に撮って、それらから立体を推測するフォトグラメトリや、似た手法のNeRF、Gaussian Splatting、赤外線センサによる距離情報も使って面を推測する方法などがあります。 立体を表現する方法にも複数あり、特に一般的なものに3つの頂点からなる平面を立体に連ねて表現するメッシュデータがあります。次点では立体を大量の特徴点で表現する点群データがあります。[参考]\nこの記事では、iPhone Proシリーズと、とあるアプリを使って3Dスキャンをする方法を紹介します。\n3Dスキャンをしてみよう この記事では、iPhoneアプリであるScaniverseを使った3Dスキャンを紹介します。このアプリは、iPhone Proシリーズに搭載されている赤外線センサである \u0026ldquo;LiDAR\u0026rdquo; センサを使うことで本領を発揮しますが、なくてもできます。\nスキャン方法としてはごく簡単で、スキャンしたいものの周りをiPhoneで動画を数十秒撮るようにするだけです。\n実際にスキャンされたものはSketchfabなどのサイトでこんな感じに共有することもできます。成果物をみると、ほんの30秒くらいのスキャン時間だったのにも関わらず、かなり精細にスキャンできているかと思います。\nいざ、飯を3Dスキャンした結果が以下です。出先でスキャンすることが多いので自宅ほど鮮明なスキャンは難しいことがありますが、どんな料理だったかを窺い知るには十分なクオリティだと思います。実際の距離情報を使っているので、各種サービスや後述するUnityなどで使う場合、実際の寸法のまま利用することもできます。\nSketchfabリンク\nハヤシライス ラーメン ガーリックライス 挙げた3Dスキャンは飯部分以外Scaniverseの機能でトリミングしていますが、実際は飯の周りもスキャンされています。ハヤシライスのスキャンでは皿部分のメッシュが溶けてしまっていますが、これは真っ白な皿だったために特徴点を掴めず、うまくメッシュを貼れなかったのだと考えられます。\nスキャンデータで遊ぼう 3Dスキャンをすると、飯の3Dデータが手に入ります。ただの記録に使うのもいいですが、Unityなどのゲームエンジンを使うと3Dオブジェクトとして遊ぶことができます。\nARで Scaiverseには、AR機能が標準で搭載されています。この機能を使うと、例えばあの日食べた飯をAR的に、ほぼ原寸大で鑑賞することができます。\nVRで 次はVRです。UnityとMeta Quest2を使って、仮想空間で遊んでみました。VRなら好きな飯で部屋を満たすことだってできます。\nMRで 最後にMRです。同じくUnityと、HoloLens2で遊んでみました。MRはARとVRのいいとこどりだけあって、独特の楽しみ方もできそうです。\nさいごに いかがでしたでしょうか。写真で残すのももちろんいいですが、3Dデータとして残すのも実用段階に入っていると思います。皆さんもやってみてください。\n","date":"2024-12-07T00:00:00Z","image":"https://twoooooda.net/post/3d-meshi-scan/222419_hu6923598022297079784.jpg","permalink":"https://twoooooda.net/post/3d-meshi-scan/","title":"3D飯スキャンをしてみよう"},{"content":"この記事は、某企業アドベントカレンダー2024の六日目の記事です。\n経緯 最近久々に記事を書こうとしてHugoを使ったら、以下のようなエラーメッセージが出てうまくビルドができませんでした。\n$ hugo WARN deprecated: resources.ToCSS was deprecated in Hugo v0.128.0 and will be removed in a future release. Use css.Sass instead. ERROR deprecated: .Site.LastChange was deprecated in Hugo v0.123.0 and will be removed in Hugo 0.140.0. Use .Site.Lastmod instead. 要するに、現行のHugoのバージョンでは非推奨、あるいは利用不可なプロパティを使っているせいで怒られています。\n原因 私の場合は、ブログのテンプレートをgitのsubmoduleの形で使っていて、ある程度はテンプレートのリポジトリに依存してしまいます。submoduleの仕様として、submoduleの関係を設定したタイミングのリポジトリの状態を保持してしまうみたいです。このブログを作ったのがもう3年前なので、テンプレートの中身が3年前のバージョンで止まっていたのが原因でした。\n解決 解決策としては、以下のコマンドでsubmoduleに設定しているリポジトリを最新の状態にすれば解決できました。\n$ git submodule update --remote 内容としてはこれだけなのですが、備忘録として残します。\n補足 PCを新調したなどで、新しくgit cloneしたい場合、以下のコマンドでsubmoduleの情報、submoduleとの関係などを引き継いでcloneできます。\ngit clone --recursive https://github.com/twoooooda/[リポジトリ.git] ","date":"2024-12-01T00:00:00Z","image":"https://twoooooda.net/post/hugo-komattara/hugo_hu5348393644182254210.png","permalink":"https://twoooooda.net/post/hugo-komattara/","title":"Hugoで非推奨のプロパティとかを使ってエラーが出たとき"},{"content":"この記事は？ この記事は、某企業アドベントカレンダー2024一日目の記事です。 記事執筆ハードルを下げるための記事ですので、あえてTech系とは関係ない記事にしています。ご了承ください。\nハヤシライスを、作ろ〜〜〜うよ‼️ この記事ではハヤシライスが大好きな私が作り続けた、いい感じのハヤシライスレシピをご紹介します。といっても、市販のルーと普通の食材を使った普通のレシピですし、箱の裏に書いてあるレシピほぼそのままの普通のハヤシライスです。ですが、とっても美味しいです。お試しください。\n材料（2食分） 完熟トマトのハヤシライスソース（おすすめ） 半箱 薄めの肉（牛肉だと美味しい、豚肉でも可）180g～250gくらい 玉ねぎ（デカければデカいほどよい）1個 サイズによっては2個 ぶなしめじ 1株 付け合わせの任意の草 適量 作り方 材料を切る まず玉ねぎを切ります。薄切りだと早く火が通りますし、ルーを楽しめます。しかし、煮込み時間によっては完全に溶けて消失してしまいます。櫛切りにすると食べ応えを増すことができます。煮込んでも溶けにくいですが、ハヤシライス感は若干薄まります。 次に肉を切ります（切られていなければ）。でっけー肉を入れてやりましょう。 ぶなしめじの石づきを切ります。ただし、ぶなしめじは一度凍らせて入れても美味しい（らしい）です。 材料を炒める まず玉ねぎを炒めます。炒めすぎると後の煮込みの行程で溶けてなくなるのでほどほどにするのがコツです。塩コショウをすると早く熱が通ります。 玉ねぎに火が通ったら、肉を入れます。これも適当に塩コショウをするといいでしょう。いい感じにほぐしながら炒めていきます。 肉にも火が通ったら、ぶなしめじをほぐしながら入れます。これはサッと炒めるだけでおｋです。 煮込む いい感じに火が通ったら、水を入れます。私は箱に書いてある分量よりちょっと多めに入れます。箱に書いてある時間だけ煮込みます。 いい感じに煮込めたら、一旦火を止めてルーを割り入れます。ルーをしっかり溶かせたら、また火をつけて箱に書いてある時間分だけ煮込みます。ときどきかき混ぜてください。 完成！ いい感じに煮込めたら完成です。罪悪感消しの草と一緒に召し上がれ！ 過去作 ","date":"2024-11-30T00:00:00Z","image":"https://twoooooda.net/post/howtomakehayashirice/ReferenceImg/IMG_7520_hu14390444726273062633.JPG","permalink":"https://twoooooda.net/post/howtomakehayashirice/","title":"いっとりうむのハヤシライスレシピ"},{"content":"話題の3Dプリンターがセールしてた ちょっと前から低価格で高精度、高速プリントができると話題になってたBambu Lab A1 miniがBambu Lab ストアで13,000円オフの39,800円になってたので買ってしまいました。\n開封 開封すると、ダンボール、フォームで丁寧に梱包されたA1 miniが入っており、ヘッド部分も専用の部品で固定されていました。付属品としては各ネジを締めるための6角レンチ、フィラメント詰まり解消ツール、オイル、グリス、試験印刷用フィラメントなどが入っていました。中にはなんと置時計自作用の時計モジュールまで入っていました。\n使う前の注意点 中華製品あるあるですが、電源プラグが3ピンです。日本の一般家庭用の2ピンにするアダプタを付属してきませんので、別途用意する必要があります。あと印刷中はかなり揺れます。動作音自体は比較的静かですが、特に横揺れが大きいので、置く場所や振動対策に気を付ける必要があるかもしれません。私は学習机についてきた木製の頑丈なコンテナの上に置いていて、今のところ不都合はありません。\n所感 総合的にかなり満足度高い買い物をしたと思います。タッチパネルのインタフェースの完成度も高く使いやすいですし、インターネットに繋がるので無線経由で印刷データを送信することができます。ネットワーク経由あるいはBluetoothで、PCのスライスソフトやスマホアプリと接続でき、ライトの点灯やカメラ映像の受信などもできます。 最初の印刷をする時にだいたい行うステージの水平出しなどの面倒な作業もスイッチ一つで行ってくれて、印刷中も振動やノイズを感知し、リアルタイムで調整しているそうです。次回以降の印刷でもステージ、ヘッドの加熱、各種調整を自動でやってくれるので、本当に気軽に印刷することができます。\nBambu Lab A1 mini、おすすめです。\n","date":"2024-06-15T00:00:00Z","image":"https://twoooooda.net/post/3dprinter-kattemita/IMG_6765_hu17648863160781096313.JPEG","permalink":"https://twoooooda.net/post/3dprinter-kattemita/","title":"Bambu Lab A1 mini買ってみました。"},{"content":"基本的には 先駆者様のサイト をかいつまんだだけです。詳しい\u0026amp;正確な情報はそちらを参考にしてください。\n用意するもの USB TVチューナー PX-S1UD V2.0\n今買えるものはだいたいV2.0な気がします。 B-CASカード\n私はぶっ壊れたnasneから奪ってきました。 USBカードリーダー\nNTTのやつ（SCR3310V2.0）が多分一番有名で安定、この記事でもこのリーダーを使っている前提で進めます。 Windows PC\nテレビ用同軸ケーブル ソフトウェアのダウンロード・インストール PX-S1UDのドライバはこちら\nカードリーダー（SCR3310V2.0）のドライバはこちら\nBonDriver-Siano\nPX-S1UDでテレビを見るために別途導入が必要なドライバです。BonDriverは他にも種類がありますが、私の環境ではこれしか動きませんでした。後述。 TVTest\nWindowsでテレビを見るためのソフトウェアです。これも私の環境では32bit版しか動きませんでした。ビルド済みのものはこちらにあります。 TVTestの準備 解凍・フォルダの移動 ビルド後のTVTestをダウンロードしてきたら、解凍して任意の場所に移動させます。この時、 C:\\Users・C:\\Program Files 以外のフォルダ に移動させないといけないそうです。\nDirectShow フィルタのインストール Windows 10 では、日本のテレビ放送の映像コーデックである MPEG-2 をデコードして再生するのに必要な Microsoft DTV-DVD Video Decoder が標準ではインストールされていないそうなので、TVTest の作者さんが用意してくれているものでインストールします。詳しくは\nTVTest フォルダ内にある [* filter-install.jse] を、管理者権限で実行してください。\nBonDriverのセットアップ 環境や用途によってはBonDriverを複数種類使う可能性も考えられます。なのでTVTestの下に別途BonDriverというフォルダを作って、そこで一括管理する方法が推奨されています。 TVTestのセットアップ 初期設定 最初に起動すると、設定のポップアップウィンドウが出てきます。この設定はあとで変えられるので適当でも大丈夫です。\nBonDriver … 今後 BonDriver 検索フォルダを変更するため今は空のままにしておく（後述） H.264/AVCデコーダ … 自動 のままで OK H.265/HEVCデコーダ … 自動 のままで OK MPEG-2デコーダ … TVTest DTV Video Decoder に変更する 映像レンダラ … EVR に変更する 録画ファイルの保存フォルダ … TVTest で録画した番組の保存先フォルダをここで設定可能 BonDriverの参照 前述したBonDriverフォルダをTVTestから参照します。TVTestウィンドウ内の無を右クリックして設定を開きます。 すると、一般の中にBonDriver検索フォルダの項目があるので、先ほど作ったBonDriverフォルダを指定します。 ここで一度TVTestを再起動しておきましょう。\nTSプロセッサー TVTestでテレビを見る場合の一番大事な設定といっても過言ではないのが、一番下にある TSプロセッサ の項目です。ここが設定されていないと上手くテレビが映りません。↓の画像のように設定します。 とりあえず見れるはず ここまで設定すれば、TVTestのウィンドウの左下から適切なBonDriverを選ぶだけでとりあえずテレビが見れるはずです。 TVTestを使う チャンネルスキャン このままでは不便なので、設定からチャンネルスキャンをしましょう。これが正常に完了すると、TVTestウィンドウの左下の\u0026lt;チャンネル\u0026gt;のプルダウンからチャンネルを選択して、番組を視聴することができます。 エラー表示 テレビが映らない、何かがおかしいと思ったら、下のエラー表示を見てみるといいかもしれません。特に、B-CASカードによる復号ががうまく動いていない時は S の値が爆増していくので、目安程度にはなります。 とりあえず以上です。これはあくまでPX-S1UDとPCでテレビを見るための最短手順ですので、TVTestの設定などを練ればもっと便利に使えるはずです。\n2024/07 追記 ある日TVTestでテレビを見ようとしたら、「BonDriverの初期化ができません」云々といったエラーが出てテレビが見られなくなってしまいました。 いろいろ調べて、試した方法を書き残しておきます。\nBIOSの項目を設定 どうもBIOSのある設定が悪さをしているようで、Advancedメニューの中にある「Above 4GB Decoding」という設定をDisableにすると改善することがあるそうです。\nデバイスセキュリティの項目を設定 デバイスマネージャーを見ると、そもそもPX-S1UDを認識していなかったり、ドライバが動いていなかったりで不安定な状態でした。こういう場合はWindowsセキュリティの設定 → デバイスセキュリティ → コア分離 → メモリ整合性 という項目をオフにすると認識するようになるそうです。\n以上の二点を試したところ、正常に見られようになりました。どちらがクリティカルな解決策だったのかはよくわかりませんが、私の環境ではこれで動くようになりました。\n","date":"2024-05-27T00:00:00Z","image":"https://twoooooda.net/post/px-s1udandtvtest/0f3010e5fa0dcb1600eb6a88167d6465_hu16842217231206464822.png","permalink":"https://twoooooda.net/post/px-s1udandtvtest/","title":"USB TVチューナーPX-S1UDを使ってテレビを視聴する最速手順"},{"content":"最近財布を新調しました 今まではずっと長財布を使っていたのですが、昨今のキャッシュレスの波で現金を使わなくなり、だんだんと「なんでこんなデカい財布を持ち歩いてるんだ」と思うようになりました。 先代の財布を使い始めて既に4年くらい経過していたので、この機に小さい財布に変えようと思って探していると行きついたのが m+（エムピウ） というブランドの millefoglie（ミッレフォッリエ） という財布でした。 エムピウ公式サイト\nエムピウ ミッレフォッリエとは ミッレフォッリエの「ミッレ」とは「千」、「フォリエ」とは「葉」を意味し、財布を横から見ると葉っぱが重なっているように見えることから名づけられたようです。 外側はぐるっと一枚の牛革で覆われており、ファスナーなどではなく二つの真鍮製のギボシでとめる形式です。 中身の構造はかなり独特で、カードポケットの下側にコインボックス、その下に札やレシートを挟みこんでカードフラップで抑えるような形です。\nコインボックスは大きく開き、小銭の確認がとてもしやすい構造です。カードポケットは三つあり、それぞれに5枚ずつ、合計15枚程度まで入るようです。カードフラップに交通系ICとかを入れるとそのままかざして改札を通れます。 買ったモデル 私が買ったのは牛革の中でもプエブロレザーというレザーを使った millefoglie P25 PU.grigio です。 プエブロレザーとは牛革に敢えてやすりで傷をつける加工を施したレザーで、特に経年変化が早い上に変化の度合いが激しいことが特徴です。 この動画を見て頂くといかに変化が激しいかがわかると思います。\nなお、このミッレフォッリエは全国的に品薄で、新品はほとんど市場に出回っていないというお話でした（2023年5月現在）。私が買ったものは僅かな不良で新品として市場に出なかったアウトレット品らしく、その在庫があったのも幸運だったようです。ちなみにアウトレットになった理由は聞きそびれたので、どこが不良なのかは今でもわかっていません。 販売サイト\nミッレフォッリエの良いところ 一番はやはり コンパクトである ということです。少し厚みはありますが、サイズ感はほとんどパスケースと大差なく、このサイズにかなりの量の現金とカード類を一緒に収納できる収納力も魅力です。\nあとは、何といっても 質感 ！！丁寧に鞣された牛革を撫でるだけでもテンションが上がります。また、革の経年変化も楽しみのうちです。使っていくうちに革に光沢と傷が入り色も深みを増し、自分だけの財布に育てていく感じが、私は大好きです。\nミッレフォッリエのイマイチなところ コンパクト財布なので、外出先で不意に小銭が増えてしまうと、露骨に膨らんでしまうところは少し残念です。20枚以上とかになってしまうと閉まりきらないこともあるようです。また、一般的な長財布と違いカードポケットのカードを上から覗くことになるので、一覧性は落ちてしまいます。この点に関しては、三つのカードポケットに入れるカードを固定することで対応しています。 まとめ ミッレフォッリエマジでいい いろいろ書いてきましたが、総合するとめちゃくちゃ良いです。質感が良いので特に意味もなく開けたり閉めたりしてしまうくらいです。財布として割と独特な見た目、形状をしているので、人とはちょっと変わった財布を持ちたい人、カードも現金も使う機会がある程度多い人などは特にオススメです。\n","date":"2023-05-22T00:00:00Z","image":"https://twoooooda.net/post/millefoglie-is-so-good/IMG_5159_hu6671137049548276854.jpeg","permalink":"https://twoooooda.net/post/millefoglie-is-so-good/","title":"エムピウ ミッレフォッリエを買ったら良すぎた話"},{"content":"　先日友人からAキーが利かなくなったゲーム用の左手デバイスをもらったので、修繕して使うつもりでしたが、ついでに改造することにしました（私の嫌いな青軸キースイッチだったので）。\nデバイスと初期状態 もらった左手デバイスはアマゾンでよく見るこういうやつでした。いかにも中華製でしたが別段欠陥があるとかではなく、もらった時点でもAキーが利かない以外特に問題なく使えました。 分解 分解も特に問題なくできました。ネジの形が特殊とか、引っかかってるツメが頑強だったとかもなく、一部のゴム足をはがすだけでネジも全て回せました。 キースイッチ摘出 中を開けてみると、案の定キースイッチは全てはんだ付けされていました。めんどくさいなー\u0026hellip;と思いつつも、ホットスワップ式（はんだ付け無しでキースイッチを固定できる仕組み）の可能性は最初から考えていなかったので、大人しくはんだを吸い取りながら35個あったキースイッチを全て取り外しました。 新しいキースイッチ選定 自分は普段いつしかの記事で作ったキーボードを使っていて、これには FEKER like Holy Panda というタクタイルのキースイッチを採用しています。タクタイルのキースイッチは文字を打つにはちょうどいいのですが、ゲームにはあまり向かないなぁと個人的に思っていたので（Holy Pandaの押下圧が気持ち重めだったのもある）、今回はゲーム用に使う予定だったのでリニアスイッチにすることにしました。 最終的には Tecsee Jaditeキースイッチ というリニアキースイッチを採用しました。TALP KEYBOARDさんという国内のサイトで買ったのですが、現在（2022年10月時点）は取り扱いが無いようです。 ここで問題が 届いたのでさぁ取り付けようと思ったのですが、なんとキースイッチが5ピンのタイプで、基板に刺さりませんでした\u0026hellip;クッソめんどくさかったのですが、泣く泣く5ピンのうち2ピンをニッパーで切り取るということを全てのキースイッチにしました。 せっかくなのでlubeも 前回キーボード自作した時のグリスが残っていたので、せっかくなのでlubeもしておきました。今回はたったの35キーだったので、比較的楽でした（前回は98キー）。 スイッチ取り付け もう後ははんだ付けするだけです。コツをつかめばスイッチの摘出も取り付けもすぐに終わりました。 完成 組み立てて完成です。5ピンから3ピンに減らす過程でキースイッチを一個ダメにしてしまったので、Caps Lockキーだけ元の青軸スイッチのままになっています。 使用感 やっぱりゲームにはリニア軸ですね（個人の意見）。lubeもしたので音も静かで良い感じです。ただ元が安価なデバイスなので、節々にチープな点が見えたり、軽いプラスチックの外装なので底打ちの音が微妙だったりしますが、総合的には改造してよかったなと思います。 ","date":"2022-10-18T00:00:00Z","image":"https://twoooooda.net/post/remodeled-left-hand-device/IMG_4369_hu10243491871369150045.JPEG","permalink":"https://twoooooda.net/post/remodeled-left-hand-device/","title":"もらった左手デバイスのキースイッチを改造した話"},{"content":"いきさつ ここ最近、諸事情あって競技プログラミングで有名なAtCoderに参戦したのですが、AtCoderのwebページでポチポチコーディングするのも、別のエディタで書いてコピペするのもなんだかなぁという感じだったので、友人が使っていたatcoder-cliというものを導入して使ってみることにしました。なお、この記事は以下の参考文献から大いに引用しています。\n参考文献\nAtCoder 環境構築 for Python コマンドラインツールatcoder-cliを公開しました（作成者様のサイト） atcoder-cli チュートリアル（作成者様謹製のチュートリアル） atcoder-cliとは？ atcoder-cliとは、コンソールから短いコマンドを打つだけで問題の提出のみならず、使用する各言語に合わせたテンプレートの自動展開、作業フォルダ、ファイルの整理、テストケースの自動ダウンロード、検証などを簡単に行えるツールです。この記事では、基本的にPythonでAtCoderに参戦することを前提に進めていきます。\n導入方法 基本的にはさっきのチュートリアルに従ってatcoder-cliと、セットでほぼ使うであろう online-judge-toolsも一緒にインストールします。ちなみに、atcoder-cliはJavaScriptのパッケージマネージャであるnpmでインストールするので、npmが入っていない方はそちらを先にやってしまいましょう。\nNode.js・npmのインストール\n環境 Python（Anaconda） 3.8.8 pip 22.0.4 npm 6.14.6 インストール online-judge-toolsとatcoder-cliのインストールには、以下のコマンドを実行します。\n\u0026gt; pip install online-judge-tools \u0026gt; npm install -g atcoder-cli そして、以下のコマンドが使用できればインストールされています。\n\u0026gt; acc -h ログイン atcoder-cliとonline-judge-toolsの両方ログインする必要があります。以下のコマンドを叩いた後にAtCoderのユーザー名とパスワードを入力します。まずはonline-judge-toolsの方から。\n\u0026gt; oj login https://atcoder.jp/ 次にatcoder-cliの方にログイン。\n\u0026gt; acc login ここで、Linux等のCUIに普段から触れていると慣れているかもしれませんが、パスワードを入れる時に一見して入力できていないように見えるかもしれません。が、見えないようになっているだけで入力できています、大丈夫です。\nConfigファイルの編集 問題を解くときに、毎回main.pyの作成や問題用ディレクトリを作るのは面倒なので、自動化します。そのためにConfig.jsonを編集します。まずはConfigの場所の確認から。\n\u0026gt; acc config-dir C:\\Users\\\u0026lt;username\u0026gt;\\AppData\\Roaming\\atcoder-cli-nodejs\\Config 環境によってファイルの場所はまちまちになるかと思います。ファイルを開いて、以下みたいな感じに\u0026quot;default-test-dirname-format\u0026quot;と\u0026quot;default-template\u0026quot;:\u0026quot;python\u0026quot;を変更します。\n{ \u0026#34;oj-path\u0026#34;: \u0026#34;C:\\\\ProgramData\\\\Anaconda3\\\\Scripts\\\\oj.exe\u0026#34;, \u0026#34;default-contest-dirname-format\u0026#34;: \u0026#34;{ContestID}\u0026#34;, \u0026#34;default-task-dirname-format\u0026#34;: \u0026#34;{tasklabel}\u0026#34;, \u0026#34;default-test-dirname-format\u0026#34;: \u0026#34;test\u0026#34;, \u0026#34;default-task-choice\u0026#34;: \u0026#34;inquire\u0026#34;, \u0026#34;default-template\u0026#34;: \u0026#34;python\u0026#34; } 次に、上のConfig.jsonがあったConfigフォルダにpythonフォルダを作り、その中にmain.pyとtemplate.jsonを作ります。main.pyの中身は空でも大丈夫で、template.jsonは以下。\n{ \u0026#34;task\u0026#34;: { \u0026#34;program\u0026#34;: [ \u0026#34;main.py\u0026#34; ], \u0026#34;submit\u0026#34;: \u0026#34;main.py\u0026#34; } } 使ってみる 解答用フォルダ作成 ようやく使用法編です。今回はC:\\Users\\\u0026lt;username\u0026gt;の中にatcoderというフォルダを作り、その中で作業することとします（ここは自由です）。問題は仮にabc250のa問題を解くとしましょう。\n\u0026gt; cd atcoder \u0026gt; acc new abc250 \u0026gt; acc new abc000でその回の解答用フォルダとテストケースのダウンロードが可能です。すると以下のように問題のリストが表示され、Spaceキーで問題の選択、Enterキーでフォルダ作成ができます。aキー -\u0026gt; Enterで全問を一括で選択できます。\nabc250/contest.acc.json created. create project of AtCoder Beginner Contest 250 ? select tasks (Press \u0026lt;space\u0026gt; to select, \u0026lt;a\u0026gt; to toggle all, \u0026lt;i\u0026gt; to invert selection) \u0026gt;(*) A Adjacent Squares ( ) B Enlarged Checker Board ( ) C Adjacent Swaps ( ) D 250-like Number ( ) E Prefix Equality ( ) F One Fourth ( ) G Stonks (Move up and down to reveal more choices) 仮に全選択すると解答用フォルダはこんな感じになっているかと思います。a問題を解くときは、aフォルダにあるmain.pyにコードを書いていきます。 解答、テストケース検証 main.pyに解答を書き終えたら、テストします。コンソールからaフォルダに移動して、コマンドを実行します。\n\u0026gt; cd abc250/a \u0026gt; oj t -c \u0026#34;python main.py\u0026#34; すると、テストケースの検証結果が返ってきます。\nC:\\Users\\\u0026lt;username\u0026gt;\\abc250\\a\u0026gt; oj t -c \u0026#34;python main.py\u0026#34; [INFO] online-judge-tools 11.5.1 (+ online-judge-api-client 10.10.0) [INFO] 6 cases found [WARNING] GNU time is not available: time [INFO] sample-1 [INFO] time: 0.065499 sec [SUCCESS] AC [INFO] sample-2 [INFO] time: 0.050322 sec [SUCCESS] AC [INFO] sample-3 [INFO] time: 0.049653 sec [SUCCESS] AC [INFO] sample-4 [INFO] time: 0.051948 sec [SUCCESS] AC [INFO] sample-5 [INFO] time: 0.046560 sec [SUCCESS] AC [INFO] sample-6 [INFO] time: 0.046376 sec [SUCCESS] AC [INFO] slowest: 0.065499 sec (for sample-1) [SUCCESS] test success: 6 cases いい感じにACが出てていい感じですね。\n提出 テスト結果がいい感じだったので提出します。\n\u0026gt; acc submit main.py 提出に成功すると自動的にAtCoderのwebページがブラウザで開き、判定されます。そこでACをもらうと晴れて解答完了です。お疲れ様でした。\n問題追加 例えば、4.1章でa問題のフォルダのみを作成したけど後にb問題以降も解きたくなったとき、abc250のフォルダに戻ってacc addで追加ができます。\n\u0026gt; cd ..（一つ上の階層に戻る） \u0026gt; acc add そうすると同じような問題選択画面が表示され、任意の問題を追加できます。\n","date":"2022-05-20T00:00:00Z","permalink":"https://twoooooda.net/post/introduce-atcoder-cli/","title":"atcoder-cliを導入してみた"},{"content":"導入を考えたきっかけ 以前の記事でも述べた通り、自作キーボードに対応しているファームウェアがマジのゴミで、キー割り当てを変えられなかったので、いろいろ調べているうちにAutoHotKeyというものを見つけました。\nAutoHotKeyとは？ 独自のプログラミング言語を用いて、キーボードのキー操作によるかなり柔軟なショートカットの作成や、普段あまり使わないキーを全く別のキーとして割り当てたり、メディアコントロールやPCのシステム操作を割り当てたりできます。参考\n導入方法 基本的にこのサイトに従ってインストールして、拡張子を.ahkとしたテキストファイルを作り、そこに任意のショートカットやキーの割り当てを記述していきます。記法や文法、決まりごとは日本語のリファレンス(?)があるので、そちらを参照してください。\nこのAutoHotKeyを使う場合、拡張子が.ahkのファイル、あるいは.ahkのファイルから作成した.exeの実行ファイルを起動し、タスクトレイで常駐させておかなければなりません。なので、PC起動時に自動で該当のファイルが起動するようにしておくと便利です。私はこちらのサイトを参考に設定しました。\n実際に使う 私がこのAutoHotKeyでやりたかったのは、\u0026quot;キーボード右上のPageUp、PageDownのキーをメディアの再生一時停止、次の曲ボタンへ割り当て\u0026quot; です。実際のコードはごく簡単なもので、以下のように書いたら思った通りに動いてくれました。\n#InstallKeybdHook #UseHook PgUp::Media_Play_Pause PgDn::Media_Next return また、便利だと聞いたのでこちらのサイトを参考に、左右Altの空打ちで日本語入力と英字入力を切り変えられるようにしました。私は起動しないといけない実行ファイルが増えると嫌なので、実際に使うときはPageUp/Downキーをメディアコントロールに割り当てるコードと、alt-ime-ahk.ahkの内容を一つのファイルに統合しています(ファイル名をgeneral.ahkとしています)。\n導入してみて 導入してしばらく使ってみましたが、とてもとても便利です。 タスクトレイに入るアイコンが一つ増えるのが最初は少し抵抗がありましたが。それを補って余りある恩恵を受けています。今後新しくショートカットが欲しくなったり、割り当てを変えたい時が来れば今使っているgeneral.ahkファイルに追記すればいいだけなので、使い方を多少覚えていればこれからもっと気軽に便利にしていくことができると思います。\n","date":"2022-01-04T00:00:00Z","permalink":"https://twoooooda.net/post/introduce-autohotkey/","title":"AutoHotKeyを導入してみた"},{"content":"しばらく前から自作キーボードの沼というものに興味があり、年が明けたら入るお年玉をアテに思い切って作ってみることにしました。\n用いたパーツ PCB、ケース ケース、基板、プレート等がセットになっているTom980というコンパクトなフルサイズキーボード自作キット(98キー)を買いました。フルカラーLEDつき、ホットスワップ方式ではんだ付けがいらないというのも高得点です。安価ながらなかなかいいキットだと思います。アリエクスプレスで買いました。\nしかしこのキーボードキット、汎用のファームウェアであるQMKファームウェアに対応していない代わりに独自のファームウェアがあり、そちらにのみ対応しているようです。redditのレビューに落ちていました。が、レビュー曰く、このファームウェアは \u0026ldquo;almost complete garbage(ほぼ完全にゴミ)\u0026rdquo; らしく、実際に使ってみても確かにゴミでした。具体的には、LEDの発光パターンや色は変えられるけど、特定のキーに別の役割を当てたり、マクロを割り当てたりなどがほぼ完全に機能していません。さらに(これは私だけの環境かもしれませんが)なぜかESCキーが右Winキーになってしまっていたりでなかなかよくわからん挙動をしています(これはPC内の別のソフトウェアでなんとかした)。それ以外は概ね満足です。\nキースイッチ キースイッチはいろいろ考えた結果、界隈では有名らしいHoly Pandaという高級タクタイルキースイッチの廉価版であるFEKER like Holy Pandaを採用しました。リンクから飛べるTALP KEYBORDという国内の自作キーボード専門店から購入しました。\n押下圧は公称で67gとなっており、少々重めです。分類はタクタイルとなっており、心地よいタイピング音とサクサク感のある押し心地でかなり好印象です。多少の個体差はあるものの買った100個すべてのスイッチがきちんと動作しており、品質も問題なしでした。TALP KEYBORDさんありがとうございました。\nキーキャップ キーキャップは、アリエクスプレスで見つけたこの可愛いキーキャップをほぼ即決で採用しました。全体的にデザインがめちゃくちゃ好みで、キャップの種類も豊富で実物のクオリティもそれなりに高く満足しているのですが、届いたパッケージにはラベルも何もなく、ストアページも何か後ろめたいことがありそうな感じなので、まぁおそらく正規品ではないのでしょう。クリプトンフューチャーメディア等の初音ミク公式から発売されたらそちらに買い換えようと思います。 その他に揃えたもの 今回はlubeという、キースイッチの内部の擦れる部分にグリスを塗って音や打ち心地を改善する作業にも挑戦したかったので、それ用のツールもいくつか揃えました。\nスイッチを分解するためのキースイッチオープナー(TALP KEYBORDさんでスイッチと一緒に買った) キースイッチ内部に塗るグリス \u0026ldquo;Tribosys 3203\u0026rdquo; (詳しく) lubeするパーツを置いておけるlubeステーション(3Dプリンターで出力した。使ったモデル) 100均で買った細い筆 lubeが大変だった 大変でした\u0026hellip; 自作キーボードと言えば、Happy Hacking Keybordに代表される60%キーボードのような配列が一般的だと思いますが、今回作ったのはコンパクトながらフルサイズキーボードなので、98キーあります(ちなみに英字配列フルサイズキーボードは全部で102キー)。当然すべてのスイッチについてlubeしました。慣れるとスイッチ一つあたり5分くらいで済ませられるようになりましたが、かなり細かい作業なので一日にできる個数は限られており結局終わるまで数日かかりました(lubeしながら年越した)。\nグリスの選択や、塗る場所はこのサイトを参考にしました。 lubeの効果ですが、たしかにあるように感じます。lubeする前と後とでタイピングの比較はしてないので何とも言えないですが、カチャカチャというプラスチックが擦れるような音が軽減されたり、打ち心地がサクサクとした感触になったりで効果はあると思います。たぶん。ただ、60%キーボードならいざ知らず今回は98キーあるので、それら全てにlubeする労力と効果が見合うかは微妙です。私は普段からキーボードにかなり触るのでやってよかったと感じますが、とりあえず自作キーボードをやってみたいという方には障壁になるかもしれません。\n総額でいくらくらい？ 詳細な値段はそれぞれのリンクから飛んでもらえれば値段はわかると思います。自作キットやキーキャップはアリエクスプレスで買ったので比較的安く抑えることができました。キースイッチやグリスはそれぞれ国内販売店であるTALP KEYBORDや遊舎工房で購入したので、送料もかかり少し高くついてしまいました。\n筆やその他100均で買ったツール、lubeステーションの印刷代を除き、グリス代や送料を含めた総額は、¥21,136となりました。これを安いと見るか高いと見るかはあなた次第です\u0026hellip;\n総評 これまでつらつら書いてきましたが、金と時間をかけながらも自分でキーボードを作って良かったと思っています。キースイッチやグリスの選択、塗り方で押し心地や音を、外装やキーキャップの選択によってデザインを、ケースや基板によってキーボードの配列や機能を完全にカスタマイズできるところが自作キーボードのいいところだと今回の挑戦でわかりました。少しでも気なった方は是非この沼に飛び込んでみては。 1/7追記 YouTubeにタイピング音の軽いデモを投稿しました。サウンドデモの動画なのにノイズがあったりで音周りが拙いですが、多少の参考になれば幸いです\n","date":"2022-01-03T00:00:00Z","image":"https://twoooooda.net/post/keybord-built-by-myself/IMG_4085_hu16362935373663877710.JPEG","permalink":"https://twoooooda.net/post/keybord-built-by-myself/","title":"私の自作キーボード奮闘記"},{"content":"こんばんは、いっとりうむです。今年の2月くらいに、クラウドファンディングサイトkickstarterでバック(お金を出して支援すること)した返礼品である「Looking Glass Portrait」がやっと届きました。他のバッカーの方は5月くらいには届いていたようですが、住所登録のフォームの入力が遅れてしまったせいで到着が今になってしまいました。\nLooking Glassとは？ 端的に言うとズバリ「裸眼で立体視可能なディスプレイ」です。一般的な立体視ディスプレイは青色と赤色のフィルムをレンズとしたメガネや、偏光フィルタを使ったメガネをかける必要があったりしますが、Looking Glassはそういった類のものは全く必要とせず立体視が可能です。詳しい原理は公式のドキュメントに書いてあるのでそちらを読んでもらうのが一番確実ですが、レンチキュラーレンズという特殊な構造を持ったディスプレイに横方向45視点くらいからの画像を同時に表示して、両目による視差、あるいは横に動いた時の視差を実現しています。\n最初に世に出たLooking Glassは,、全面に巨大で重厚なアクリルの塊がついた8.9インチのディスプレイでした(購入済み)。購入当時はだいたい8万円でした。 初代の8インチのものがあまりに重く、場所も取るため、小型化＆薄型化\u0026amp;低価格化(クラファン特価で$199)した「Looking Glass Portrait」が2020年末に発表されました。\n開封 製造元のLooking Glass Factory社はスタートアップながら、かなりちゃんとした化粧箱で届きました。 キャリーケース付きのプランをバックしたので、まずはそちらが顔を覗かせます。 本体。画面部分を見ると、先代と比べてアクリル塊が無くなっているどころか凹んでいます。 キャリーケースもしかっりしたオリジナルのものが付いてきました。 付属品はHDMIケーブル、USB Type-Cケーブル、USB Type-C端子のACアダプタ(5V, 3A)、クリーニングクロス、キャリーケースに着ける紐がついてきました。紙類は簡単な説明書、サンキューカード的な奴、ステッカー。 Looking Glass Portrait スペックとしては、画面サイズが7.9インチ、重量660g。Rasberry pi 4を搭載しており、PCにつないでディスプレイとして使う他にも、電源に繋ぐだけで単体でデモを表示できます。\n向かって左側面にはHDMIとUSB Type-Cポート、3.5mmオーディオOUT。右側面には電源スイッチ(上)、LED調光スイッチ(下)、デモ操作用のタッチスイッチが3つ並んでいます。 ラズパイ4を内部に搭載しているので、USB Type-Cポートから電源に繋ぐだけでプリセットのデモを表示できます。デモにはiPhone12 ProのLiDARセンサーを使って撮影したポートレート写真や3DCGムービーが入ってました。中にはVirtual YouTuberのキズナアイ親分のショート動画もあってビックリしました。 推奨解像度は普段あまり馴染みのない1536×2048。数字上はフルHDよりも高精細ですが、構造が特殊なこともありフルHDモニターよりもドット感が目立ちます。見てのとおり、エクスプローラーの文字も読めません。 こればかりは画像で全く伝わらないのが惜しいですが、初代Looking Glassより小型軽量化しているのにも関わらず、遜色なくちゃんと裸眼立体視出来ています。立体視の体験的には劇的に進化したという感じは少ないですが、着実に良い製品となっています。軽くなったことにより取り回しやすくなり、何倍も使いやすくなったのではないでしょうか。手の届く範囲まで値段も下がっているので、興味がある方は購入してみても後悔しないと思います。\n","date":"2021-10-12T00:00:00Z","image":"https://twoooooda.net/post/looking-glass-portrait%E7%9D%80%E5%BC%BE%E9%96%8B%E5%B0%81%E3%83%AC%E3%83%93%E3%83%A5%E3%83%BC/IMG_3916_hu1103672975156992069.JPEG","permalink":"https://twoooooda.net/post/looking-glass-portrait%E7%9D%80%E5%BC%BE%E9%96%8B%E5%B0%81%E3%83%AC%E3%83%93%E3%83%A5%E3%83%BC/","title":"「Looking Glass Portrait」着弾\u0026開封レビュー"},{"content":"前回記事のとおり、先日発売されたiPhone13 mini を買うことにしました。幸いにして私は物持ちがすこぶる良く、2年前のiPhone11の状態もほぼ無傷だったので、Apple公式の下取りサービスである「Apple Trade In」を使ってiPhone11を下取りに出すことにしました。\nApple Trade Inとは 前述の通り、Apple社が公式で行っているApple製品下取りサービスです。AppleがiPhone6 Plus(下取り価格約3,000円)から、iPhone12 ProMax(最大84,000円)までのシリーズを引き取り、相応の値段を購入額から割り引くというよくある感じのサービスです。iPhone6以前の機種は無料で回収されるのみとのこと。\n利用手順 まずはiPhoneの新規購入画面で、サービスに関係する基本的なフォームを入力します。今回はiPhone11 64GBモデルなので最大33000円で下取ってくれるようです。 ↑をきちんと入力して新規購入の決済を完了すると、しばらくして追加の情報を入力するためのリンクがメールで届きます。私の場合は9/28に決済を済ませた後すぐにメールが来ました。\nこのフォームでは、自分の職業(会社員or自営業or学生orその他 くらいざっくりしたもの)と、本人確認書類のアップロードを求められます。本人確認書類は、運転免許証や健康保険証、パスポート、住民票の写し、在留カード、公共料金の領収書などから2点の提出を求められます。 2点のうち1点は裏面もアップロードする必要があるので、運転免許証or健康保険証はほぼ必須でしょう。 次に、iPhoneを回収してもらうための集荷依頼のフォームがあります。日時と時間帯を指定してこのフォームは完了です。14日以内にデバイスを送らないと下取りがキャンセルになるようです。\n9/30 新iPhone受け取り後 iPhone受け取ったら下取りキットの発送が保留になってました。メールも来ないしちょっと心配になりました。\n10/3 集荷に来てくれました 指定の集荷時間を14時～16時にしたのですが、無事15時前にヤマトさんに来ていただきました。渡すものは下取りに出すiPhone11のみで、梱包もヤマトのお兄さんがやってくれました。本当に玄関先で生の本体を渡すだけでした。\n前日に集荷予定のリマインダーメールも寄越してくれました。\n10/5 査定、下取りプロセス完了 Appleから査定及び下取りプロセスがすべて完了したという旨のメールが来ました。\nまた、後日クレカの利用履歴を確認すると、同日10/5にクレカ経由で返金手続きがなされていました。\n新iPhone購入から、約1週間で全ての手続きが完了したことになります。\n","date":"2021-10-03T00:00:00Z","permalink":"https://twoooooda.net/post/apple-trade-in/","title":"Apple公式下取りサービス「Apple Trade In」利用レビュー"},{"content":"私は今まで2019年モデルのiPhone11 64GBを使っていたのですが、購入当初からデカいし重いなぁと思い続けていました。そこで、先日のAppleの製品発表会で発表されたiPhone 13 miniを買うことにしました。 13のminiにした理由 普段家にいるときは大抵の場合、デスクトップPCに向かって作業したり暇を潰しており、さらに巷を賑わしている流行り病のせいでその習慣には拍車がかかっていました。動画を見たりするのももちろんPCで見るので、iPhone11のような大きめのディスプレイを持つスマホは全く必要ありませんでした。しかも、昨年11月に発売されたiPad Air 4も所持しているので、スマホの存在理由といったら移動時間などの空き時間にSNSを確認したり、mobile Suicaやpaypayでの支払いくらいなので、これを機に思い切ってスマホを小型化させることにした次第です。 本題 個人的にApple製品は配送よりも、Apple Storeに直接受け取りに行く方が体験として好きです。なので今回もApple Store心斎橋に受け取りに行きました。受け取りは9/30に行きました。\n受け取りの手順としては、事前決済の時に発行される注文番号あるいは専用QRコードをスタッフに見せるだけで、製品を受け取れました。事前のAppleからのメールには「公共機関が発行した写真付きの身分証明書」が必要と書いてありましたが、特に提出は求められませんでした(学生証とか保険証とか住民票とか用意したのに～)。 受け取れた～ ちっちゃ軽い、iPhone 13 mini 先代のiPhone11と比べると、ACアダプターが入ってない分箱がすっごい薄い。容量は128GBで、(product)REDの赤いモデルを買いました。 美しい～。箱を開けたときのこの感動はApple製品の醍醐味でもあります。 個人的な推しポイントが色み。iPhone11よりも深いレッドになってます。 箱の内容物はめちゃくちゃ簡素。意味のあるものといえば本体、ケーブル、SIMピンくらいしか入ってません。しかもLightning to USB type-Cという世界一使いにくいケーブルなのでこれすら意味があるのか疑わしい。 私が持っているiPhone7, 11, 13 miniの比較です(左から順に11, 7, 13 mini)。筐体サイズは13 miniが最小ですが、ホームボタンが無い分画面サイズは7よりも大きくなっています(画像2枚目のディスプレイの色調が違うのは、環境光によって色みを調節するTrue Toneという機能が13 miniでONになっているからだと思われる。11は写真撮る前にファクトリーリセットしちゃった)。 丸1日くらい使ってみて やはり軽くて小さいのは正義です。先代よりも驚くほど手にしっくりきます。よくあんな重いiPhone11なんか使ってたなと思うほどです。調べてみると11→13 miniでは50gも軽くなっているらしい。\nもともとスマホでしていたことと言えばTwitterかYouTubeくらいなので、画面の小ささもそんなに不便を感じません。12 miniではかねてより言われていたバッテリー問題ですが、たしかに使っていると減っていっているという実感はあります。ですが今のところ極端にもたないという感じもないです。しかし、私はスマホで全くと言っていいほどゲームはやらないので、ゲームをある程度する人にとっては参考にならないかもしれません\u0026hellip;\n","date":"2021-10-01T00:00:00Z","image":"https://twoooooda.net/post/iphone-13-mini%E8%B2%B7%E3%81%A3%E3%81%9F%E3%82%88%E3%83%BC/IMG_3890_hu7971286848471006460.JPEG","permalink":"https://twoooooda.net/post/iphone-13-mini%E8%B2%B7%E3%81%A3%E3%81%9F%E3%82%88%E3%83%BC/","title":"iPhone 13 mini買ったよー"},{"content":"はじめに 家に余ってたラズパイをテレビの録画サーバーにしようと思い、部屋の奥から引っ張り出してきたのはいいですが、初期設定もsshの接続設定も何もしてなかったので勉強がてらやってみました、例の如くやらないといけないことが複数サイトに渡って散らばっていたので、備忘録として一通りまとめます。なお、ラズパイのOSはインストール済み, 有線LAN接続なのを前提とし、ラズパイからモニターにはなるべく出力せずに設定することを目指します。\nホストのPCからラズパイにssh接続する OSをインストールしたmicroSDカードをラズパイに挿す前に, microSDカードの直下にsshという空のファイル(拡張子も無し)を作っておきます。こうすることでラズパイのGUIを触らずにsshをオンにできます。 ※7/28追記 OSが入ったSDカードを覗くと、bootとrootfsというパーティションにわかれている場合がありますが、sshを有効化するにはboot直下に置くのが正解らしいです。\nラズパイに接続して操作するホストのPCのターミナルから、以下のコマンドを叩くだけでssh接続できます(デフォルトユーザーにログインする場合)。 $ ssh pi@raspberrypi.local IPアドレスの固定 インターネットに繋げるたびにIPアドレスが変わると困るので、まずはラズパイのIPアドレスを固定します。ラズパイのIPアドレス固定の前に、ホストのPCのターミナルで以下を実行します。\n$ ipconfig /all するとIPの構成が一覧で出てくるので、 デフォルトゲートウェイとDNSサーバーのIPアドレス(192.168.x.OOOみたいなやつ)をメモします。 以降はssh接続を介してラズパイのコマンドを叩いていきます。まずはラズパイの設定ファイルを開いて編集します。\npi@raspberrypi:~$ sudo nano /etc/dhcpcd.conf nanoはviでもいいです(好み)。開いたら、末尾に以下を追加します。\ninterface eth0(無線LANの場合はここをwlan0にする) static ip_address=192.168.x.***/24 static routers=192.168.x.OOO static domain_name_servers=192.168.x.OOO staric ip_adress=にラズパイに割り当てたいIPアドレスを書きます。***の部分は1桁、2桁台は他の危機に割り当てられていることが多いので適当に100～200くらいにするといいらしいです。/24はサブネットマスク長です。 static routers=にデフォルトゲートウェイのIPアドレス、static domain_name_servers=にDNSサーバーのIPアドレスを書きます。編集できたら、保存してラズパイを再起動すれば変更が適用されているはずです。 参考記事 ユーザーの追加, 権限の付与 新しいユーザーの追加 デフォルトユーザーである「pi」とは別のユーザーを作成し、権限をそちらに移行します。sshを介してラズパイのターミナルにて、\npi@raspberrypi:~$ sudo adduser |newuser| |newuser| に任意のユーザー名を指定して実行します。「New password:」と「Retype new password:」へ新規ユーザーのパスワードを指定します。その後くらいにいろいろ設定項目が出てきますが、特に必要がないなら全てEnterで進んでもいいです。 権限の付与 「pi」ユーザーの権限を新しいユーザーに追加します。まずは「pi」ユーザーの権限を確認するために以下を実行します。\npi@raspberrypi:~$ groups pi すると「pi」ユーザーに付与されている権限が一覧で表示されるので、usermodコマンドで新しいユーザーに権限を移します。\npi@raspberrypi:~$ sudo usermod -G pi,adm,dialout,cdrom,sudo,audio,video,plugdev,games,users,input,netdev,spi,i2c,gpio newuser 「pi」ユーザーのホームフォルダのコピー 「pi」ユーザーのホームフォルダの内容をnewuserのホームフォルダにコピーします。\npi@raspberrypi:~$ sudo cp -r /home/pi/* /home/newuser デフォルトユーザー(pi)の無効化 ラズパイを起動する度に「pi」ユーザーに勝手にログインされると困るので、「pi」ユーザーへの自動ログインをオフにして、ついでに「pi」ユーザーを無効化します。\npi@raspberrypi:~$ sudo nano /etc/lightdm/lightdm.conf /lightdm/lightdm.confの126行目の先頭に#を入れてコメントアウトします(#autologin-user=pi)。 次に、newuserでオートログインするようにします。autologin@.serviceを開いて、28行目の「\u0026ndash;autologin pi」を「\u0026ndash;autologin newuser」へ変更します。\npi@raspberrypi:~$ sudo vi /etc/systemd/system/autologin@.service 最後に「pi」ユーザーを無効にします。ユーザーのアカウントの有効期限を過去の日付にすることで無効化できます。\npi@raspberrypi:~$ sudo usermod --expiredate 1 pi 以降は新しく作成したnewuserで作業します。 参考記事 鍵ペアの生成と送信、設定 鍵の生成と送信 公開鍵認証とは、パスワードの代わりに公開鍵(ホスト側のPC)と秘密鍵(ラズパイ)のペアで認証する方法です。まずはホストのPCに鍵ペアを生成するディレクトリ及び鍵ペアを作ります。\n$ mkdir ~/.ssh/raspberrypi $ ssh-keygen -t rsa Enter file in which to save the key (/Users/username/raspberrypi/.ssh/id_rsa): 必要に応じてこの後に聞かれるパスフレーズも入力します。自分は省略しました。これで秘密鍵のid_rsaと公開鍵のid_rsa.pubが生成されます。これらのうちid_rsa.pubをラズパイ側に送ります。\n$ scp ~/.ssh/raspberrypi/id_rsa.pub newuser@raspberrypi:~ 公開鍵の設定 ラズパイにパスワード認証でログインし、鍵を管理する.sshを作ります。\nnewuser@raspberrypi:~$ sudo mkdir ~/.ssh 先ほど送信したid_rsa.pubをauthorized_keysと名前を変更しつつ.sshに移動します。\nnewuser@raspberrypi:~$ sudo mv ~/id_rsa.pub ~/.ssh/authorized_keys 次に.ssh、authorized_keysのパーミッションを変更します。\nnewuser@raspberrypi:~$ chmod 600 ~/.ssh/authorized_keys newuser@raspberrypi:~$ chmod 700 ~/.ssh 最後にssh_configを修正します。\nnewuser@raspberrypi:~$ sudo nano /etc/ssh/sshd_config 以下のような記載の行のコメントアウトを外して編集します。\nAuthorizedKeysFile .ssh/authorized_keys .ssh/authorized_keys2 この時にポート番号の変更や、パスワード認証のオフができます。しかし、公開鍵認証が上手くいってない状態でパスワード認証をオフにしてしまうと、次回からログインできなくなってしまうので慎重に行ってください。最悪OSのインストールし直しになります(私は既に何度かやらかしました)。 最後にラズパイを再起動すると、次回から以下のコマンドで公開鍵認証でログインできるはずです。\n$ ssh -i [秘密鍵ファイル] -p [ポート番号] pi@[Raspberry PiのIPアドレス] (例)ssh -i .ssh/id_rsa -p 22 pi@192.168.0.100 参考記事 ssh configの追加 この方法で接続してもいいんですが、コマンドが長いので短縮します。 ~/.ssh/configを作り、以下を追記します。\nHost [任意のコマンド名] HostName [ラズパイのIPアドレス] User [ラズパイのユーザーネーム] Port [ラズパイのポート番号] IdentityFile [秘密鍵ファイル] 今回の例では以下のようになります。\nHost raspi HostName 192.168.1.100 User newuser Port 22 IdentityFile ~/.ssh/id_rsa こうすることでssh接続時のコマンドを以下のように大幅に短縮できます。\nssh raspi 参考記事 以上です。ファイル名や環境は各々によって違うのでそこは適宜変更をおねがいします。\n","date":"2021-06-03T00:00:00Z","image":"https://twoooooda.net/post/%E3%83%A9%E3%82%BA%E3%83%91%E3%82%A4%E3%81%AB%E5%85%AC%E9%96%8B%E9%8D%B5%E8%AA%8D%E8%A8%BC%E3%81%A7ssh%E6%8E%A5%E7%B6%9A%E3%81%99%E3%82%8B%E3%81%BE%E3%81%A7/raspi_hu15334811903323164969.jpeg","permalink":"https://twoooooda.net/post/%E3%83%A9%E3%82%BA%E3%83%91%E3%82%A4%E3%81%AB%E5%85%AC%E9%96%8B%E9%8D%B5%E8%AA%8D%E8%A8%BC%E3%81%A7ssh%E6%8E%A5%E7%B6%9A%E3%81%99%E3%82%8B%E3%81%BE%E3%81%A7/","title":"ラズパイに公開鍵認証でssh接続するまで"},{"content":"HUGOの仕様 静的サイトジェネレータ \u0026ldquo;HUGO\u0026rdquo; は、テーマの制作者がGitHubに上げているリポジトリをサブモジュールとして使うことで自分のサイトにテーマを導入します。ゆえに、テーマのレイアウトに関わるコードを直接書き換えることはできません(ローカルファイルは書き換えられますが)。 しかしHUGOの仕様として、/staticや/layouts以下のフォルダやファイルが優先して読み込まれるというものがあります。 ではどうするか 当サイトのテーマを例にすると、/themes/hugo-theme-stack/layouts/partials/sidebar/right.htmlを書き換えたい場合、該当のファイルを/layouts/partials/にコピー＆ペーストすると、そちらの方が先に読み込まれるので結果的に編集して上書きが可能なわけです。 あとはAmazonのアフィリエイトリンクのHTMLコードを生成して、上記のright.htmlに書き込むとちゃんと表示されました。 ","date":"2021-04-13T00:00:00Z","image":"https://twoooooda.net/post/hugo%E3%81%A7%E4%BD%9C%E3%81%A3%E3%81%9F%E3%82%B5%E3%82%A4%E3%83%88%E3%81%AB%E3%82%A2%E3%83%9E%E3%82%BE%E3%83%B3%E3%81%AE%E3%82%A2%E3%83%95%E3%82%A3%E3%83%AA%E3%83%B3%E3%82%AF%E3%82%92%E8%B2%BC%E3%82%8B/hugo_hu5348393644182254210.png","permalink":"https://twoooooda.net/post/hugo%E3%81%A7%E4%BD%9C%E3%81%A3%E3%81%9F%E3%82%B5%E3%82%A4%E3%83%88%E3%81%AB%E3%82%A2%E3%83%9E%E3%82%BE%E3%83%B3%E3%81%AE%E3%82%A2%E3%83%95%E3%82%A3%E3%83%AA%E3%83%B3%E3%82%AF%E3%82%92%E8%B2%BC%E3%82%8B/","title":"HUGOで作ったサイトにアマゾンのアフィリンクを貼る"},{"content":"はじめに 少し前にOculus Quest2を購入し、しばらくハンドトラッキングで遊んでいたんですが、急に『手で蚊を潰すVRゲーム』を作りたくなったのでとりあえず蚊っぽい挙動をするナニカを作りました。 スクリプト やっていることはごく簡単で、数フレームに一回ランダムでRotationの値を変更し、Z方向に常に力を加え続けているだけです。\nusing UnityEngine; public class Move_mosquite : MonoBehaviour { Rigidbody rb; public float freq, speed, power; void Start() { rb = this.GetComponent\u0026lt;Rigidbody\u0026gt;(); } void Update() { rb.velocity = rb.velocity.normalized * speed; //変数speedで速度の設定 rb.AddForce(this.transform.forward * power * Time.deltaTime, ForceMode.Force); //Z方向(forward)に力を加え続ける if (Random.value \u0026lt; freq) //Rotationを変更する頻度を設定。毎フレームだと頻繁過ぎるので。 { transform.eulerAngles = new Vector3(Random.Range(0, 360), Random.Range(0, 360), Random.Range(0, 360)); } } } このままでは無限にどっかいってしまうので、適当にコライダーをつけるとか、壁に近づくと力を受けるとかにするといいかもしれません。 なお、当方めちゃくちゃ初心者なのでもっと効率的なやり方や、もっとリアルになるやり方があるかもしれませんのであしからず\u0026hellip;.\n完成例 ","date":"2021-04-02T00:00:00Z","image":"https://twoooooda.net/post/mosquite-in-unity/ka_hu15115893838132442459.png","permalink":"https://twoooooda.net/post/mosquite-in-unity/","title":"Unityで蚊っぽい動きをするやつを作る"},{"content":"はじめに 自分は最近、当ブログを静的サイトジェネレータであるHUGOを用いて作成しました。HUGO自体はわかってしまえばごく簡単に導入、使用できるんですが、いかんせん自分がweb系、GitHubに関して無知であったためハマりポイントをことごとく踏み抜いていき、結局公開までかなり時間がかかってしまいました。なので覚えているうちに使い方や参考サイトをまとめようと思います。\nちなみにデプロイ方法等は我流でやっていますが、いろんな方法があるみたいなのであくまで一例としてお読み頂けたら光栄です。\n1.HUGOのインストール 基本的には、HUGOの公式サイトにあるQuick Startに従ってHUGOをインストールしていきます。自分はWindows環境なので、Chocolateyというパッケージマネージャを使ってインストールしました。以降はコマンドプロンプト上で、$ choco install hugo -confirmを実行するとHUGOがインストールされるはずです。$ hugo versionでバージョンが確認できたらインストールされています。\n$ hugo version hugo v0.81.0-59D15C97 windows/amd64 .... 2.GitHubの準備 自分のGitHubのページにて、[UserName].github.ioという名前でリポジトリを作ります。リポジトリ名をこうすることでGitHubさんがPages用のリポジトリだと勝手に判断してくれます。なのでリポジトリ名がページのURLhttps://\u0026lt;UserName\u0026gt;.github.ioになります。あとはこのリポジトリをクローンして取り敢えず環境は完成です。\n一般的なのはソースコード用のリポジトリを別で作り、ビルド結果だけをPages用のリポジトリにあげる方法らしいのですが、自分はリポジトリが増えるのが嫌だったので、souceブランチをソースコード用、mainブランチをデプロイ用のブランチにしました。\n3.サイトのひな形を作る まずsourceブランチを作り、その下にHUGOのコマンドでファイルを作っていきます。$ hugo new site \u0026lt;フォルダ名\u0026gt;でHUGOを使う上で最小限のファイルとフォルダを作成できます。\n$ cd \u0026lt;UserName\u0026gt;.github.io $ git branch source $ git checkout source $ hugo new site blog 自分はsourceブランチ直下で作業したかったので、blogフォルダ内の内容をsourceブランチ直下に移動させました(blogフォルダは削除)。\n4.テーマを導入する HUGO公式のthemeページからテーマを選んで、自分のリポジトリにサブモジュールとして追加します。例としてこのブログのテーマ(Hugo Future Imperfect Slim)を用います。\n$ git submodule add https://github.com/pacollins/hugo-future-imperfect-slim.git themes/hugo-future-imperfect-slim サブモジュール化ができたら、themes/hugo-future-imperfect-slim/exampleSite 内のファイルやフォルダをまるっとブランチ直下にコピーします。それと同時に、もともとあったconfig.tomlは消しておきます(configファイルが競合するため)。\n5. 試運転してみる $ hugo serverでローカルにサーバーをたてて、http://localhost:1313にアクセスするとサイトの内容を確認できます。ここまでが正しくなされているとテーマのDemoサイトと同じ状態になっているはずです。\nまた、$ hugoでサイトのデータをビルドできます(/publicが生成される)。 6.GitHub Actionsの設定 GitHub Actionsとは、リポジトリにコミット等があった時にそれを検知して自動的にデプロイとかする機能(?)らしいです(今回の場合)。自分は雰囲気で使っているので詳しくは知りません。\nsourceブランチの下に、.github/workflows/main.ymlを作成します。Reonaさんのブログを参考にしてmain.ymlに記載のあるデプロイ先ブランチとかを編集しました。\nここまでやってきたことをまるっとsourceブランチにコミットすると、Actionsが働いてmainブランチにデプロイされ、ページが公開されるはずです。\n7. 設定を編集する config.tomlを見てみると、設定の項目がズラリとならんでいます。ここでサイトを自分用にするための設定をしていきます(サイトの名前、アイコン、URLなど)。\nここで、アイコンに設定したい画像等をconfig.tomlから指定するのですが、そういうのは基本 /staticに保存して、パスを指定するようです。追加のcssで見た目を変えたい時も、/themesの中には書かず、/layouts/partials内とかに書くようです(細かいところはテーマによって変わるのでテーマのDocumentを読んでね)。\n8.記事を追加する サイトの枠組みが完成したら、あとはサンプルの記事を削除して、自分の記事を追加していきます。$ hugo new \u0026lt;フォルダ名\u0026gt;/\u0026lt;ファイル名\u0026gt;で新しい記事を追加できます。基本的に記事は全てMarkdown形式で書きます。\n例) $ hugo new content/blog/article_2021-01-01.md 参考サイト Hugo+Github Pagesで新しい個人ウェブサイトを作った Hugo + GitHub Pages + GitHub Actions で独自ドメインのウェブサイトを構築する GitHub Pages × Hugo で技術ブログを始めた ","date":"2021-03-08T00:00:00Z","image":"https://twoooooda.net/post/%E9%9D%99%E7%9A%84%E3%82%B5%E3%82%A4%E3%83%88%E3%82%B8%E3%82%A7%E3%83%8D%E3%83%AC%E3%83%BC%E3%82%BFhugo%E3%81%A7%E5%80%8B%E4%BA%BA%E3%83%96%E3%83%AD%E3%82%B0%E3%82%92%E3%81%A4%E3%81%8F%E3%82%8Agithub-pages%E3%81%A7%E5%85%AC%E9%96%8B%E3%81%99%E3%82%8B/hugo_hu5348393644182254210.png","permalink":"https://twoooooda.net/post/%E9%9D%99%E7%9A%84%E3%82%B5%E3%82%A4%E3%83%88%E3%82%B8%E3%82%A7%E3%83%8D%E3%83%AC%E3%83%BC%E3%82%BFhugo%E3%81%A7%E5%80%8B%E4%BA%BA%E3%83%96%E3%83%AD%E3%82%B0%E3%82%92%E3%81%A4%E3%81%8F%E3%82%8Agithub-pages%E3%81%A7%E5%85%AC%E9%96%8B%E3%81%99%E3%82%8B/","title":"静的サイトジェネレータ”HUGO”で個人ブログをつくり、GitHub Pagesで公開する"},{"content":"苦悩の末 最近急にはてなブログやnoteとは違う個人ブログが欲しくなり、静的サイトジェネレーターであるHUGOと、勉強がてらGitHub Pages、Actionsを使ってブログを作ってみました。実はサイト作成にあたり数日間に渡り大変苦労したのですが、その話はHUGO等の使い方とともにまとめようと思います。\nではまた。\n","date":"2021-03-07T00:00:00Z","image":"https://twoooooda.net/post/hello-world/publicdomainq-0012425opp_hu4125292090281377101.jpg","permalink":"https://twoooooda.net/post/hello-world/","title":"Hello, world！"}]