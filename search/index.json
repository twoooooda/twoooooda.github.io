[{"content":"いきさつ 　ここ最近、諸事情あって競技プログラミングで有名なAtCoderに参戦したのですが、AtCoderのwebページでポチポチコーディングするのも、別のエディタで書いてコピペするのもなんだかなぁという感じだったので、友人が使っていたatcoder-cliというものを導入して使ってみることにしました。なお、この記事は以下の参考文献から大いに引用しています。\n参考文献\n AtCoder 環境構築 for Python コマンドラインツールatcoder-cliを公開しました（作成者様のサイト） atcoder-cli チュートリアル（作成者様謹製のチュートリアル）   atcoder-cliとは？ 　atcoder-cliとは、コンソールから短いコマンドを打つだけで問題の提出のみならず、使用する各言語に合わせたテンプレートの自動展開、作業フォルダ、ファイルの整理、テストケースの自動ダウンロード、検証などを簡単に行えるツールです。この記事では、基本的にPythonでAtCoderに参戦することを前提に進めていきます。\n導入方法 　基本的にはさっきのチュートリアルに従ってatcoder-cliと、セットでほぼ使うであろう online-judge-toolsも一緒にインストールします。ちなみに、atcoder-cliはJavaScriptのパッケージマネージャであるnpmでインストールするので、npmが入っていない方はそちらを先にやってしまいましょう。\nNode.js・npmのインストール\n環境    Python（Anaconda） 3.8.8     pip 22.0.4   npm 6.14.6    インストール 　online-judge-toolsとatcoder-cliのインストールには、以下のコマンドを実行します。\n \u0026gt; pip install online-judge-tools \u0026gt; npm install -g atcoder-cli そして、以下のコマンドが使用できればインストールされています。\n\u0026gt; acc -h ログイン 　atcoder-cliとonline-judge-toolsの両方ログインする必要があります。以下のコマンドを叩いた後にAtCoderのユーザー名とパスワードを入力します。まずはonline-judge-toolsの方から。\n\u0026gt; oj login https://atcoder.jp/ 次にatcoder-cliの方にログイン。\n\u0026gt; acc login ここで、Linux等のCUIに普段から触れていると慣れているかもしれませんが、パスワードを入れる時に一見して入力できていないように見えるかもしれません。が、見えないようになっているだけで入力できています、大丈夫です。\nConfigファイルの編集 　問題を解くときに、毎回main.pyの作成や問題用ディレクトリを作るのは面倒なので、自動化します。そのためにConfig.jsonを編集します。まずはConfigの場所の確認から。\n\u0026gt; acc config-dir C:\\Users\\\u0026lt;username\u0026gt;\\AppData\\Roaming\\atcoder-cli-nodejs\\Config 環境によってファイルの場所はまちまちになるかと思います。ファイルを開いて、以下みたいな感じに\u0026quot;default-test-dirname-format\u0026quot;と\u0026quot;default-template\u0026quot;:\u0026quot;python\u0026quot;を変更します。\n{ \u0026#34;oj-path\u0026#34;: \u0026#34;C:\\\\ProgramData\\\\Anaconda3\\\\Scripts\\\\oj.exe\u0026#34;, \u0026#34;default-contest-dirname-format\u0026#34;: \u0026#34;{ContestID}\u0026#34;, \u0026#34;default-task-dirname-format\u0026#34;: \u0026#34;{tasklabel}\u0026#34;, \u0026#34;default-test-dirname-format\u0026#34;: \u0026#34;test\u0026#34;, \u0026#34;default-task-choice\u0026#34;: \u0026#34;inquire\u0026#34;, \u0026#34;default-template\u0026#34;: \u0026#34;python\u0026#34; } 次に、上のConfig.jsonがあったConfigフォルダにpythonフォルダを作り、その中にmain.pyとtemplate.jsonを作ります。main.pyの中身は空でも大丈夫で、template.jsonは以下。\n{ \u0026#34;task\u0026#34;: { \u0026#34;program\u0026#34;: [ \u0026#34;main.py\u0026#34; ], \u0026#34;submit\u0026#34;: \u0026#34;main.py\u0026#34; } } 使ってみる 解答用フォルダ作成 　ようやく使用法編です。今回はC:\\Users\\\u0026lt;username\u0026gt;の中にatcoderというフォルダを作り、その中で作業することとします（ここは自由です）。問題は仮にabc250のa問題を解くとしましょう。\n\u0026gt; cd atcoder \u0026gt; acc new abc250 \u0026gt; acc new abc000でその回の解答用フォルダとテストケースのダウンロードが可能です。すると、以下のように問題のリストが表示され、Spaceキーで問題の選択、Enterキーでフォルダ作成ができます。aキー -\u0026gt; Enterで全問を一括で選択できます。\nabc250/contest.acc.json created. create project of AtCoder Beginner Contest 250 ? select tasks (Press \u0026lt;space\u0026gt; to select, \u0026lt;a\u0026gt; to toggle all, \u0026lt;i\u0026gt; to invert selection) \u0026gt;(*) A Adjacent Squares ( ) B Enlarged Checker Board ( ) C Adjacent Swaps ( ) D 250-like Number ( ) E Prefix Equality ( ) F One Fourth ( ) G Stonks (Move up and down to reveal more choices) 仮に全選択すると解答用フォルダはこんな感じになっているかと思います。a問題を解くときは、aフォルダにあるmain.pyにコードを書いていきます。  \n解答、テストケース検証 　main.pyに解答を書き終えたら、テストします。コンソールからaフォルダに移動して、以下を実行します。\n\u0026gt; cd abc250/a \u0026gt; oj t -c \u0026#34;python main.py\u0026#34; すると、テストケースの検証結果が返ってきます。\nC:\\Users\\\u0026lt;username\u0026gt;\\abc250\\a\u0026gt; oj t -c \u0026#34;python main.py\u0026#34; [INFO] online-judge-tools 11.5.1 (+ online-judge-api-client 10.10.0) [INFO] 6 cases found [WARNING] GNU time is not available: time [INFO] sample-1 [INFO] time: 0.065499 sec [SUCCESS] AC [INFO] sample-2 [INFO] time: 0.050322 sec [SUCCESS] AC [INFO] sample-3 [INFO] time: 0.049653 sec [SUCCESS] AC [INFO] sample-4 [INFO] time: 0.051948 sec [SUCCESS] AC [INFO] sample-5 [INFO] time: 0.046560 sec [SUCCESS] AC [INFO] sample-6 [INFO] time: 0.046376 sec [SUCCESS] AC [INFO] slowest: 0.065499 sec (for sample-1) [SUCCESS] test success: 6 cases いい感じにACが出てていい感じですね。\n提出 　テスト結果がいい感じだったので提出します。\n\u0026gt; acc submit main.py 提出に成功すると、自動的にAtCoderのwebページがブラウザで開き、判定されます。そこでACをもらうと晴れて解答完了です。お疲れ様でした。\n問題追加 　例えば、4.1章でa問題のフォルダのみを作成したけど後にb問題以降も解きたくなったとき、abc250のフォルダに戻り、acc addで追加ができます。\n\u0026gt; cd ..（一つ上の階層に戻る） \u0026gt; acc add そうすると、同じような問題選択画面が表示され、任意の問題を追加できます。\n","date":"2022-05-20T00:00:00Z","permalink":"https://twoooooda.net/post/introduce-atcoder-cli/","title":"atcoder-cliを導入してみた"},{"content":"導入を考えたきっかけ 　以前の記事でも述べた通り、自作キーボードに対応しているファームウェアがマジのゴミで、キー割り当てを変えられなかったので、いろいろ調べているうちにAutoHotKeyというものを見つけました。\nAutoHotKeyとは？ 　独自のプログラミング言語を用いて、キーボードのキー操作によるかなり柔軟なショートカットの作成や、普段あまり使わないキーを全く別のキーとして割り当てたり、メディアコントロールやPCのシステム操作を割り当てたりできます。参考\n導入方法 　基本的にこのサイトに従ってインストールして、拡張子を.ahkとしたテキストファイルを作り、そこに任意のショートカットやキーの割り当てを記述していきます。記法や文法、決まりごとは日本語のリファレンス(?)があるので、そちらを参照してください。\n　このAutoHotKeyを使う場合、拡張子が.ahkのファイル、あるいは.ahkのファイルから作成した.exeの実行ファイルを起動し、タスクトレイで常駐させておかなければなりません。なので、PC起動時に自動で該当のファイルが起動するようにしておくと便利です。私はこちらのサイトを参考に設定しました。\n実際に使う 　私がこのAutoHotKeyでやりたかったのは、\u0026quot;キーボード右上のPageUp、PageDownのキーをメディアの再生一時停止、次の曲ボタンへ割り当て\u0026quot; です。実際のコードはごく簡単なもので、以下のように書いたら思った通りに動いてくれました。\n#InstallKeybdHook #UseHook PgUp::Media_Play_Pause PgDn::Media_Next return また、便利だと聞いたのでこちらのサイトを参考に、左右Altの空打ちで日本語入力と英字入力を切り変えられるようにしました。私は起動しないといけない実行ファイルが増えると嫌なので、実際に使うときはPageUp/Downキーをメディアコントロールに割り当てるコードと、alt-ime-ahk.ahkの内容を一つのファイルに統合しています(ファイル名をgeneral.ahkとしています)。\n導入してみて 　導入してしばらく使ってみましたが、とてもとても便利です。 タスクトレイに入るアイコンが一つ増えるのが最初は少し抵抗がありましたが。それを補って余りある恩恵を受けています。今後新しくショートカットが欲しくなったり、割り当てを変えたい時が来れば今使っているgeneral.ahkファイルに追記すればいいだけなので、使い方を多少覚えていればこれからもっと気軽に便利にしていくことができると思います。\n","date":"2022-01-04T00:00:00Z","permalink":"https://twoooooda.net/post/introduce-autohotkey/","title":"AutoHotKeyを導入してみた"},{"content":"しばらく前から自作キーボードの沼というものに興味があり、年が明けたら入るお年玉をアテに思い切って作ってみることにしました。\n用いたパーツ PCB、ケース 　ケース、基板、プレート等がセットになっているTom980というコンパクトなフルサイズキーボード自作キット(98キー)を買いました。フルカラーLEDつき、ホットスワップ方式ではんだ付けがいらないというのも高得点です。安価ながらなかなかいいキットだと思います。アリエクスプレスで買いました。\n 本体   付属品(見切れてる方は普通のUSB端子です) \nしかしこのキーボードキット、汎用のファームウェアであるQMKファームウェアに対応していない代わりに独自のファームウェアがあり、そちらにのみ対応しているようです。redditのレビューに落ちていました。が、レビュー曰く、このファームウェアは \u0026ldquo;almost complete garbage(ほぼ完全にゴミ)\u0026rdquo; らしく、実際に使ってみても確かにゴミでした。具体的には、LEDの発光パターンや色は変えられるけど、特定のキーに別の役割を当てたり、マクロを割り当てたりなどがほぼ完全に機能していません。さらに(これは私だけの環境かもしれませんが)なぜかESCキーが右Winキーになってしまっていたりでなかなかよくわからん挙動をしています(これはPC内の別のソフトウェアでなんとかした)。それ以外は概ね満足です。\nキースイッチ 　キースイッチはいろいろ考えた結果、界隈では有名らしいHoly Pandaという高級タクタイルキースイッチの廉価版であるFEKER like Holy Pandaを採用しました。リンクから飛べるTALP KEYBORDという国内の自作キーボード専門店から購入しました。\n 100個買った   形状はCherry MX準拠 \n押下圧は公称で67gとなっており、少々重めです。分類はタクタイルとなっており、心地よいタイピング音とサクサク感のある押し心地でかなり好印象です。多少の個体差はあるものの買った100個すべてのスイッチがきちんと動作しており、品質も問題なしでした。TALP KEYBORDさんありがとうございました。\nキーキャップ 　キーキャップは、アリエクスプレスで見つけたこの可愛いキーキャップをほぼ即決で採用しました。全体的にデザインがめちゃくちゃ好みで、キャップの種類も豊富で実物のクオリティもそれなりに高く満足しているのですが、届いたパッケージにはラベルも何もなく、ストアページも何か後ろめたいことがありそうな感じなので、まぁおそらく正規品ではないのでしょう。クリプトンフューチャーメディア等の初音ミク公式から発売されたらそちらに買い換えようと思います。  可愛い～   見てのとおり、パッケージには何もなし \nその他に揃えたもの 　今回はlubeという、キースイッチの内部の擦れる部分にグリスを塗って音や打ち心地を改善する作業にも挑戦したかったので、それ用のツールもいくつか揃えました。\n スイッチを分解するためのキースイッチオープナー(TALP KEYBORDさんでスイッチと一緒に買った) キースイッチ内部に塗るグリス \u0026ldquo;Tribosys 3203\u0026rdquo; (詳しく) lubeするパーツを置いておけるlubeステーション(3Dプリンターで出力した。使ったモデル) 100均で買った細い筆   スイッチオープナー   グリス   lubeステーション   使ったのは1.5mm径の筆。もっと細くていいかも \nlubeが大変だった 　大変でした\u0026hellip; 自作キーボードと言えば、Happy Hacking Keybordに代表される60%キーボードのような配列が一般的だと思いますが、今回作ったのはコンパクトながらフルサイズキーボードなので、98キーあります(ちなみに英字配列フルサイズキーボードは全部で102キー)。当然すべてのスイッチについてlubeしました。慣れるとスイッチ一つあたり5分くらいで済ませられるようになりましたが、かなり細かい作業なので一日にできる個数は限られており結局終わるまで数日かかりました(lubeしながら年越した)。\nグリスの選択や、塗る場所はこのサイトを参考にしました。  lubeの様子 \n　lubeの効果ですが、たしかにあるように感じます。lubeする前と後とでタイピングの比較はしてないので何とも言えないですが、カチャカチャというプラスチックが擦れるような音が軽減されたり、打ち心地がサクサクとした感触になったりで効果はあると思います。たぶん。ただ、60%キーボードならいざ知らず今回は98キーあるので、それら全てにlubeする労力と効果が見合うかは微妙です。私は普段からキーボードにかなり触るのでやってよかったと感じますが、とりあえず自作キーボードをやってみたいという方には障壁になるかもしれません。\n総額でいくらくらい？ 　詳細な値段はそれぞれのリンクから飛んでもらえれば値段はわかると思います。自作キットやキーキャップはアリエクスプレスで買ったので比較的安く抑えることができました。キースイッチやグリスはそれぞれ国内販売店であるTALP KEYBORDや遊舎工房で購入したので、送料もかかり少し高くついてしまいました。\n筆やその他100均で買ったツール、lubeステーションの印刷代を除き、グリス代や送料を含めた総額は、¥21,136となりました。これを安いと見るか高いと見るかはあなた次第です\u0026hellip;\n総評 これまでつらつら書いてきましたが、金と時間をかけながらも自分でキーボードを作って良かったと思っています。キースイッチやグリスの選択、塗り方で押し心地や音を、外装やキーキャップの選択によってデザインを、ケースや基板によってキーボードの配列や機能を完全にカスタイマイズできるところが自作キーボードのいいところだと今回の挑戦でわかりました。少しでも気なった方は是非この沼に飛び込んでみては。      \n1/7追記 YouTubeにタイピング音の軽いデモを投稿しました。サウンドデモの動画なのにノイズがあったりで音周りが拙いですが、多少の参考になれば幸いです\n  ","date":"2022-01-03T00:00:00Z","image":"https://twoooooda.net/post/keybord-built-by-myself/IMG_4085_hu71b73859a8d8c6fe289a256bc3497d4d_866874_120x120_fill_q75_box_smart1.JPEG","permalink":"https://twoooooda.net/post/keybord-built-by-myself/","title":"私の自作キーボード奮闘記"},{"content":"こんばんは、いっとりうむです。今年の2月くらいに、クラウドファンディングサイトkickstarterでバック(お金を出して支援すること)した返礼品である「Looking Glass Portrait」がやっと届きました。他のバッカーの方は5月くらいには届いていたようですが、住所登録のフォームの入力が遅れてしまったせいで到着が今になってしまいました。\nLooking Glassとは？ 端的に言うとズバリ「裸眼で立体視可能なディスプレイ」です。一般的な立体視ディスプレイは青色と赤色のフィルムをレンズとしたメガネや、偏光フィルタを使ったメガネをかける必要があったりしますが、Looking Glassはそういった類のものは全く必要とせず立体視が可能です。詳しい原理は公式のドキュメントに書いてあるのでそちらを読んでもらうのが一番確実ですが、レンチキュラーレンズという特殊な構造を持ったディスプレイに横方向45視点くらいからの画像を同時に表示して、両目による視差、あるいは横に動いた時の視差を実現しています。\n  最初に世に出たLooking Glassは,、全面に巨大で重厚なアクリルの塊がついた8.9インチのディスプレイでした(購入済み)。購入当時はだいたい8万円でした。  \n  初代の8インチのものがあまりに重く、場所も取るため、小型化＆薄型化\u0026amp;低価格化(クラファン特価で$199)した「Looking Glass Portrait」が2020年末に発表されました。\n  開封   製造元のLooking Glass Factory社はスタートアップながら、かなりちゃんとした化粧箱で届きました。  \n  キャリーケース付きのプランをバックしたので、まずはそちらが顔を覗かせます。  \n  本体。画面部分を見ると、先代と比べてアクリル塊が無くなっているどころか凹んでいます。    \n  キャリーケースもしかっりしたオリジナルのものが付いてきました。  \n  付属品はHDMIケーブル、USB Type-Cケーブル、USB Type-C端子のACアダプタ(5V, 3A)、クリーニングクロス、キャリーケースに着ける紐がついてきました。紙類は簡単な説明書、サンキューカード的な奴、ステッカー。    \n  Looking Glass Portrait   スペックとしては、画面サイズが7.9インチ、重量660g。Rasberry pi 4を搭載しており、PCにつないでディスプレイとして使う他にも、電源に繋ぐだけで単体でデモを表示できます。\n  向かって左側面にはHDMIとUSB Type-Cポート、3.5mmオーディオOUT。右側面には電源スイッチ(上)、LED調光スイッチ(下)、デモ操作用のタッチスイッチが3つ並んでいます。    \n  ラズパイ4を内部に搭載しているので、USB Type-Cポートから電源に繋ぐだけでプリセットのデモを表示できます。デモにはiPhone12 ProのLiDARセンサーを使って撮影したポートレート写真や3DCGムービーが入ってました。中にはVirtual YouTuberのキズナアイ親分のショート動画もあってビックリしました。    \n  推奨解像度は普段あまり馴染みのない1536×2048。数字上はフルHDよりも高精細ですが、構造が特殊なこともありフルHDモニターよりもドット感が目立ちます。見てのとおり、エクスプローラーの文字も読めません。    \n  こればかりは画像で全く伝わらないのが惜しいですが、初代Looking Glassより小型軽量化しているのにも関わらず、遜色なくちゃんと裸眼立体視出来ています。立体視の体験的には劇的に進化したという感じは少ないですが、着実に良い製品となっています。軽くなったことにより取り回しやすくなり、何倍も使いやすくなったのではないでしょうか。手の届く範囲まで値段も下がっているので、興味がある方は購入してみても後悔しないと思います。\n  ","date":"2021-10-12T00:00:00Z","image":"https://twoooooda.net/post/looking-glass-portrait%E7%9D%80%E5%BC%BE%E9%96%8B%E5%B0%81%E3%83%AC%E3%83%93%E3%83%A5%E3%83%BC/IMG_3916_hu6809022b3e0725950ccd8f93b10b6e03_935601_120x120_fill_q75_box_smart1.JPEG","permalink":"https://twoooooda.net/post/looking-glass-portrait%E7%9D%80%E5%BC%BE%E9%96%8B%E5%B0%81%E3%83%AC%E3%83%93%E3%83%A5%E3%83%BC/","title":"「Looking Glass Portrait」着弾\u0026開封レビュー"},{"content":"前回記事のとおり、先日発売されたiPhone13 mini を買うことにしました。幸いにして私は物持ちがすこぶる良く、2年前のiPhone11の状態もほぼ無傷だったので、Apple公式の下取りサービスである「Apple Trade In」を使ってiPhone11を下取りに出すことにしました。\nApple Trade Inとは 前述の通り、Apple社が公式で行っているApple製品下取りサービスです。AppleがiPhone6 Plus(下取り価格約3,000円)から、iPhone12 ProMax(最大84,000円)までのシリーズを引き取り、相応の値段を購入額から割り引くというよくある感じのサービスです。iPhone6以前の機種は無料で回収されるのみとのこと。\n利用手順  まずはiPhoneの新規購入画面で、サービスに関係する基本的なフォームを入力します。今回はiPhone11 64GBモデルなので最大33000円で下取ってくれるようです。      ↑をきちんと入力して新規購入の決済を完了すると、しばらくして追加の情報を入力するためのリンクがメールで届きます。私の場合は9/28に決済を済ませた後すぐにメールが来ました。\n このフォームでは、自分の職業(会社員or自営業or学生orその他 くらいざっくりしたもの)と、本人確認書類のアップロードを求められます。本人確認書類は、運転免許証や健康保険証、パスポート、住民票の写し、在留カード、公共料金の領収書などから2点の提出を求められます。 2点のうち1点は裏面もアップロードする必要があるので、運転免許証or健康保険証はほぼ必須でしょう。    次に、iPhoneを回収してもらうための集荷依頼のフォームがあります。日時と時間帯を指定してこのフォームは完了です。14日以内にデバイスを送らないと下取りがキャンセルになるようです。\n  9/30 新iPhone受け取り後 iPhone受け取ったら下取りキットの発送が保留になってました。メールも来ないしちょっと心配になりました。\n \n10/3 集荷に来てくれました 指定の集荷時間を14時～16時にしたのですが、無事15時前にヤマトさんに来ていただきました。渡すものは下取りに出すiPhone11のみで、梱包もヤマトのお兄さんがやってくれました。本当に玄関先で生の本体を渡すだけでした。\n前日に集荷予定のリマインダーメールも寄越してくれました。\n10/5 査定、下取りプロセス完了 Appleから査定及び下取りプロセスがすべて完了したという旨のメールが来ました。\n \nまた、後日クレカの利用履歴を確認すると、同日10/5にクレカ経由で返金手続きがなされていました。\n \n新iPhone購入から、約1週間で全ての手続きが完了したことになります。\n","date":"2021-10-03T00:00:00Z","permalink":"https://twoooooda.net/post/apple%E5%85%AC%E5%BC%8F%E4%B8%8B%E5%8F%96%E3%82%8A%E3%82%B5%E3%83%BC%E3%83%93%E3%82%B9apple-trade-in%E5%88%A9%E7%94%A8%E3%83%AC%E3%83%93%E3%83%A5%E3%83%BC/","title":"Apple公式下取りサービス「Apple Trade In」利用レビュー"},{"content":"私は今まで2019年モデルのiPhone11 64GBを使っていたのですが、購入当初からデカいし重いなぁと思い続けていました。そこで、先日のAppleの製品発表会で発表されたiPhone 13 miniを買うことにしました。 13のminiにした理由 普段家にいるときは大抵の場合、デスクトップPCに向かって作業したり暇を潰しており、さらに巷を賑わしている流行り病のせいでその習慣には拍車がかかっていました。動画を見たりするのももちろんPCで見るので、iPhone11のような大きめのディスプレイを持つスマホは全く必要ありませんでした。しかも、昨年11月に発売されたiPad Air 4も所持しているので、スマホの存在理由といったら移動時間などの空き時間にSNSを確認したり、mobile Suicaやpaypayでの支払いくらいなので、これを機に思い切ってスマホを小型化させることにした次第です。 本題 個人的にApple製品は配送よりも、Apple Storeに直接受け取りに行く方が体験として好きです。なので今回もApple Store心斎橋に受け取りに行きました。受け取りは9/30に行きました。\n 心斎橋前の様子 \n受け取りの手順としては、事前決済の時に発行される注文番号あるいは専用QRコードをスタッフに見せるだけで、製品を受け取れました。事前のAppleからのメールには「公共機関が発行した写真付きの身分証明書」が必要と書いてありましたが、特に提出は求められませんでした(学生証とか保険証とか住民票とか用意したのに～)。 受け取れた～   \nちっちゃ軽い、iPhone 13 mini   先代のiPhone11と比べると、ACアダプターが入ってない分箱がすっごい薄い。容量は128GBで、(product)REDの赤いモデルを買いました。     美しい～。箱を開けたときのこの感動はApple製品の醍醐味でもあります。     個人的な推しポイントが色み。iPhone11よりも深いレッドになってます。     箱の内容物はめちゃくちゃ簡素。意味のあるものといえば本体、ケーブル、SIMピンくらいしか入ってません。しかもLightning to USB type-Cという世界一使いにくいケーブルなのでこれすら意味があるのか疑わしい。     私が持っているiPhone7, 11, 13 miniの比較です(左から順に11, 7, 13 mini)。筐体サイズは13 miniが最小ですが、ホームボタンが無い分画面サイズは7よりも大きくなっています(画像2枚目のディスプレイの色調が違うのは、環境光によって色みを調節するTrue Toneという機能が13 miniでONになっているからだと思われる。11は写真撮る前にファクトリーリセットしちゃった)。       丸1日くらい使ってみて やはり軽くて小さいのは正義です。先代よりも驚くほど手にしっくりきます。よくあんな重いiPhone11なんか使ってたなと思うほどです。調べてみると11→13 miniでは50gも軽くなっているらしい。\nもともとスマホでしていたことと言えばTwitterかYouTubeくらいなので、画面の小ささもそんなに不便を感じません。12 miniではかねてより言われていたバッテリー問題ですが、たしかに使っていると減っていっているという実感はあります。ですが今のところ極端にもたないという感じもないです。しかし、私はスマホで全くと言っていいほどゲームはやらないので、ゲームをある程度する人にとっては参考にならないかもしれません\u0026hellip;\n","date":"2021-10-01T00:00:00Z","image":"https://twoooooda.net/post/iphone-13-mini%E8%B2%B7%E3%81%A3%E3%81%9F%E3%82%88%E3%83%BC/IMG_3890_huf5c7757fa31de48e7d485b23d6b9e1f6_790172_120x120_fill_q75_box_smart1.JPEG","permalink":"https://twoooooda.net/post/iphone-13-mini%E8%B2%B7%E3%81%A3%E3%81%9F%E3%82%88%E3%83%BC/","title":"iPhone 13 mini買ったよー"},{"content":"はじめに 　家に余ってたラズパイをテレビの録画サーバーにしようと思い、部屋の奥から引っ張り出してきたのはいいですが、初期設定もsshの接続設定も何もしてなかったので勉強がてらやってみました、例の如くやらないといけないことが複数サイトに渡って散らばっていたので、備忘録として一通りまとめます。なお、ラズパイのOSはインストール済み, 有線LAN接続なのを前提とし、ラズパイからモニターにはなるべく出力せずに設定することを目指します。\nホストのPCからラズパイにssh接続する 　OSをインストールしたmicroSDカードをラズパイに挿す前に, microSDカードの直下にsshという空のファイル(拡張子も無し)を作っておきます。こうすることでラズパイのGUIを触らずにsshをオンにできます。 ※7/28追記OSが入ったSDカードを覗くと、bootとrootfsというパーティションにわかれている場合がありますが、sshを有効化するにはboot直下に置くのが正解らしいです。\n　ラズパイに接続して操作するホストのPCのターミナルから、以下のコマンドを叩くだけでssh接続できます(デフォルトユーザーにログインする場合)。 $ ssh pi@raspberrypi.local IPアドレスの固定 　インターネットに繋げるたびにIPアドレスが変わると困るので、まずはラズパイのIPアドレスを固定します。ラズパイのIPアドレス固定の前に、ホストのPCのターミナルで以下を実行します。\n$ ipconfig /all するとIPの構成が一覧で出てくるので、 デフォルトゲートウェイとDNSサーバーのIPアドレス(192.168.x.OOOみたいなやつ)をメモします。 　以降はssh接続を介してラズパイのコマンドを叩いていきます。まずはラズパイの設定ファイルを開いて編集します。\npi@raspberrypi:~$ sudo nano /etc/dhcpcd.conf nanoはviでもいいです(好み)。開いたら、末尾に以下を追加します。\ninterface eth0(無線LANの場合はここをwlan0にする) static ip_address=192.168.x.***/24 static routers=192.168.x.OOO static domain_name_servers=192.168.x.OOO staric ip_adress=にラズパイに割り当てたいIPアドレスを書きます。***の部分は1桁、2桁台は他の危機に割り当てられていることが多いので適当に100～200くらいにするといいらしいです。/24はサブネットマスク長です。 static routers=にデフォルトゲートウェイのIPアドレス、static domain_name_servers=にDNSサーバーのIPアドレスを書きます。編集できたら、保存してラズパイを再起動すれば変更が適用されているはずです。 参考記事 ユーザーの追加, 権限の付与 新しいユーザーの追加 　デフォルトユーザーである「pi」とは別のユーザーを作成し、権限をそちらに移行します。sshを介してラズパイのターミナルにて、\npi@raspberrypi:~$ sudo adduser |newuser| |newuser| に任意のユーザー名を指定して実行します。「New password:」と「Retype new password:」へ新規ユーザーのパスワードを指定します。その後くらいにいろいろ設定項目が出てきますが、特に必要がないなら全てEnterで進んでもいいです。 権限の付与 　「pi」ユーザーの権限を新しいユーザーに追加します。まずは「pi」ユーザーの権限を確認するために以下を実行します。\npi@raspberrypi:~$ groups pi すると「pi」ユーザーに付与されている権限が一覧で表示されるので、usermodコマンドで新しいユーザーに権限を移します。\npi@raspberrypi:~$ sudo usermod -G pi,adm,dialout,cdrom,sudo,audio,video,plugdev,games,users,input,netdev,spi,i2c,gpio newuser 「pi」ユーザーのホームフォルダのコピー 　「pi」ユーザーのホームフォルダの内容をnewuserのホームフォルダにコピーします。\npi@raspberrypi:~$ sudo cp -r /home/pi/* /home/newuser デフォルトユーザー(pi)の無効化 　ラズパイを起動する度に「pi」ユーザーに勝手にログインされると困るので、「pi」ユーザーへの自動ログインをオフにして、ついでに「pi」ユーザーを無効化します。\npi@raspberrypi:~$ sudo nano /etc/lightdm/lightdm.conf /lightdm/lightdm.confの126行目の先頭に#を入れてコメントアウトします(#autologin-user=pi)。 　次に、newuserでオートログインするようにします。autologin@.serviceを開いて、28行目の「\u0026ndash;autologin pi」を「\u0026ndash;autologin newuser」へ変更します。\npi@raspberrypi:~$ sudo vi /etc/systemd/system/autologin@.service 　最後に「pi」ユーザーを無効にします。ユーザーのアカウントの有効期限を過去の日付にすることで無効化できます。\npi@raspberrypi:~$ sudo usermod --expiredate 1 pi 以降は新しく作成したnewuserで作業します。参考記事 鍵ペアの生成と送信、設定 鍵の生成と送信 　公開鍵認証とは、パスワードの代わりに公開鍵(ホスト側のPC)と秘密鍵(ラズパイ)のペアで認証する方法です。まずはホストのPCに鍵ペアを生成するディレクトリ及び鍵ペアを作ります。\n$ mkdir ~/.ssh/raspberrypi $ ssh-keygen -t rsa Enter file in which to save the key (/Users/username/raspberrypi/.ssh/id_rsa): 必要に応じてこの後に聞かれるパスフレーズも入力します。自分は省略しました。これで秘密鍵のid_rsaと公開鍵のid_rsa.pubが生成されます。これらのうちid_rsa.pubをラズパイ側に送ります。\n$ scp ~/.ssh/raspberrypi/id_rsa.pub newuser@raspberrypi:~ 公開鍵の設定 　ラズパイにパスワード認証でログインし、鍵を管理する.sshを作ります。\nnewuser@raspberrypi:~$ sudo mkdir ~/.ssh 先ほど送信したid_rsa.pubをauthorized_keysと名前を変更しつつ.sshに移動します。\nnewuser@raspberrypi:~$ sudo mv ~/id_rsa.pub ~/.ssh/authorized_keys 次に.ssh、authorized_keysのパーミッションを変更します。\nnewuser@raspberrypi:~$ chmod 600 ~/.ssh/authorized_keys newuser@raspberrypi:~$ chmod 700 ~/.ssh 最後にssh_configを修正します。\nnewuser@raspberrypi:~$ sudo nano /etc/ssh/sshd_config 以下のような記載の行のコメントアウトを外して編集します。\nAuthorizedKeysFile .ssh/authorized_keys .ssh/authorized_keys2 この時にポート番号の変更や、パスワード認証のオフができます。しかし、公開鍵認証が上手くいってない状態でパスワード認証をオフにしてしまうと、次回からログインできなくなってしまうので慎重に行ってください。最悪OSのインストールし直しになります(私は既に何度かやらかしました)。 最後にラズパイを再起動すると、次回から以下のコマンドで公開鍵認証でログインできるはずです。\n$ ssh -i [秘密鍵ファイル] -p [ポート番号] pi@[Raspberry PiのIPアドレス] (例)ssh -i .ssh/id_rsa -p 22 pi@192.168.0.100 参考記事 ssh configの追加 　この方法で接続してもいいんですが、コマンドが長いので短縮します。 ~/.ssh/configを作り、以下を追記します。\nHost [任意のコマンド名] HostName [ラズパイのIPアドレス] User [ラズパイのユーザーネーム] Port [ラズパイのポート番号] IdentityFile [秘密鍵ファイル] 今回の例では以下のようになります。\nHost raspi HostName 192.168.1.100 User newuser Port 22 IdentityFile ~/.ssh/id_rsa こうすることでssh接続時のコマンドを以下のように大幅に短縮できます。\nssh raspi 参考記事 以上です。ファイル名や環境は各々によって違うのでそこは適宜変更をおねがいします。\n","date":"2021-06-03T00:00:00Z","image":"https://twoooooda.net/post/%E3%83%A9%E3%82%BA%E3%83%91%E3%82%A4%E3%81%AB%E5%85%AC%E9%96%8B%E9%8D%B5%E8%AA%8D%E8%A8%BC%E3%81%A7ssh%E6%8E%A5%E7%B6%9A%E3%81%99%E3%82%8B%E3%81%BE%E3%81%A7/raspi_hu3014bcf64fc94ed1ca971c6720f7e4d8_1117001_120x120_fill_q75_box_smart1.jpeg","permalink":"https://twoooooda.net/post/%E3%83%A9%E3%82%BA%E3%83%91%E3%82%A4%E3%81%AB%E5%85%AC%E9%96%8B%E9%8D%B5%E8%AA%8D%E8%A8%BC%E3%81%A7ssh%E6%8E%A5%E7%B6%9A%E3%81%99%E3%82%8B%E3%81%BE%E3%81%A7/","title":"ラズパイに公開鍵認証でssh接続するまで"},{"content":"HUGOの仕様 　静的サイトジェネレータ \u0026ldquo;HUGO\u0026rdquo; は、テーマの制作者がGitHubに上げているリポジトリをサブモジュールとして使うことで自分のサイトにテーマを導入します。ゆえに、テーマのレイアウトに関わるコードを直接書き換えることはできません(ローカルファイルは書き換えられますが)。 しかしHUGOの仕様として、/staticや/layouts以下のフォルダやファイルが優先して読み込まれるというものがあります。 ではどうするか 　当サイトのテーマを例にすると、/themes/hugo-theme-stack/layouts/partials/sidebar/right.htmlを書き換えたい場合、該当のファイルを/layouts/partials/にコピー＆ペーストすると、そちらの方が先に読み込まれるので結果的に編集して上書きが可能なわけです。 あとはAmazonのアフィリエイトリンクのHTMLコードを生成して、上記のright.htmlに書き込むとちゃんと表示されました。 ","date":"2021-04-13T00:00:00Z","image":"https://twoooooda.net/post/hugo%E3%81%A7%E4%BD%9C%E3%81%A3%E3%81%9F%E3%82%B5%E3%82%A4%E3%83%88%E3%81%AB%E3%82%A2%E3%83%9E%E3%82%BE%E3%83%B3%E3%81%AE%E3%82%A2%E3%83%95%E3%82%A3%E3%83%AA%E3%83%B3%E3%82%AF%E3%82%92%E8%B2%BC%E3%82%8B/hugo_huf7d3afa2f430d9e649302b30f29baa77_18815_120x120_fill_box_smart1_3.png","permalink":"https://twoooooda.net/post/hugo%E3%81%A7%E4%BD%9C%E3%81%A3%E3%81%9F%E3%82%B5%E3%82%A4%E3%83%88%E3%81%AB%E3%82%A2%E3%83%9E%E3%82%BE%E3%83%B3%E3%81%AE%E3%82%A2%E3%83%95%E3%82%A3%E3%83%AA%E3%83%B3%E3%82%AF%E3%82%92%E8%B2%BC%E3%82%8B/","title":"HUGOで作ったサイトにアマゾンのアフィリンクを貼る"},{"content":"はじめに 　少し前にOculus Quest2を購入し、しばらくハンドトラッキングで遊んでいたんですが、急に『手で蚊を潰すVRゲーム』を作りたくなったのでとりあえず蚊っぽい挙動をするナニカを作りました。 スクリプト 　やっていることはごく簡単で、数フレームに一回ランダムでRotationの値を変更し、Z方向に常に力を加え続けているだけです。\nusing UnityEngine; public class Move_mosquite : MonoBehaviour { Rigidbody rb; public float freq, speed, power; void Start() { rb = this.GetComponent\u0026lt;Rigidbody\u0026gt;(); } void Update() { rb.velocity = rb.velocity.normalized * speed; //変数speedで速度の設定 rb.AddForce(this.transform.forward * power * Time.deltaTime, ForceMode.Force); //Z方向(forward)に力を加え続ける if (Random.value \u0026lt; freq) //Rotationを変更する頻度を設定。毎フレームだと頻繁過ぎるので。 { transform.eulerAngles = new Vector3(Random.Range(0, 360), Random.Range(0, 360), Random.Range(0, 360)); } } } このままでは無限にどっかいってしまうので、適当にコライダーをつけるとか、壁に近づくと力を受けるとかにするといいかもしれません。なお、当方めちゃくちゃ初心者なのでもっと効率的なやり方や、もっとリアルになるやり方があるかもしれませんのであしからず\u0026hellip;.\n完成例   ","date":"2021-04-02T00:00:00Z","image":"https://twoooooda.net/post/mosquite-in-unity/ka_hu369738b2c9ff44a1da8d56d35405a246_309257_120x120_fill_box_smart1_3.png","permalink":"https://twoooooda.net/post/mosquite-in-unity/","title":"Unityで蚊っぽい動きをするやつを作る"},{"content":"はじめに 　自分は最近、当ブログを静的サイトジェネレータであるHUGOを用いて作成しました。HUGO自体はわかってしまえばごく簡単に導入、使用できるんですが、いかんせん自分がweb系、GitHubに関して無知であったためハマりポイントをことごとく踏み抜いていき、結局公開までかなり時間がかかってしまいました。なので覚えているうちに使い方や参考サイトをまとめようと思います。\n　ちなみにデプロイ方法等は我流でやっていますが、いろんな方法があるみたいなのであくまで一例としてお読み頂けたら光栄です。\n1.HUGOのインストール 　基本的には、HUGOの公式サイトにあるQuick Startに従ってHUGOをインストールしていきます。自分はWindows環境なので、Chocolateyというパッケージマネージャを使ってインストールしました。以降はコマンドプロンプト上で、$ choco install hugo -confirmを実行するとHUGOがインストールされるはずです。$ hugo versionでバージョンが確認できたらインストールされています。\n$ hugo version hugo v0.81.0-59D15C97 windows/amd64 ....  2.GitHubの準備 　自分のGitHubのページにて、[UserName].github.ioという名前でリポジトリを作ります。リポジトリ名をこうすることでGitHubさんがPages用のリポジトリだと勝手に判断してくれます。なのでリポジトリ名がページのURLhttps://\u0026lt;UserName\u0026gt;.github.ioになります。あとはこのリポジトリをクローンして取り敢えず環境は完成です。\n　一般的なのはソースコード用のリポジトリを別で作り、ビルド結果だけをPages用のリポジトリにあげる方法らしいのですが、自分はリポジトリが増えるのが嫌だったので、souceブランチをソースコード用、mainブランチをデプロイ用のブランチにしました。\n3.サイトのひな形を作る 　まずsourceブランチを作り、その下にHUGOのコマンドでファイルを作っていきます。$ hugo new site \u0026lt;フォルダ名\u0026gt;でHUGOを使う上で最小限のファイルとフォルダを作成できます。\n$ cd \u0026lt;UserName\u0026gt;.github.io $ git branch source $ git checkout source $ hugo new site blog  自分はsourceブランチ直下で作業したかったので、blogフォルダ内の内容をsourceブランチ直下に移動させました(blogフォルダは削除)。\n4.テーマを導入する 　HUGO公式のthemeページからテーマを選んで、自分のリポジトリにサブモジュールとして追加します。例としてこのブログのテーマ(Hugo Future Imperfect Slim)を用います。\n$ git submodule add https://github.com/pacollins/hugo-future-imperfect-slim.git themes/hugo-future-imperfect-slim  サブモジュール化ができたら、themes/hugo-future-imperfect-slim/exampleSite 内のファイルやフォルダをまるっとブランチ直下にコピーします。それと同時に、もともとあったconfig.tomlは消しておきます(configファイルが競合するため)。\n5. 試運転してみる 　$ hugo serverでローカルにサーバーをたてて、http://localhost:1313にアクセスするとサイトの内容を確認できます。ここまでが正しくなされているとテーマのDemoサイトと同じ状態になっているはずです。\nまた、$ hugoでサイトのデータをビルドできます(/publicが生成される)。 6.GitHub Actionsの設定 　GitHub Actionsとは、リポジトリにコミット等があった時にそれを検知して自動的にデプロイとかする機能(?)らしいです(今回の場合)。自分は雰囲気で使っているので詳しくは知りません。\nsourceブランチの下に、.github/workflows/main.ymlを作成します。Reonaさんのブログを参考にしてmain.ymlに記載のあるデプロイ先ブランチとかを編集しました。\n　ここまでやってきたことをまるっとsourceブランチにコミットすると、Actionsが働いてmainブランチにデプロイされ、ページが公開されるはずです。\n7. 設定を編集する 　config.tomlを見てみると、設定の項目がズラリとならんでいます。ここでサイトを自分用にするための設定をしていきます(サイトの名前、アイコン、URLなど)。\nここで、アイコンに設定したい画像等をconfig.tomlから指定するのですが、そういうのは基本 /staticに保存して、パスを指定するようです。追加のcssで見た目を変えたい時も、/themesの中には書かず、/layouts/partials内とかに書くようです(細かいところはテーマによって変わるのでテーマのDocumentを読んでね)。\n8.記事を追加する 　サイトの枠組みが完成したら、あとはサンプルの記事を削除して、自分の記事を追加していきます。$ hugo new \u0026lt;フォルダ名\u0026gt;/\u0026lt;ファイル名\u0026gt;で新しい記事を追加できます。基本的に記事は全てMarkdown形式で書きます。\n例) $ hugo new content/blog/article_2021-01-01.md  参考サイト  Hugo+Github Pagesで新しい個人ウェブサイトを作った Hugo + GitHub Pages + GitHub Actions で独自ドメインのウェブサイトを構築する GitHub Pages × Hugo で技術ブログを始めた  ","date":"2021-03-08T00:00:00Z","image":"https://twoooooda.net/post/%E9%9D%99%E7%9A%84%E3%82%B5%E3%82%A4%E3%83%88%E3%82%B8%E3%82%A7%E3%83%8D%E3%83%AC%E3%83%BC%E3%82%BFhugo%E3%81%A7%E5%80%8B%E4%BA%BA%E3%83%96%E3%83%AD%E3%82%B0%E3%82%92%E3%81%A4%E3%81%8F%E3%82%8Agithub-pages%E3%81%A7%E5%85%AC%E9%96%8B%E3%81%99%E3%82%8B/hugo_huf7d3afa2f430d9e649302b30f29baa77_18815_120x120_fill_box_smart1_3.png","permalink":"https://twoooooda.net/post/%E9%9D%99%E7%9A%84%E3%82%B5%E3%82%A4%E3%83%88%E3%82%B8%E3%82%A7%E3%83%8D%E3%83%AC%E3%83%BC%E3%82%BFhugo%E3%81%A7%E5%80%8B%E4%BA%BA%E3%83%96%E3%83%AD%E3%82%B0%E3%82%92%E3%81%A4%E3%81%8F%E3%82%8Agithub-pages%E3%81%A7%E5%85%AC%E9%96%8B%E3%81%99%E3%82%8B/","title":"静的サイトジェネレータ”HUGO”で個人ブログをつくり、GitHub Pagesで公開する"},{"content":"苦悩の末 　最近急にはてなブログやnoteとは違う個人ブログが欲しくなり、静的サイトジェネレーターであるHUGOと、勉強がてらGitHub Pages、Actionsを使ってブログを作ってみました。実はサイト作成にあたり数日間に渡り大変苦労したのですが、その話はHUGO等の使い方とともにまとめようと思います。\nではまた。\n","date":"2021-03-07T00:00:00Z","image":"https://twoooooda.net/post/hello-world/publicdomainq-0012425opp_hue0196f60387db8aea3d95157114df97e_86903_120x120_fill_q75_box_smart1.jpg","permalink":"https://twoooooda.net/post/hello-world/","title":"Hello, world！"}]