<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>diary on いっとりうむの足跡</title>
    <link>https://twoooooda.net/categories/diary/</link>
    <description>Recent content in diary on いっとりうむの足跡</description>
    <generator>Hugo</generator>
    <language>ja-jp</language>
    <lastBuildDate>Mon, 27 May 2024 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://twoooooda.net/categories/diary/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>USB TVチューナーPX-S1UDを使ってテレビを視聴する最速手順</title>
      <link>https://twoooooda.net/post/px-s1udandtvtest/</link>
      <pubDate>Mon, 27 May 2024 00:00:00 +0000</pubDate>
      <guid>https://twoooooda.net/post/px-s1udandtvtest/</guid>
      <description>基本的には 先駆者様のサイト をかいつまんだだけです。詳しい&amp;amp;正確な情報はそちらを参考にしてください。&#xA;用意するもの USB TVチューナー PX-S1UD V2.0&#xA;今買えるものはだいたいV2.0な気がします。 B-CASカード&#xA;私はぶっ壊れたnasneから奪ってきました。 USBカードリーダー&#xA;NTTのやつ（SCR3310V2.0）が多分一番有名で安定、この記事でもこのリーダーを使っている前提で進めます。 Windows PC&#xA;テレビ用同軸ケーブル ソフトウェアのダウンロード・インストール PX-S1UDのドライバはこちら&#xA;カードリーダー（SCR3310V2.0）のドライバはこちら&#xA;BonDriver-Siano&#xA;PX-S1UDでテレビを見るために別途導入が必要なドライバです。BonDriverは他にも種類がありますが、私の環境ではこれしか動きませんでした。後述。 TVTest&#xA;Windowsでテレビを見るためのソフトウェアです。これも私の環境では32bit版しか動きませんでした。ビルド済みのものはこちらにあります。 TVTestの準備 解凍・フォルダの移動 ビルド後のTVTestをダウンロードしてきたら、解凍して任意の場所に移動させます。この時、 C:\Users・C:\Program Files 以外のフォルダ に移動させないといけないそうです。&#xA;DirectShow フィルタのインストール Windows 10 では、日本のテレビ放送の映像コーデックである MPEG-2 をデコードして再生するのに必要な Microsoft DTV-DVD Video Decoder が標準ではインストールされていないそうなので、TVTest の作者さんが用意してくれているものでインストールします。詳しくは&#xA;TVTest フォルダ内にある [* filter-install.jse] を、管理者権限で実行してください。&#xA;BonDriverのセットアップ 環境や用途によってはBonDriverを複数種類使う可能性も考えられます。なのでTVTestの下に別途BonDriverというフォルダを作って、そこで一括管理する方法が推奨されています。 こんなには要らない TVTestのセットアップ 初期設定 最初に起動すると、設定のポップアップウィンドウが出てきます。この設定はあとで変えられるので適当でも大丈夫です。&#xA;BonDriver … 今後 BonDriver 検索フォルダを変更するため今は空のままにしておく（後述） H.264/AVCデコーダ … 自動 のままで OK H.265/HEVCデコーダ … 自動 のままで OK MPEG-2デコーダ … TVTest DTV Video Decoder に変更する 映像レンダラ … EVR に変更する 録画ファイルの保存フォルダ … TVTest で録画した番組の保存先フォルダをここで設定可能 BonDriverの参照 前述したBonDriverフォルダをTVTestから参照します。TVTestウィンドウ内の無を右クリックして設定を開きます。 すると、一般の中にBonDriver検索フォルダの項目があるので、先ほど作ったBonDriverフォルダを指定します。 相対パスでも良いらしい ここで一度TVTestを再起動しておきましょう。</description>
    </item>
    <item>
      <title>エムピウ ミッレフォッリエを買ったら良すぎた話</title>
      <link>https://twoooooda.net/post/millefoglie-is-so-good/</link>
      <pubDate>Mon, 22 May 2023 00:00:00 +0000</pubDate>
      <guid>https://twoooooda.net/post/millefoglie-is-so-good/</guid>
      <description>最近財布を新調しました 今まではずっと長財布を使っていたのですが、昨今のキャッシュレスの波で現金を使わなくなり、だんだんと「なんでこんなデカい財布を持ち歩いてるんだ」と思うようになりました。 先代の財布を使い始めて既に4年くらい経過していたので、この機に小さい財布に変えようと思って探していると行きついたのが m+（エムピウ） というブランドの millefoglie（ミッレフォッリエ） という財布でした。 エムピウ公式サイト&#xA;エムピウ ミッレフォッリエとは ミッレフォッリエの「ミッレ」とは「千」、「フォリエ」とは「葉」を意味し、財布を横から見ると葉っぱが重なっているように見えることから名づけられたようです。 外側はぐるっと一枚の牛革で覆われており、ファスナーなどではなく二つの真鍮製のギボシでとめる形式です。 中身の構造はかなり独特で、カードポケットの下側にコインボックス、その下に札やレシートを挟みこんでカードフラップで抑えるような形です。&#xA;コインボックスは大きく開き、小銭の確認がとてもしやすい構造です。カードポケットは三つあり、それぞれに5枚ずつ、合計15枚程度まで入るようです。カードフラップに交通系ICとかを入れるとそのままかざして改札を通れます。 二つのギボシでとまっています 開いたときのようす。青いカードが入っているのがカードフラップ 実際に会計するときは自然とこういう持ち方になります 買ったモデル 私が買ったのは牛革の中でもプエブロレザーというレザーを使った millefoglie P25 PU.grigio です。 プエブロレザーとは牛革に敢えてやすりで傷をつける加工を施したレザーで、特に経年変化が早い上に変化の度合いが激しいことが特徴です。 この動画を見て頂くといかに変化が激しいかがわかると思います。&#xA;なお、このミッレフォッリエは全国的に品薄で、新品はほとんど市場に出回っていないというお話でした（2023年5月現在）。私が買ったものは僅かな不良で新品として市場に出なかったアウトレット品らしく、その在庫があったのも幸運だったようです。ちなみにアウトレットになった理由は聞きそびれたので、どこが不良なのかは今でもわかっていません。 販売サイト&#xA;ミッレフォッリエの良いところ 一番はやはり コンパクトである ということです。少し厚みはありますが、サイズ感はほとんどパスケースと大差なく、このサイズにかなりの量の現金とカード類を一緒に収納できる収納力も魅力です。&#xA;あとは、何といっても 質感 ！！丁寧に鞣された牛革を撫でるだけでもテンションが上がります。また、革の経年変化も楽しみのうちです。使っていくうちに革に光沢と傷が入り色も深みを増し、自分だけの財布に育てていく感じが、私は大好きです。&#xA;ミッレフォッリエのイマイチなところ コンパクト財布なので、外出先で不意に小銭が増えてしまうと、露骨に膨らんでしまうところは少し残念です。20枚以上とかになってしまうと閉まりきらないこともあるようです。また、一般的な長財布と違いカードポケットのカードを上から覗くことになるので、一覧性は落ちてしまいます。この点に関しては、三つのカードポケットに入れるカードを固定することで対応しています。 小銭10枚、カード10枚、札5枚程度入れた場合だいたい3cmくらい カードポケットは意外と深く、いざという時にたまにモタモタする（ボタンの金具でカードが傷つかないために、ダークソウルシリーズの「ダークリング」のシールを貼っている） まとめ ミッレフォッリエマジでいい いろいろ書いてきましたが、総合するとめちゃくちゃ良いです。質感が良いので特に意味もなく開けたり閉めたりしてしまうくらいです。財布として割と独特な見た目、形状をしているので、人とはちょっと変わった財布を持ちたい人、カードも現金も使う機会がある程度多い人などは特にオススメです。</description>
    </item>
    <item>
      <title>atcoder-cliを導入してみた</title>
      <link>https://twoooooda.net/post/introduce-atcoder-cli/</link>
      <pubDate>Fri, 20 May 2022 00:00:00 +0000</pubDate>
      <guid>https://twoooooda.net/post/introduce-atcoder-cli/</guid>
      <description>いきさつ ここ最近、諸事情あって競技プログラミングで有名なAtCoderに参戦したのですが、AtCoderのwebページでポチポチコーディングするのも、別のエディタで書いてコピペするのもなんだかなぁという感じだったので、友人が使っていたatcoder-cliというものを導入して使ってみることにしました。なお、この記事は以下の参考文献から大いに引用しています。&#xA;参考文献&#xA;AtCoder 環境構築 for Python コマンドラインツールatcoder-cliを公開しました（作成者様のサイト） atcoder-cli チュートリアル（作成者様謹製のチュートリアル） atcoder-cliとは？ atcoder-cliとは、コンソールから短いコマンドを打つだけで問題の提出のみならず、使用する各言語に合わせたテンプレートの自動展開、作業フォルダ、ファイルの整理、テストケースの自動ダウンロード、検証などを簡単に行えるツールです。この記事では、基本的にPythonでAtCoderに参戦することを前提に進めていきます。&#xA;導入方法 基本的にはさっきのチュートリアルに従ってatcoder-cliと、セットでほぼ使うであろう online-judge-toolsも一緒にインストールします。ちなみに、atcoder-cliはJavaScriptのパッケージマネージャであるnpmでインストールするので、npmが入っていない方はそちらを先にやってしまいましょう。&#xA;Node.js・npmのインストール&#xA;環境 Python（Anaconda） 3.8.8 pip 22.0.4 npm 6.14.6 インストール online-judge-toolsとatcoder-cliのインストールには、以下のコマンドを実行します。&#xA;&amp;gt; pip install online-judge-tools &amp;gt; npm install -g atcoder-cli そして、以下のコマンドが使用できればインストールされています。&#xA;&amp;gt; acc -h ログイン atcoder-cliとonline-judge-toolsの両方ログインする必要があります。以下のコマンドを叩いた後にAtCoderのユーザー名とパスワードを入力します。まずはonline-judge-toolsの方から。&#xA;&amp;gt; oj login https://atcoder.jp/ 次にatcoder-cliの方にログイン。&#xA;&amp;gt; acc login ここで、Linux等のCUIに普段から触れていると慣れているかもしれませんが、パスワードを入れる時に一見して入力できていないように見えるかもしれません。が、見えないようになっているだけで入力できています、大丈夫です。&#xA;Configファイルの編集 問題を解くときに、毎回main.pyの作成や問題用ディレクトリを作るのは面倒なので、自動化します。そのためにConfig.jsonを編集します。まずはConfigの場所の確認から。&#xA;&amp;gt; acc config-dir C:\Users\&amp;lt;username&amp;gt;\AppData\Roaming\atcoder-cli-nodejs\Config 環境によってファイルの場所はまちまちになるかと思います。ファイルを開いて、以下みたいな感じに&amp;quot;default-test-dirname-format&amp;quot;と&amp;quot;default-template&amp;quot;:&amp;quot;python&amp;quot;を変更します。&#xA;{ &amp;#34;oj-path&amp;#34;: &amp;#34;C:\\ProgramData\\Anaconda3\\Scripts\\oj.exe&amp;#34;, &amp;#34;default-contest-dirname-format&amp;#34;: &amp;#34;{ContestID}&amp;#34;, &amp;#34;default-task-dirname-format&amp;#34;: &amp;#34;{tasklabel}&amp;#34;, &amp;#34;default-test-dirname-format&amp;#34;: &amp;#34;test&amp;#34;, &amp;#34;default-task-choice&amp;#34;: &amp;#34;inquire&amp;#34;, &amp;#34;default-template&amp;#34;: &amp;#34;python&amp;#34; } 次に、上のConfig.</description>
    </item>
    <item>
      <title>AutoHotKeyを導入してみた</title>
      <link>https://twoooooda.net/post/introduce-autohotkey/</link>
      <pubDate>Tue, 04 Jan 2022 00:00:00 +0000</pubDate>
      <guid>https://twoooooda.net/post/introduce-autohotkey/</guid>
      <description>導入を考えたきっかけ 以前の記事でも述べた通り、自作キーボードに対応しているファームウェアがマジのゴミで、キー割り当てを変えられなかったので、いろいろ調べているうちにAutoHotKeyというものを見つけました。&#xA;AutoHotKeyとは？ 独自のプログラミング言語を用いて、キーボードのキー操作によるかなり柔軟なショートカットの作成や、普段あまり使わないキーを全く別のキーとして割り当てたり、メディアコントロールやPCのシステム操作を割り当てたりできます。参考&#xA;導入方法 基本的にこのサイトに従ってインストールして、拡張子を.ahkとしたテキストファイルを作り、そこに任意のショートカットやキーの割り当てを記述していきます。記法や文法、決まりごとは日本語のリファレンス(?)があるので、そちらを参照してください。&#xA;このAutoHotKeyを使う場合、拡張子が.ahkのファイル、あるいは.ahkのファイルから作成した.exeの実行ファイルを起動し、タスクトレイで常駐させておかなければなりません。なので、PC起動時に自動で該当のファイルが起動するようにしておくと便利です。私はこちらのサイトを参考に設定しました。&#xA;実際に使う 私がこのAutoHotKeyでやりたかったのは、&amp;quot;キーボード右上のPageUp、PageDownのキーをメディアの再生一時停止、次の曲ボタンへ割り当て&amp;quot; です。実際のコードはごく簡単なもので、以下のように書いたら思った通りに動いてくれました。&#xA;#InstallKeybdHook #UseHook PgUp::Media_Play_Pause PgDn::Media_Next return また、便利だと聞いたのでこちらのサイトを参考に、左右Altの空打ちで日本語入力と英字入力を切り変えられるようにしました。私は起動しないといけない実行ファイルが増えると嫌なので、実際に使うときはPageUp/Downキーをメディアコントロールに割り当てるコードと、alt-ime-ahk.ahkの内容を一つのファイルに統合しています(ファイル名をgeneral.ahkとしています)。&#xA;導入してみて 導入してしばらく使ってみましたが、とてもとても便利です。 タスクトレイに入るアイコンが一つ増えるのが最初は少し抵抗がありましたが。それを補って余りある恩恵を受けています。今後新しくショートカットが欲しくなったり、割り当てを変えたい時が来れば今使っているgeneral.ahkファイルに追記すればいいだけなので、使い方を多少覚えていればこれからもっと気軽に便利にしていくことができると思います。</description>
    </item>
    <item>
      <title>Hello, world！</title>
      <link>https://twoooooda.net/post/hello-world/</link>
      <pubDate>Sun, 07 Mar 2021 00:00:00 +0000</pubDate>
      <guid>https://twoooooda.net/post/hello-world/</guid>
      <description>苦悩の末 最近急にはてなブログやnoteとは違う個人ブログが欲しくなり、静的サイトジェネレーターであるHUGOと、勉強がてらGitHub Pages、Actionsを使ってブログを作ってみました。実はサイト作成にあたり数日間に渡り大変苦労したのですが、その話はHUGO等の使い方とともにまとめようと思います。&#xA;ではまた。</description>
    </item>
  </channel>
</rss>
