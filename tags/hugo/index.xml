<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>HUGO on twoooooda.net</title>
        <link>https://twoooooda.net/tags/hugo/</link>
        <description>Recent content in HUGO on twoooooda.net</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>ja-jp</language>
        <lastBuildDate>Sun, 01 Dec 2024 00:00:00 +0000</lastBuildDate><atom:link href="https://twoooooda.net/tags/hugo/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>Hugoで非推奨のプロパティとかを使ってエラーが出たとき</title>
        <link>https://twoooooda.net/post/hugo-komattara/</link>
        <pubDate>Sun, 01 Dec 2024 00:00:00 +0000</pubDate>
        
        <guid>https://twoooooda.net/post/hugo-komattara/</guid>
        <description>&lt;img src="https://twoooooda.net/post/hugo-komattara/hugo.png" alt="Featured image of post Hugoで非推奨のプロパティとかを使ってエラーが出たとき" /&gt;&lt;p&gt;この記事は、&lt;a class=&#34;link&#34; href=&#34;https://adventar.org/calendars/10291&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;某企業アドベントカレンダー2024&lt;/a&gt;の六日目の記事です。&lt;/p&gt;
&lt;h2 id=&#34;経緯&#34;&gt;経緯
&lt;/h2&gt;&lt;p&gt;最近久々に記事を書こうとしてHugoを使ったら、以下のようなエラーメッセージが出てうまくビルドができませんでした。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ hugo
WARN  deprecated: resources.ToCSS was deprecated in Hugo v0.128.0 and will be removed in a future release. Use css.Sass instead.
ERROR deprecated: .Site.LastChange was deprecated in Hugo v0.123.0 and will be removed in Hugo 0.140.0. Use .Site.Lastmod instead.
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;要するに、現行のHugoのバージョンでは非推奨、あるいは利用不可なプロパティを使っているせいで怒られています。&lt;/p&gt;
&lt;h2 id=&#34;原因&#34;&gt;原因
&lt;/h2&gt;&lt;p&gt;私の場合は、&lt;a class=&#34;link&#34; href=&#34;https://github.com/CaiJimmy/hugo-theme-stack&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;ブログのテンプレート&lt;/a&gt;をgitのsubmoduleの形で使っていて、ある程度はテンプレートのリポジトリに依存してしまいます。submoduleの仕様として、submoduleの関係を設定したタイミングのリポジトリの状態を保持してしまうみたいです。このブログを作ったのがもう3年前なので、テンプレートの中身が3年前のバージョンで止まっていたのが原因でした。&lt;/p&gt;
&lt;h2 id=&#34;解決&#34;&gt;解決
&lt;/h2&gt;&lt;p&gt;解決策としては、以下のコマンドでsubmoduleに設定しているリポジトリを最新の状態にすれば解決できました。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ git submodule update --remote
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;内容としてはこれだけなのですが、備忘録として残します。&lt;/p&gt;
&lt;h2 id=&#34;補足&#34;&gt;補足
&lt;/h2&gt;&lt;p&gt;PCを新調したなどで、新しく&lt;code&gt;git clone&lt;/code&gt;したい場合、以下のコマンドでsubmoduleの情報、submoduleとの関係などを引き継いでcloneできます。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;git clone --recursive https://github.com/twoooooda/[リポジトリ.git]
&lt;/code&gt;&lt;/pre&gt;</description>
        </item>
        <item>
        <title>HUGOで作ったサイトにアマゾンのアフィリンクを貼る</title>
        <link>https://twoooooda.net/post/hugo%E3%81%A7%E4%BD%9C%E3%81%A3%E3%81%9F%E3%82%B5%E3%82%A4%E3%83%88%E3%81%AB%E3%82%A2%E3%83%9E%E3%82%BE%E3%83%B3%E3%81%AE%E3%82%A2%E3%83%95%E3%82%A3%E3%83%AA%E3%83%B3%E3%82%AF%E3%82%92%E8%B2%BC%E3%82%8B/</link>
        <pubDate>Tue, 13 Apr 2021 00:00:00 +0000</pubDate>
        
        <guid>https://twoooooda.net/post/hugo%E3%81%A7%E4%BD%9C%E3%81%A3%E3%81%9F%E3%82%B5%E3%82%A4%E3%83%88%E3%81%AB%E3%82%A2%E3%83%9E%E3%82%BE%E3%83%B3%E3%81%AE%E3%82%A2%E3%83%95%E3%82%A3%E3%83%AA%E3%83%B3%E3%82%AF%E3%82%92%E8%B2%BC%E3%82%8B/</guid>
        <description>&lt;img src="https://twoooooda.net/post/hugo%E3%81%A7%E4%BD%9C%E3%81%A3%E3%81%9F%E3%82%B5%E3%82%A4%E3%83%88%E3%81%AB%E3%82%A2%E3%83%9E%E3%82%BE%E3%83%B3%E3%81%AE%E3%82%A2%E3%83%95%E3%82%A3%E3%83%AA%E3%83%B3%E3%82%AF%E3%82%92%E8%B2%BC%E3%82%8B/hugo.png" alt="Featured image of post HUGOで作ったサイトにアマゾンのアフィリンクを貼る" /&gt;&lt;h1 id=&#34;hugoの仕様&#34;&gt;HUGOの仕様
&lt;/h1&gt;&lt;p&gt;　静的サイトジェネレータ &amp;ldquo;HUGO&amp;rdquo; は、テーマの制作者がGitHubに上げているリポジトリをサブモジュールとして使うことで自分のサイトにテーマを導入します。ゆえに、テーマのレイアウトに関わるコードを直接書き換えることはできません(ローカルファイルは書き換えられますが)。
&lt;!-- raw HTML omitted --&gt;
　しかしHUGOの仕様として、&lt;code&gt;/static&lt;/code&gt;や&lt;code&gt;/layouts&lt;/code&gt;以下のフォルダやファイルが優先して読み込まれるというものがあります。
&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;h1 id=&#34;ではどうするか&#34;&gt;ではどうするか
&lt;/h1&gt;&lt;p&gt;　&lt;a class=&#34;link&#34; href=&#34;https://themes.gohugo.io/themes/hugo-theme-stack/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;当サイトのテーマ&lt;/a&gt;を例にすると、&lt;code&gt;/themes/hugo-theme-stack/layouts/partials/sidebar/right.html&lt;/code&gt;を書き換えたい場合、該当のファイルを&lt;code&gt;/layouts/partials/&lt;/code&gt;にコピー＆ペーストすると、そちらの方が先に読み込まれるので結果的に編集して上書きが可能なわけです。
&lt;!-- raw HTML omitted --&gt;
　あとはAmazonのアフィリエイトリンクのHTMLコードを生成して、上記のright.htmlに書き込むとちゃんと表示されました。
&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
</description>
        </item>
        <item>
        <title>静的サイトジェネレータ”HUGO”で個人ブログをつくり、GitHub Pagesで公開する</title>
        <link>https://twoooooda.net/post/%E9%9D%99%E7%9A%84%E3%82%B5%E3%82%A4%E3%83%88%E3%82%B8%E3%82%A7%E3%83%8D%E3%83%AC%E3%83%BC%E3%82%BFhugo%E3%81%A7%E5%80%8B%E4%BA%BA%E3%83%96%E3%83%AD%E3%82%B0%E3%82%92%E3%81%A4%E3%81%8F%E3%82%8Agithub-pages%E3%81%A7%E5%85%AC%E9%96%8B%E3%81%99%E3%82%8B/</link>
        <pubDate>Mon, 08 Mar 2021 00:00:00 +0000</pubDate>
        
        <guid>https://twoooooda.net/post/%E9%9D%99%E7%9A%84%E3%82%B5%E3%82%A4%E3%83%88%E3%82%B8%E3%82%A7%E3%83%8D%E3%83%AC%E3%83%BC%E3%82%BFhugo%E3%81%A7%E5%80%8B%E4%BA%BA%E3%83%96%E3%83%AD%E3%82%B0%E3%82%92%E3%81%A4%E3%81%8F%E3%82%8Agithub-pages%E3%81%A7%E5%85%AC%E9%96%8B%E3%81%99%E3%82%8B/</guid>
        <description>&lt;img src="https://twoooooda.net/post/%E9%9D%99%E7%9A%84%E3%82%B5%E3%82%A4%E3%83%88%E3%82%B8%E3%82%A7%E3%83%8D%E3%83%AC%E3%83%BC%E3%82%BFhugo%E3%81%A7%E5%80%8B%E4%BA%BA%E3%83%96%E3%83%AD%E3%82%B0%E3%82%92%E3%81%A4%E3%81%8F%E3%82%8Agithub-pages%E3%81%A7%E5%85%AC%E9%96%8B%E3%81%99%E3%82%8B/hugo.png" alt="Featured image of post 静的サイトジェネレータ”HUGO”で個人ブログをつくり、GitHub Pagesで公開する" /&gt;&lt;h2 id=&#34;はじめに&#34;&gt;はじめに
&lt;/h2&gt;&lt;p&gt;　自分は最近、当ブログを静的サイトジェネレータであるHUGOを用いて作成しました。HUGO自体はわかってしまえばごく簡単に導入、使用できるんですが、いかんせん自分がweb系、GitHubに関して無知であったためハマりポイントをことごとく踏み抜いていき、結局公開までかなり時間がかかってしまいました。なので覚えているうちに使い方や参考サイトをまとめようと思います。&lt;/p&gt;
&lt;p&gt;　ちなみにデプロイ方法等は我流でやっていますが、いろんな方法があるみたいなのであくまで一例としてお読み頂けたら光栄です。&lt;br&gt;
&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;h2 id=&#34;1hugoのインストール&#34;&gt;1.HUGOのインストール
&lt;/h2&gt;&lt;p&gt;　基本的には、HUGOの公式サイトにある&lt;a class=&#34;link&#34; href=&#34;https://gohugo.io/getting-started/quick-start/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Quick Start&lt;/a&gt;に従ってHUGOをインストールしていきます。自分はWindows環境なので、&lt;a class=&#34;link&#34; href=&#34;https://chocolatey.org/install&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Chocolatey&lt;/a&gt;というパッケージマネージャを使ってインストールしました。以降はコマンドプロンプト上で、&lt;code&gt;$ choco install hugo -confirm&lt;/code&gt;を実行するとHUGOがインストールされるはずです。&lt;code&gt;$ hugo version&lt;/code&gt;でバージョンが確認できたらインストールされています。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ hugo version
hugo v0.81.0-59D15C97 windows/amd64 ....  
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;h2 id=&#34;2githubの準備&#34;&gt;2.GitHubの準備
&lt;/h2&gt;&lt;p&gt;　自分のGitHubのページにて、[UserName].github.ioという名前でリポジトリを作ります。リポジトリ名をこうすることでGitHubさんがPages用のリポジトリだと勝手に判断してくれます。なのでリポジトリ名がページのURL&lt;code&gt;https://&amp;lt;UserName&amp;gt;.github.io&lt;/code&gt;になります。あとはこのリポジトリをクローンして取り敢えず環境は完成です。&lt;/p&gt;
&lt;p&gt;　一般的なのはソースコード用のリポジトリを別で作り、ビルド結果だけをPages用のリポジトリにあげる方法らしいのですが、自分はリポジトリが増えるのが嫌だったので、souceブランチをソースコード用、mainブランチをデプロイ用のブランチにしました。&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;h2 id=&#34;3サイトのひな形を作る&#34;&gt;3.サイトのひな形を作る
&lt;/h2&gt;&lt;p&gt;　まずsourceブランチを作り、その下にHUGOのコマンドでファイルを作っていきます。&lt;code&gt;$ hugo new site &amp;lt;フォルダ名&amp;gt;&lt;/code&gt;でHUGOを使う上で最小限のファイルとフォルダを作成できます。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ cd &amp;lt;UserName&amp;gt;.github.io
$ git branch source
$ git checkout source
$ hugo new site blog
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;自分はsourceブランチ直下で作業したかったので、blogフォルダ内の内容をsourceブランチ直下に移動させました(blogフォルダは削除)。&lt;br&gt;
&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;h2 id=&#34;4テーマを導入する&#34;&gt;4.テーマを導入する
&lt;/h2&gt;&lt;p&gt;　&lt;a class=&#34;link&#34; href=&#34;https://themes.gohugo.io/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;HUGO公式のthemeページ&lt;/a&gt;からテーマを選んで、自分のリポジトリに&lt;a class=&#34;link&#34; href=&#34;https://qiita.com/sotarok/items/0d525e568a6088f6f6bb&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;サブモジュール&lt;/a&gt;として追加します。例としてこのブログのテーマ(&lt;a class=&#34;link&#34; href=&#34;https://themes.gohugo.io/hugo-future-imperfect-slim/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Hugo Future Imperfect Slim&lt;/a&gt;)を用います。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ git submodule add https://github.com/pacollins/hugo-future-imperfect-slim.git themes/hugo-future-imperfect-slim
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;サブモジュール化ができたら、themes/hugo-future-imperfect-slim/&lt;strong&gt;exampleSite&lt;/strong&gt; 内のファイルやフォルダをまるっとブランチ直下にコピーします。それと同時に、もともとあったconfig.tomlは消しておきます(configファイルが競合するため)。&lt;br&gt;
&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;h2 id=&#34;5-試運転してみる&#34;&gt;5. 試運転してみる
&lt;/h2&gt;&lt;p&gt;　&lt;code&gt;$ hugo server&lt;/code&gt;でローカルにサーバーをたてて、&lt;a class=&#34;link&#34; href=&#34;http://localhost:1313/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;http://localhost:1313&lt;/a&gt;にアクセスするとサイトの内容を確認できます。ここまでが正しくなされているとテーマのDemoサイトと同じ状態になっているはずです。&lt;br&gt;
　また、&lt;code&gt;$ hugo&lt;/code&gt;でサイトのデータをビルドできます(/publicが生成される)。
&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;h2 id=&#34;6github-actionsの設定&#34;&gt;6.GitHub Actionsの設定
&lt;/h2&gt;&lt;p&gt;　&lt;strong&gt;GitHub Actions&lt;/strong&gt;とは、リポジトリにコミット等があった時にそれを検知して自動的にデプロイとかする機能(?)らしいです(今回の場合)。自分は雰囲気で使っているので詳しくは知りません。&lt;br&gt;
　sourceブランチの下に、.github/workflows/&lt;strong&gt;main.yml&lt;/strong&gt;を作成します。&lt;a class=&#34;link&#34; href=&#34;https://reona.dev/posts/20200331&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Reonaさんのブログ&lt;/a&gt;を参考にしてmain.ymlに記載のあるデプロイ先ブランチとかを編集しました。&lt;/p&gt;
&lt;p&gt;　ここまでやってきたことをまるっとsourceブランチにコミットすると、Actionsが働いてmainブランチにデプロイされ、ページが公開されるはずです。&lt;br&gt;
&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;h2 id=&#34;7-設定を編集する&#34;&gt;7. 設定を編集する
&lt;/h2&gt;&lt;p&gt;　config.tomlを見てみると、設定の項目がズラリとならんでいます。ここでサイトを自分用にするための設定をしていきます(サイトの名前、アイコン、URLなど)。&lt;br&gt;
　ここで、アイコンに設定したい画像等をconfig.tomlから指定するのですが、そういうのは基本 &lt;strong&gt;/static&lt;/strong&gt;に保存して、パスを指定するようです。追加のcssで見た目を変えたい時も、/themesの中には書かず、/layouts/partials内とかに書くようです(細かいところはテーマによって変わるのでテーマのDocumentを読んでね)。&lt;br&gt;
&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;h2 id=&#34;8記事を追加する&#34;&gt;8.記事を追加する
&lt;/h2&gt;&lt;p&gt;　サイトの枠組みが完成したら、あとはサンプルの記事を削除して、自分の記事を追加していきます。&lt;code&gt;$ hugo new &amp;lt;フォルダ名&amp;gt;/&amp;lt;ファイル名&amp;gt;&lt;/code&gt;で新しい記事を追加できます。基本的に記事は全てMarkdown形式で書きます。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;例) $ hugo new content/blog/article_2021-01-01.md  
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;h1 id=&#34;参考サイト&#34;&gt;参考サイト
&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://dev.to/mshr_h/hugo-github-pages-35me&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Hugo+Github Pagesで新しい個人ウェブサイトを作った&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://zenn.dev/nikaera/articles/hugo-github-actions-for-github-pages&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Hugo + GitHub Pages + GitHub Actions で独自ドメインのウェブサイトを構築する&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://reona.dev/posts/20200331&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;GitHub Pages × Hugo で技術ブログを始めた&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>Hello, world！</title>
        <link>https://twoooooda.net/post/hello-world/</link>
        <pubDate>Sun, 07 Mar 2021 00:00:00 +0000</pubDate>
        
        <guid>https://twoooooda.net/post/hello-world/</guid>
        <description>&lt;img src="https://twoooooda.net/post/hello-world/publicdomainq-0012425opp.jpg" alt="Featured image of post Hello, world！" /&gt;&lt;h2 id=&#34;苦悩の末&#34;&gt;苦悩の末
&lt;/h2&gt;&lt;p&gt;　最近急にはてなブログやnoteとは違う個人ブログが欲しくなり、静的サイトジェネレーターであるHUGOと、勉強がてらGitHub Pages、Actionsを使ってブログを作ってみました。実はサイト作成にあたり数日間に渡り大変苦労したのですが、その話はHUGO等の使い方とともにまとめようと思います。&lt;/p&gt;
&lt;p&gt;ではまた。&lt;/p&gt;
</description>
        </item>
        
    </channel>
</rss>
