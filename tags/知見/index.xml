<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>知見 on twoooooda.net</title>
        <link>https://twoooooda.net/tags/%E7%9F%A5%E8%A6%8B/</link>
        <description>Recent content in 知見 on twoooooda.net</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>ja-jp</language>
        <lastBuildDate>Fri, 20 Dec 2024 00:00:00 +0000</lastBuildDate><atom:link href="https://twoooooda.net/tags/%E7%9F%A5%E8%A6%8B/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>自作VRゲーム「VRブロック崩し」で工夫したことすべて</title>
        <link>https://twoooooda.net/post/vr-block-break/</link>
        <pubDate>Fri, 20 Dec 2024 00:00:00 +0000</pubDate>
        
        <guid>https://twoooooda.net/post/vr-block-break/</guid>
        <description>&lt;img src="https://twoooooda.net/post/vr-block-break/110459.jpg" alt="Featured image of post 自作VRゲーム「VRブロック崩し」で工夫したことすべて" /&gt;&lt;h2 id=&#34;この記事は&#34;&gt;この記事は？
&lt;/h2&gt;&lt;p&gt;　この記事は、&lt;a class=&#34;link&#34; href=&#34;https://adventar.org/calendars/10291&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;某企業アドベントカレンダー2024&lt;/a&gt;&lt;strong&gt;最終日&lt;/strong&gt;の記事です。参加してくださった同期のみなさん、ありがとうございました。
今回は拙作のVRゲーム「VRブロック崩し」を制作するにあたって考えていたこと、狙い、工夫点などを語っていこうと思います。&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;vrブロック崩しとは&#34;&gt;VRブロック崩しとは
&lt;/h2&gt;&lt;p&gt;　そもそもVRブロック崩しとは、私が所属する大学にて、2023年冬に開催された大学祭用に制作したVRゲームです。
プレイヤーはVR空間内の狭いスペースの中で、テニスの壁打ちをするようにボールとラケットでブロック崩しをするというものです（後述）。
ステージとしてはスタート前のロビー的なエリア、1stステージ、2ndステージ、結果発表エリアから構成されています。
大学祭当日はホワイトボードにその日のベストスコアを記録して競ってもらったり、一定以上のスコアを取った人には特典で
うまい棒をあげるなどして、かなり盛り上がっていただけました。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://twoooooda.net/post/vr-block-break/IMG_5488.JPG&#34;
	width=&#34;1024&#34;
	height=&#34;768&#34;
	srcset=&#34;https://twoooooda.net/post/vr-block-break/IMG_5488_hu1432614994983403543.JPG 480w, https://twoooooda.net/post/vr-block-break/IMG_5488_hu13758573162921857279.JPG 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;当日のようす。かなり盛り上がった&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;133&#34;
		data-flex-basis=&#34;320px&#34;
	
&gt;
&lt;img src=&#34;https://twoooooda.net/post/vr-block-break/IMG_5482.JPEG&#34;
	width=&#34;2048&#34;
	height=&#34;1536&#34;
	srcset=&#34;https://twoooooda.net/post/vr-block-break/IMG_5482_hu12694170522580697984.JPEG 480w, https://twoooooda.net/post/vr-block-break/IMG_5482_hu11788945567805692775.JPEG 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;視界ミラーリング用のモニターを置いていました&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;133&#34;
		data-flex-basis=&#34;320px&#34;
	
&gt;
&lt;img src=&#34;https://twoooooda.net/post/vr-block-break/IMG_5486.JPEG&#34;
	width=&#34;2048&#34;
	height=&#34;1536&#34;
	srcset=&#34;https://twoooooda.net/post/vr-block-break/IMG_5486_hu17680990373210508181.JPEG 480w, https://twoooooda.net/post/vr-block-break/IMG_5486_hu5866093078862035072.JPEG 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;ハイスコアホワイトボード&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;133&#34;
		data-flex-basis=&#34;320px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;実際に制作したゲームが↓になります。&lt;/p&gt;
&lt;div class=&#34;video-wrapper&#34;&gt;
    &lt;iframe loading=&#34;lazy&#34; 
            src=&#34;https://www.youtube.com/embed/dHjRGvSQmwY&#34; 
            allowfullscreen 
            title=&#34;YouTube Video&#34;
    &gt;
    &lt;/iframe&gt;
&lt;/div&gt;

&lt;h2 id=&#34;開発経緯とコンセプト&#34;&gt;開発経緯とコンセプト
&lt;/h2&gt;&lt;p&gt;　そもそもなぜこのゲームがこの形に落ち着いたのかを話すには、2018年の同じく大学祭に遡ります。2018年の
大学祭にて初めてVR機器をレンタルしてBeat Saberを体験展示したところ大変好評で、展示する側も楽しかったので、
次回はゲームを自分で作って展示したいという欲がわいてきました。&lt;/p&gt;
&lt;p&gt;　VRゲームを作るにあたってまず最初に気を付けて、最後まで大事にした点が以下のようなものです。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;体験者が絶対に&lt;strong&gt;酔わない&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;少しでも酔うと満足度が大きく損なわれるから&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;必要最低限の操作説明&lt;/strong&gt;でプレイできる&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;端から見ている人&lt;/strong&gt;も楽しめる
&lt;ul&gt;
&lt;li&gt;傍観者が楽しめないというVRの弱点をなんとかしたかった&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;体を動かしてプレイする
&lt;ul&gt;
&lt;li&gt;体を動かさないならVRである意味がないと思ったので&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;現実ではできないような体験&lt;/strong&gt;ができる
&lt;ul&gt;
&lt;li&gt;せっかくの&lt;em&gt;Virtual Reality&lt;/em&gt;なので&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;以上の大事にしたいポイントを踏まえたうえで、VRゲームのコンセプトを決めていきました。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;酔わないようできるだけ&lt;strong&gt;体験者を動かなさい&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;例えば車に乗るコンテンツや空を飛ぶようなコンテンツにはしない&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;視界をミラーリングしているモニターに楽し気でカラフル、かつ&lt;strong&gt;変化が激しい画&lt;/strong&gt;を映したい&lt;/li&gt;
&lt;li&gt;体を動かす→スポーツ→コントローラーを使えるような個人競技モチーフが相性がいい&lt;/li&gt;
&lt;li&gt;普段の視界からはかけ離れたゲームらしいVR空間デザイン&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;　特に「&lt;strong&gt;現実世界ではそんなに行うことができない&lt;/strong&gt;」、「&lt;strong&gt;端から見ていても楽しい&lt;/strong&gt;」という点を重視したかったので、
今回は &lt;strong&gt;&lt;strong&gt;「破壊」&lt;/strong&gt;&lt;/strong&gt; をテーマに据えることにしました。物を自由に壊すことは根源的な楽しさがありますし、ミラーリングの画面にも派手でダイナミックな画を出せそうです。&lt;/p&gt;
&lt;p&gt;　そして破壊をテーマにしたゲームといえば &lt;strong&gt;「ブロック崩し」&lt;/strong&gt; です。加えて &lt;strong&gt;「体を動かす」&lt;/strong&gt; 要素などを考慮して、
&lt;strong&gt;「テニスのようにボールを打ち返して3次元ブロック崩しをする」&lt;/strong&gt; というような形を目指すこととしました。&lt;/p&gt;
&lt;h2 id=&#34;1作目&#34;&gt;1作目
&lt;/h2&gt;&lt;p&gt;そんなことを考えながら手探りで作った私のVRゲーム処女作が↓の作品になります。&lt;/p&gt;
&lt;div class=&#34;video-wrapper&#34;&gt;
    &lt;iframe loading=&#34;lazy&#34; 
            src=&#34;https://www.youtube.com/embed/o4TTklY42lo&#34; 
            allowfullscreen 
            title=&#34;YouTube Video&#34;
    &gt;
    &lt;/iframe&gt;
&lt;/div&gt;

&lt;p&gt;　2019年の大学祭でこのVRゲーム処女作を展示したところ、これもまた大変好評で、私の中でかなり大きい成功体験になっています。&lt;/p&gt;
&lt;p&gt;　まずこのゲームはBeat Saberのように、プレイヤーは&lt;strong&gt;空間を移動しません&lt;/strong&gt;。また、背景が動くと人は動いていると勘違いしてしまうので
背景も一切動かしません。背景に相当するような巨大なオブジェクトも登場しませんし移動しません。&lt;/p&gt;
&lt;p&gt;　視界ミラーリングをしているモニターには、目の前に浮かんでいるカラフルなブロックが次々に音を立てて崩れて（はじけて？）いく爽快感があります。実際に大学祭ではかなりの人がミラーリングのモニターに釘付けになっていましたし、客寄せにも一役買ってくれました。&lt;/p&gt;
&lt;p&gt;　他の細かい工夫点などは追々説明します。&lt;/p&gt;
&lt;h2 id=&#34;2作目&#34;&gt;2作目
&lt;/h2&gt;&lt;p&gt;　時は経って2023年、コロナ禍も鳴りを潜め大学祭のリアル開催が再開されたので、4年前に作ったVRブロック崩しをリメイクして再度体験展示しようと考えました。そうして完成したのがリメイク版の2作目になります。コンセプトや基本設計はそのままに、ビジュアルの部分やシステム面で進化させています。&lt;/p&gt;
&lt;p&gt;　次項からは1作目や2作目で工夫したポイントを、2作目を例にしながら細かく説明していきます。&lt;/p&gt;
&lt;h2 id=&#34;工夫ポイント&#34;&gt;工夫ポイント
&lt;/h2&gt;&lt;h3 id=&#34;全体のデザイン&#34;&gt;全体のデザイン
&lt;/h3&gt;&lt;p&gt;　1作目の時はとにかく幻想的な感じにしたくて、雲の上や宇宙空間に浮かんだステージというイメージで作りました。ステージには宝石用だったシェーダーをあてて、ガラス板、水晶のようなな感じにしています。ですが、壁が透明故に反射のタイミングがわかりづらかったり、どうしてもチープなビジュアルになってしまいました。ブロックが崩れた時のエフェクトは「立方体が崩れてさらに立方体の破片が飛び散る」というイメージのエフェクトにしています。&lt;/p&gt;
&lt;p&gt;　2作目はうってかわって室内モチーフに変え、ネオンサインのような映える光源を置いてライティングに気を配りました。結果として、大仰な背景を使わずともリッチな画面を作れていると思います。赤と青というデザインはかなりBeat Saberに影響を受けています。ブロックにも気を遣い、1作目ではランダムな色でのベタ塗りだったのに対し、2作目では色を固定しリッチなシェーダーをあてています。崩れた時の破片も、&lt;strong&gt;実際に立方体が砕けたときの破片&lt;/strong&gt;をいろんな割れ方で出すようにしてビジュアル面での強化を図りました。よく見るとブロックの色ごとで割れ方が違うのがわかると思います。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://twoooooda.net/post/vr-block-break/232741.png&#34;
	width=&#34;1768&#34;
	height=&#34;1041&#34;
	srcset=&#34;https://twoooooda.net/post/vr-block-break/232741_hu12009940979776965459.png 480w, https://twoooooda.net/post/vr-block-break/232741_hu18097798606297939029.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;青空とガラス&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;169&#34;
		data-flex-basis=&#34;407px&#34;
	
&gt;
&lt;img src=&#34;https://twoooooda.net/post/vr-block-break/232902.png&#34;
	width=&#34;1491&#34;
	height=&#34;832&#34;
	srcset=&#34;https://twoooooda.net/post/vr-block-break/232902_hu18121726776367825098.png 480w, https://twoooooda.net/post/vr-block-break/232902_hu843171196985385992.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;クラブハウスっぽい空間をイメージしました&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;179&#34;
		data-flex-basis=&#34;430px&#34;
	
&gt;&lt;/p&gt;
&lt;h3 id=&#34;ロビーエリア&#34;&gt;ロビーエリア
&lt;/h3&gt;&lt;p&gt;　ゲーム開始前のロビーエリアでは、主に以下の狙いがあります。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;プレイヤー、傍観者ともにゲームの雰囲気がわかる&lt;/li&gt;
&lt;li&gt;このゲームはラケットとボールで何かをするというのがわかる&lt;/li&gt;
&lt;li&gt;ラケットはボールを打てて、ボールには接触判定があり、ボールでブロック崩しをするんだなというのがわかる&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;　このゲームはラケットがコントローラーに直接紐づいていて、ボタン操作が一切ありません。なので、このロビーエリアが実質的な操作説明兼、チュートリアルステージになっています。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://twoooooda.net/post/vr-block-break/225036.png&#34;
	width=&#34;1910&#34;
	height=&#34;1071&#34;
	srcset=&#34;https://twoooooda.net/post/vr-block-break/225036_hu213058747956898897.png 480w, https://twoooooda.net/post/vr-block-break/225036_hu7834887282730068766.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;目の前のボールをとりあえず打ってゲーム開始！&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;178&#34;
		data-flex-basis=&#34;428px&#34;
	
&gt;&lt;/p&gt;
&lt;h3 id=&#34;1stステージ&#34;&gt;1stステージ
&lt;/h3&gt;&lt;p&gt;　1stステージはシンプルな3次元ブロック崩しです。ステージの形状を俯瞰すると、三角形に近い、適度に面取りされたモデルになっています。VR視点だとわかりづらいかも知れないですが、実は手前から奥にかけてかなり広がっています。これは、奥で反射したボールが自然にブロックの方めがけて反射するように工夫した結果です。また手前がすぼまっていることで、体から遠すぎてボールを返せないということを防いでいます。&lt;/p&gt;
&lt;p&gt;　ゲーム性のために、&lt;strong&gt;ボールの挙動&lt;/strong&gt;に関してもかなり工夫しています。細かいスクリプトは紹介しませんが、以下のような調整が加わっています。必要以上に返すのが難しいボールを減らしたり、「なかなか手前に返ってこなくて暇」という状況を減らすための調整が多いです。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;一定ラインより奥で反射した場合、ブロックの塊の中心に向かいやすい&lt;/li&gt;
&lt;li&gt;一定ラインより奥である回数以上反射すると、プレイヤー側に向かわせる力がはたらく&lt;/li&gt;
&lt;li&gt;一定ラインより手前で反射した場合、プレイヤーの体に向かいやすい&lt;/li&gt;
&lt;li&gt;一定ラインより奥から反射せずプレイヤーに向かってきた場合、曲がりながらプレイヤーに向かってくる&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;　動画を見ていると気づくかもしれませんが、ボールは&lt;strong&gt;反射を繰り返すと少しずつ速度が上がって&lt;/strong&gt;いきます。プレイヤーはゲームの中でだんだんとゲームに慣れて（飽きて）いくので、変化のためにこういう調整もしています。ボールが埋まっているブロックが崩れるとボールが増えていくのも、プレイと見た目に変化をつけるためです。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://twoooooda.net/post/vr-block-break/224740.png&#34;
	width=&#34;1192&#34;
	height=&#34;851&#34;
	srcset=&#34;https://twoooooda.net/post/vr-block-break/224740_hu5456325805811056437.png 480w, https://twoooooda.net/post/vr-block-break/224740_hu1124962585797181721.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;ステージのモデル&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;140&#34;
		data-flex-basis=&#34;336px&#34;
	
&gt;
&lt;img src=&#34;https://twoooooda.net/post/vr-block-break/233204.png&#34;
	width=&#34;1268&#34;
	height=&#34;708&#34;
	srcset=&#34;https://twoooooda.net/post/vr-block-break/233204_hu8890128562292478954.png 480w, https://twoooooda.net/post/vr-block-break/233204_hu12912555874486377393.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;ブロックの中心に向かうような挙動をしています&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;179&#34;
		data-flex-basis=&#34;429px&#34;
	
&gt;&lt;/p&gt;
&lt;h3 id=&#34;ステージ遷移&#34;&gt;ステージ遷移
&lt;/h3&gt;&lt;p&gt;　1作目の時はステージの遷移時にUnityのscene（ひとつの独立した空間みたいなもの）を切り替えていました。しかし、この方法だと、遷移する瞬間にノイズとともに画面がほんの一瞬止まってしまうという問題がありました。これを受けて、2作目では同じsceneの中にロビーエリアからスコア発表のステージまで詰め込んでいます。&lt;/p&gt;
&lt;p&gt;　2作目のステージ遷移の仕方は少しこだわりました。「&lt;strong&gt;破壊&lt;/strong&gt;」がテーマのVRゲームなので、もういっそ&lt;strong&gt;ステージごと壊れれば面白いのでは&lt;/strong&gt; と思いました。さっきまで自分がいたステージが吹き飛んで2ndステージが現れればこれ以上ないダイナミックな変化になりますし、&lt;strong&gt;「これから何が起こるんだ！？」というワクワク感&lt;/strong&gt;を与えながら次のステージに進ませることができます。自分がいたVR空間が壊れて次のVR空間へ行くという、入れ子構造みたいなメタ的表現もしたくて作ったみたいなところもあります。一瞬の出来事でかつ地味ですが、個人的にはこのゲームのかなり好きな部分です。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://twoooooda.net/post/vr-block-break/230016.png&#34;
	width=&#34;1672&#34;
	height=&#34;982&#34;
	srcset=&#34;https://twoooooda.net/post/vr-block-break/230016_hu16737302194111141771.png 480w, https://twoooooda.net/post/vr-block-break/230016_hu15001505929382490840.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;1stステージが2ndの中にすっぽり&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;170&#34;
		data-flex-basis=&#34;408px&#34;
	
&gt;
&lt;img src=&#34;https://twoooooda.net/post/vr-block-break/230945.png&#34;
	width=&#34;1267&#34;
	height=&#34;711&#34;
	srcset=&#34;https://twoooooda.net/post/vr-block-break/230945_hu14401329202061680032.png 480w, https://twoooooda.net/post/vr-block-break/230945_hu9459396432913758394.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;ステージの破片もそれっぽいものではなくステージを砕いた実際の破片です&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;178&#34;
		data-flex-basis=&#34;427px&#34;
	
&gt;&lt;/p&gt;
&lt;h3 id=&#34;2ndステージ&#34;&gt;2ndステージ
&lt;/h3&gt;&lt;p&gt;　1作目に関して、2ndステージは1stステージとほぼ同一です。2作目の2ndステージは1stステージから大きく変えています。
　新しい2ndステージは、ブロックの塊が「敵」として登場しボールをこちらに放ってきます。そして1stステージの同じボールを打ち返し続けるシステムとは違い、&lt;strong&gt;大量のボールをさばききるゲーム&lt;/strong&gt;に変貌します。これは1stステージのゲーム性を引き継ぐとだんだん単調になり、飽きてしまうという問題があったからです。&lt;/p&gt;
&lt;p&gt;　ボールはラケットに当たると弧を描いて飛んでいき、どれかのブロックには必ず当たります。なのでプレイヤーは「どう打ち返すか」を気にする必要はなく、「ただただ打ち返す」ことに集中できるという設計にしています。&lt;/p&gt;
&lt;p&gt;　敵が放ってくるボールは、あらかじめ設定したタイミング、発射口から発射されます。が、どんな軌道を描くかはある程度ランダムです。タイミングや発射口の設定は最初は難易度低めで始まりますが、徐々に発射間隔が縮まり、同時発射数も多くなっていきます。このタイミングと発射口を決められるようになったおかげで、細かく難易度の調整ができるようになりました。&lt;/p&gt;
&lt;p&gt;　2ndステージで外せない要素として、「&lt;strong&gt;特殊ボール&lt;/strong&gt;」があります。動画の後半に登場する、青色と赤色のブロックから出現するボールです。これらのボールは挙動こそ違えど、一度に多くのブロックを壊すことができるアイテム的な立ち位置です。これもゲームに変化をつけるための施策で、かつ「&lt;strong&gt;いっぱい壊れてなんだか気持ちいい&lt;/strong&gt;」というゲームの根源的な面白さを狙ったシステムです。私は、ゲームとは「&lt;strong&gt;気持ちよさ&lt;/strong&gt;」とそれによる「&lt;strong&gt;脳汁&lt;/strong&gt;」が本質であると思うので、このシステムはかなりその点を意識して実装しました。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://twoooooda.net/post/vr-block-break/000756.png&#34;
	width=&#34;1266&#34;
	height=&#34;705&#34;
	srcset=&#34;https://twoooooda.net/post/vr-block-break/000756_hu13496499023342236462.png 480w, https://twoooooda.net/post/vr-block-break/000756_hu9244692632146978903.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;ボールをさばききれ！&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;179&#34;
		data-flex-basis=&#34;430px&#34;
	
&gt;
&lt;img src=&#34;https://twoooooda.net/post/vr-block-break/002640.png&#34;
	width=&#34;1270&#34;
	height=&#34;713&#34;
	srcset=&#34;https://twoooooda.net/post/vr-block-break/002640_hu15507748408496965208.png 480w, https://twoooooda.net/post/vr-block-break/002640_hu15704181440249899751.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;爆発赤ボールと貫通青ボール&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;178&#34;
		data-flex-basis=&#34;427px&#34;
	
&gt;&lt;/p&gt;
&lt;h3 id=&#34;bgm&#34;&gt;BGM
&lt;/h3&gt;&lt;p&gt;　BGMはさすがに自作していません。インターネットの海でたまたま見つけた激オシャレ曲を拝借して使っています（著作権云々には目を瞑って）。曲の長さもちょうどよく、制限時間を使い切ったとほぼ同時に曲も終わるようにタイミングを調整してゲームを作っています。みなさんも是非原曲様を聞いてみてください。&lt;/p&gt;
&lt;p&gt;いつかBGMまで自作したいですね。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://soundcloud.com/the-musical-ghost/ghost-stranger-love-future-bass?si=a15ae87f195644d99269126eca5a9806&amp;amp;utm_source=clipboard&amp;amp;utm_medium=text&amp;amp;utm_campaign=social_sharing&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;1stステージ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://soundcloud.com/the-musical-ghost/deltarune-hip-shop-drum-bass?si=26f8feda04884b5b8fe7ca203b757751&amp;amp;utm_source=clipboard&amp;amp;utm_medium=text&amp;amp;utm_campaign=social_sharing&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;2ndステージ&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;さいごに&#34;&gt;さいごに
&lt;/h2&gt;&lt;p&gt;　いかがでしたでしょうか（疲弊）改めて工夫点を洗い出して言語化してみるとかなりの量になってしまいました。しかしまだまだ語れるくらい、このゲームは&lt;strong&gt;私の自信作であり、胸を張って面白いゲームであると言えます。&lt;/strong&gt; このゲームの制作は間違いなく私の中で大きな成功体験として残り続けることでしょう。&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Hugoで非推奨のプロパティとかを使ってエラーが出たとき</title>
        <link>https://twoooooda.net/post/hugo-komattara/</link>
        <pubDate>Sun, 01 Dec 2024 00:00:00 +0000</pubDate>
        
        <guid>https://twoooooda.net/post/hugo-komattara/</guid>
        <description>&lt;img src="https://twoooooda.net/post/hugo-komattara/hugo.png" alt="Featured image of post Hugoで非推奨のプロパティとかを使ってエラーが出たとき" /&gt;&lt;p&gt;この記事は、&lt;a class=&#34;link&#34; href=&#34;https://adventar.org/calendars/10291&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;某企業アドベントカレンダー2024&lt;/a&gt;の六日目の記事です。&lt;/p&gt;
&lt;h2 id=&#34;経緯&#34;&gt;経緯
&lt;/h2&gt;&lt;p&gt;最近久々に記事を書こうとしてHugoを使ったら、以下のようなエラーメッセージが出てうまくビルドができませんでした。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ hugo
WARN  deprecated: resources.ToCSS was deprecated in Hugo v0.128.0 and will be removed in a future release. Use css.Sass instead.
ERROR deprecated: .Site.LastChange was deprecated in Hugo v0.123.0 and will be removed in Hugo 0.140.0. Use .Site.Lastmod instead.
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;要するに、現行のHugoのバージョンでは非推奨、あるいは利用不可なプロパティを使っているせいで怒られています。&lt;/p&gt;
&lt;h2 id=&#34;原因&#34;&gt;原因
&lt;/h2&gt;&lt;p&gt;私の場合は、&lt;a class=&#34;link&#34; href=&#34;https://github.com/CaiJimmy/hugo-theme-stack&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;ブログのテンプレート&lt;/a&gt;をgitのsubmoduleの形で使っていて、ある程度はテンプレートのリポジトリに依存してしまいます。submoduleの仕様として、submoduleの関係を設定したタイミングのリポジトリの状態を保持してしまうみたいです。このブログを作ったのがもう3年前なので、テンプレートの中身が3年前のバージョンで止まっていたのが原因でした。&lt;/p&gt;
&lt;h2 id=&#34;解決&#34;&gt;解決
&lt;/h2&gt;&lt;p&gt;解決策としては、以下のコマンドでsubmoduleに設定しているリポジトリを最新の状態にすれば解決できました。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ git submodule update --remote
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;内容としてはこれだけなのですが、備忘録として残します。&lt;/p&gt;
&lt;h2 id=&#34;補足&#34;&gt;補足
&lt;/h2&gt;&lt;p&gt;PCを新調したなどで、新しく&lt;code&gt;git clone&lt;/code&gt;したい場合、以下のコマンドでsubmoduleの情報、submoduleとの関係などを引き継いでcloneできます。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;git clone --recursive https://github.com/twoooooda/[リポジトリ.git]
&lt;/code&gt;&lt;/pre&gt;</description>
        </item>
        <item>
        <title>atcoder-cliを導入してみた</title>
        <link>https://twoooooda.net/post/introduce-atcoder-cli/</link>
        <pubDate>Fri, 20 May 2022 00:00:00 +0000</pubDate>
        
        <guid>https://twoooooda.net/post/introduce-atcoder-cli/</guid>
        <description>&lt;h2 id=&#34;いきさつ&#34;&gt;いきさつ
&lt;/h2&gt;&lt;p&gt;　ここ最近、諸事情あって競技プログラミングで有名なAtCoderに参戦したのですが、AtCoderのwebページでポチポチコーディングするのも、別のエディタで書いてコピペするのもなんだかなぁという感じだったので、友人が使っていた&lt;strong&gt;atcoder-cli&lt;/strong&gt;というものを導入して使ってみることにしました。なお、この記事は以下の参考文献から大いに引用しています。&lt;br&gt;
&lt;!-- raw HTML omitted --&gt;&lt;br&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;strong&gt;参考文献&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://scrapbox.io/hitech/%F0%9F%8F%83_AtCoder_%E7%92%B0%E5%A2%83%E6%A7%8B%E7%AF%89_for_Python&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;AtCoder 環境構築 for Python&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;http://tatamo.81.la/blog/2018/12/07/atcoder-cli/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;コマンドラインツールatcoder-cliを公開しました（作成者様のサイト）&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;http://tatamo.81.la/blog/2018/12/07/atcoder-cli-tutorial/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;atcoder-cli チュートリアル（作成者様謹製のチュートリアル）&lt;/a&gt;
&lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;atcoder-cliとは&#34;&gt;atcoder-cliとは？
&lt;/h2&gt;&lt;p&gt;　atcoder-cliとは、コンソールから短いコマンドを打つだけで問題の提出のみならず、使用する各言語に合わせたテンプレートの自動展開、作業フォルダ、ファイルの整理、テストケースの自動ダウンロード、検証などを簡単に行えるツールです。この記事では、基本的に&lt;strong&gt;Python&lt;/strong&gt;でAtCoderに参戦することを前提に進めていきます。&lt;/p&gt;
&lt;h2 id=&#34;導入方法&#34;&gt;導入方法
&lt;/h2&gt;&lt;p&gt;　基本的には&lt;a class=&#34;link&#34; href=&#34;http://tatamo.81.la/blog/2018/12/07/atcoder-cli-tutorial/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;さっきのチュートリアル&lt;/a&gt;に従ってatcoder-cliと、セットでほぼ使うであろう &lt;strong&gt;online-judge-tools&lt;/strong&gt;も一緒にインストールします。ちなみに、atcoder-cliはJavaScriptのパッケージマネージャであるnpmでインストールするので、npmが入っていない方はそちらを先にやってしまいましょう。&lt;br&gt;
&lt;a class=&#34;link&#34; href=&#34;https://dev.macha795.com/windows10-node-js-npm-install/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Node.js・npmのインストール&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;環境&#34;&gt;環境
&lt;/h3&gt;&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th&gt;Python（Anaconda）&lt;/th&gt;
          &lt;th&gt;3.8.8&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td&gt;pip&lt;/td&gt;
          &lt;td&gt;22.0.4&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;npm&lt;/td&gt;
          &lt;td&gt;6.14.6&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;インストール&#34;&gt;インストール
&lt;/h3&gt;&lt;p&gt;　online-judge-toolsとatcoder-cliのインストールには、以下のコマンドを実行します。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt; &amp;gt; pip install online-judge-tools
 &amp;gt; npm install -g atcoder-cli
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;そして、以下のコマンドが使用できればインストールされています。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;&amp;gt; acc -h
&lt;/code&gt;&lt;/pre&gt;&lt;!-- raw HTML omitted --&gt;
&lt;h3 id=&#34;ログイン&#34;&gt;ログイン
&lt;/h3&gt;&lt;p&gt;　atcoder-cliとonline-judge-toolsの両方ログインする必要があります。以下のコマンドを叩いた後にAtCoderのユーザー名とパスワードを入力します。まずはonline-judge-toolsの方から。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;&amp;gt; oj login https://atcoder.jp/
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;次にatcoder-cliの方にログイン。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;&amp;gt; acc login
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;ここで、Linux等のCUIに普段から触れていると慣れているかもしれませんが、パスワードを入れる時に一見して入力できていないように見えるかもしれません。が、見えないようになっているだけで入力できています、大丈夫です。&lt;/p&gt;
&lt;h3 id=&#34;configファイルの編集&#34;&gt;Configファイルの編集
&lt;/h3&gt;&lt;p&gt;　問題を解くときに、毎回main.pyの作成や問題用ディレクトリを作るのは面倒なので、自動化します。そのためにConfig.jsonを編集します。まずはConfigの場所の確認から。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;&amp;gt; acc config-dir
C:\Users\&amp;lt;username&amp;gt;\AppData\Roaming\atcoder-cli-nodejs\Config
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;環境によってファイルの場所はまちまちになるかと思います。ファイルを開いて、以下みたいな感じに&lt;code&gt;&amp;quot;default-test-dirname-format&amp;quot;&lt;/code&gt;と&lt;code&gt;&amp;quot;default-template&amp;quot;:&amp;quot;python&amp;quot;&lt;/code&gt;を変更します。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nt&#34;&gt;&amp;#34;oj-path&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;C:\\ProgramData\\Anaconda3\\Scripts\\oj.exe&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nt&#34;&gt;&amp;#34;default-contest-dirname-format&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;{ContestID}&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nt&#34;&gt;&amp;#34;default-task-dirname-format&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;{tasklabel}&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nt&#34;&gt;&amp;#34;default-test-dirname-format&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;test&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nt&#34;&gt;&amp;#34;default-task-choice&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;inquire&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nt&#34;&gt;&amp;#34;default-template&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;python&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;次に、上のConfig.jsonがあった&lt;code&gt;Config&lt;/code&gt;フォルダに&lt;code&gt;python&lt;/code&gt;フォルダを作り、その中に&lt;code&gt;main.py&lt;/code&gt;と&lt;code&gt;template.json&lt;/code&gt;を作ります。&lt;code&gt;main.py&lt;/code&gt;の中身は空でも大丈夫で、&lt;code&gt;template.json&lt;/code&gt;は以下。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;     &lt;span class=&#34;nt&#34;&gt;&amp;#34;task&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;         &lt;span class=&#34;nt&#34;&gt;&amp;#34;program&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;             &lt;span class=&#34;s2&#34;&gt;&amp;#34;main.py&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;         &lt;span class=&#34;p&#34;&gt;],&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;         &lt;span class=&#34;nt&#34;&gt;&amp;#34;submit&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;main.py&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;     &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt; &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;使ってみる&#34;&gt;使ってみる
&lt;/h2&gt;&lt;h3 id=&#34;解答用フォルダ作成&#34;&gt;解答用フォルダ作成
&lt;/h3&gt;&lt;p&gt;　ようやく使用法編です。今回は&lt;code&gt;C:\Users\&amp;lt;username&amp;gt;&lt;/code&gt;の中に&lt;code&gt;atcoder&lt;/code&gt;というフォルダを作り、その中で作業することとします（ここは自由です）。問題は仮にabc250のa問題を解くとしましょう。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;&amp;gt; cd atcoder
&amp;gt; acc new abc250
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;code&gt;&amp;gt; acc new abc000&lt;/code&gt;でその回の解答用フォルダとテストケースのダウンロードが可能です。すると以下のように問題のリストが表示され、Spaceキーで問題の選択、Enterキーでフォルダ作成ができます。aキー -&amp;gt; Enterで全問を一括で選択できます。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;abc250/contest.acc.json created.
create project of AtCoder Beginner Contest 250
? select tasks (Press &amp;lt;space&amp;gt; to select, &amp;lt;a&amp;gt; to toggle all, &amp;lt;i&amp;gt; to invert selection)
&amp;gt;(*) A Adjacent Squares
 ( ) B Enlarged Checker Board
 ( ) C Adjacent Swaps
 ( ) D 250-like Number
 ( ) E Prefix Equality
 ( ) F One Fourth
 ( ) G Stonks
(Move up and down to reveal more choices)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;仮に全選択すると解答用フォルダはこんな感じになっているかと思います。a問題を解くときは、&lt;code&gt;a&lt;/code&gt;フォルダにある&lt;code&gt;main.py&lt;/code&gt;にコードを書いていきます。
&lt;img src=&#34;https://twoooooda.net/post/introduce-atcoder-cli/2022-05-21.png&#34;
	width=&#34;316&#34;
	height=&#34;667&#34;
	srcset=&#34;https://twoooooda.net/post/introduce-atcoder-cli/2022-05-21_hu4805595019298944967.png 480w, https://twoooooda.net/post/introduce-atcoder-cli/2022-05-21_hu6327058566040865519.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;47&#34;
		data-flex-basis=&#34;113px&#34;
	
&gt;&lt;/p&gt;
&lt;h3 id=&#34;解答テストケース検証&#34;&gt;解答、テストケース検証
&lt;/h3&gt;&lt;p&gt;　&lt;code&gt;main.py&lt;/code&gt;に解答を書き終えたら、テストします。コンソールから&lt;code&gt;a&lt;/code&gt;フォルダに移動して、コマンドを実行します。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;&amp;gt; cd abc250/a
&amp;gt; oj t -c &amp;#34;python main.py&amp;#34;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;すると、テストケースの検証結果が返ってきます。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;C:\Users\&amp;lt;username&amp;gt;\abc250\a&amp;gt; oj t -c &amp;#34;python main.py&amp;#34;
[INFO] online-judge-tools 11.5.1 (+ online-judge-api-client 10.10.0)
[INFO] 6 cases found
[WARNING] GNU time is not available: time

[INFO] sample-1
[INFO] time: 0.065499 sec
[SUCCESS] AC

[INFO] sample-2
[INFO] time: 0.050322 sec
[SUCCESS] AC

[INFO] sample-3
[INFO] time: 0.049653 sec
[SUCCESS] AC

[INFO] sample-4
[INFO] time: 0.051948 sec
[SUCCESS] AC

[INFO] sample-5
[INFO] time: 0.046560 sec
[SUCCESS] AC

[INFO] sample-6
[INFO] time: 0.046376 sec
[SUCCESS] AC

[INFO] slowest: 0.065499 sec  (for sample-1)
[SUCCESS] test success: 6 cases
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;いい感じにACが出てていい感じですね。&lt;/p&gt;
&lt;h3 id=&#34;提出&#34;&gt;提出
&lt;/h3&gt;&lt;p&gt;　テスト結果がいい感じだったので提出します。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;&amp;gt; acc submit main.py
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;提出に成功すると自動的にAtCoderのwebページがブラウザで開き、判定されます。そこでACをもらうと晴れて解答完了です。お疲れ様でした。&lt;/p&gt;
&lt;h3 id=&#34;問題追加&#34;&gt;問題追加
&lt;/h3&gt;&lt;p&gt;　例えば、4.1章でa問題のフォルダのみを作成したけど後にb問題以降も解きたくなったとき、&lt;code&gt;abc250&lt;/code&gt;のフォルダに戻って&lt;code&gt;acc add&lt;/code&gt;で追加ができます。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;&amp;gt; cd ..（一つ上の階層に戻る）
&amp;gt; acc add
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;そうすると同じような問題選択画面が表示され、任意の問題を追加できます。&lt;/p&gt;
</description>
        </item>
        <item>
        <title>AutoHotKeyを導入してみた</title>
        <link>https://twoooooda.net/post/introduce-autohotkey/</link>
        <pubDate>Tue, 04 Jan 2022 00:00:00 +0000</pubDate>
        
        <guid>https://twoooooda.net/post/introduce-autohotkey/</guid>
        <description>&lt;h2 id=&#34;導入を考えたきっかけ&#34;&gt;導入を考えたきっかけ
&lt;/h2&gt;&lt;p&gt;　&lt;a class=&#34;link&#34; href=&#34;https://twoooooda.github.io/p/%E7%A7%81%E3%81%AE%E8%87%AA%E4%BD%9C%E3%82%AD%E3%83%BC%E3%83%9C%E3%83%BC%E3%83%89%E5%A5%AE%E9%97%98%E8%A8%98/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;以前の記事&lt;/a&gt;でも述べた通り、自作キーボードに対応しているファームウェアがマジのゴミで、キー割り当てを変えられなかったので、いろいろ調べているうちにAutoHotKeyというものを見つけました。&lt;/p&gt;
&lt;h2 id=&#34;autohotkeyとは&#34;&gt;AutoHotKeyとは？
&lt;/h2&gt;&lt;p&gt;　独自のプログラミング言語を用いて、キーボードのキー操作によるかなり柔軟なショートカットの作成や、普段あまり使わないキーを全く別のキーとして割り当てたり、メディアコントロールやPCのシステム操作を割り当てたりできます。&lt;a class=&#34;link&#34; href=&#34;https://fuchiaz.com/usage-autohotkey/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;参考&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;導入方法&#34;&gt;導入方法
&lt;/h2&gt;&lt;p&gt;　基本的に&lt;a class=&#34;link&#34; href=&#34;https://fuchiaz.com/auto-hot-key/#AutoHotkey&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;このサイト&lt;/a&gt;に従ってインストールして、拡張子を&lt;code&gt;.ahk&lt;/code&gt;としたテキストファイルを作り、そこに任意のショートカットやキーの割り当てを記述していきます。記法や文法、決まりごとは&lt;a class=&#34;link&#34; href=&#34;https://so-zou.jp/software/tool/system/auto-hot-key/introduction/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;日本語のリファレンス(?)&lt;/a&gt;があるので、そちらを参照してください。&lt;/p&gt;
&lt;p&gt;　このAutoHotKeyを使う場合、拡張子が&lt;code&gt;.ahk&lt;/code&gt;のファイル、あるいは&lt;code&gt;.ahk&lt;/code&gt;のファイルから作成した&lt;code&gt;.exe&lt;/code&gt;の実行ファイルを起動し、タスクトレイで常駐させておかなければなりません。なので、PC起動時に自動で該当のファイルが起動するようにしておくと便利です。私は&lt;a class=&#34;link&#34; href=&#34;https://kiryusblog.com/autohotkey-autorun/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;こちらのサイト&lt;/a&gt;を参考に設定しました。&lt;/p&gt;
&lt;h2 id=&#34;実際に使う&#34;&gt;実際に使う
&lt;/h2&gt;&lt;p&gt;　私がこのAutoHotKeyでやりたかったのは、&amp;quot;&lt;strong&gt;キーボード右上のPageUp、PageDownのキーをメディアの再生一時停止、次の曲ボタンへ割り当て&lt;/strong&gt;&amp;quot; です。実際のコードはごく簡単なもので、以下のように書いたら思った通りに動いてくれました。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;#InstallKeybdHook
#UseHook

PgUp::Media_Play_Pause
PgDn::Media_Next
return
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;また、便利だと聞いたので&lt;a class=&#34;link&#34; href=&#34;https://www.karakaram.com/alt-ime-on-off/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;こちらのサイト&lt;/a&gt;を参考に、左右Altの空打ちで日本語入力と英字入力を切り変えられるようにしました。私は起動しないといけない実行ファイルが増えると嫌なので、実際に使うときはPageUp/Downキーをメディアコントロールに割り当てるコードと、&lt;code&gt;alt-ime-ahk.ahk&lt;/code&gt;の内容を一つのファイルに統合しています(ファイル名を&lt;code&gt;general.ahk&lt;/code&gt;としています)。&lt;/p&gt;
&lt;h2 id=&#34;導入してみて&#34;&gt;導入してみて
&lt;/h2&gt;&lt;p&gt;　導入してしばらく使ってみましたが、&lt;strong&gt;とてもとても便利です。&lt;/strong&gt; タスクトレイに入るアイコンが一つ増えるのが最初は少し抵抗がありましたが。それを補って余りある恩恵を受けています。今後新しくショートカットが欲しくなったり、割り当てを変えたい時が来れば今使っている&lt;code&gt;general.ahk&lt;/code&gt;ファイルに追記すればいいだけなので、使い方を多少覚えていればこれからもっと気軽に便利にしていくことができると思います。&lt;/p&gt;
</description>
        </item>
        <item>
        <title>ラズパイに公開鍵認証でssh接続するまで</title>
        <link>https://twoooooda.net/post/%E3%83%A9%E3%82%BA%E3%83%91%E3%82%A4%E3%81%AB%E5%85%AC%E9%96%8B%E9%8D%B5%E8%AA%8D%E8%A8%BC%E3%81%A7ssh%E6%8E%A5%E7%B6%9A%E3%81%99%E3%82%8B%E3%81%BE%E3%81%A7/</link>
        <pubDate>Thu, 03 Jun 2021 00:00:00 +0000</pubDate>
        
        <guid>https://twoooooda.net/post/%E3%83%A9%E3%82%BA%E3%83%91%E3%82%A4%E3%81%AB%E5%85%AC%E9%96%8B%E9%8D%B5%E8%AA%8D%E8%A8%BC%E3%81%A7ssh%E6%8E%A5%E7%B6%9A%E3%81%99%E3%82%8B%E3%81%BE%E3%81%A7/</guid>
        <description>&lt;img src="https://twoooooda.net/post/%E3%83%A9%E3%82%BA%E3%83%91%E3%82%A4%E3%81%AB%E5%85%AC%E9%96%8B%E9%8D%B5%E8%AA%8D%E8%A8%BC%E3%81%A7ssh%E6%8E%A5%E7%B6%9A%E3%81%99%E3%82%8B%E3%81%BE%E3%81%A7/raspi.jpeg" alt="Featured image of post ラズパイに公開鍵認証でssh接続するまで" /&gt;&lt;h2 id=&#34;はじめに&#34;&gt;はじめに
&lt;/h2&gt;&lt;p&gt;　家に余ってたラズパイをテレビの録画サーバーにしようと思い、部屋の奥から引っ張り出してきたのはいいですが、初期設定もsshの接続設定も何もしてなかったので勉強がてらやってみました、例の如くやらないといけないことが複数サイトに渡って散らばっていたので、備忘録として一通りまとめます。なお、ラズパイのOSはインストール済み, 有線LAN接続なのを前提とし、ラズパイからモニターにはなるべく出力せずに設定することを目指します。&lt;br&gt;
&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;h2 id=&#34;ホストのpcからラズパイにssh接続する&#34;&gt;ホストのPCからラズパイにssh接続する
&lt;/h2&gt;&lt;p&gt;　OSをインストールしたmicroSDカードをラズパイに挿す前に, microSDカードの直下にsshという空のファイル(拡張子も無し)を作っておきます。こうすることでラズパイのGUIを触らずにsshをオンにできます。
&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;※7/28追記&lt;!-- raw HTML omitted --&gt;
OSが入ったSDカードを覗くと、&lt;code&gt;boot&lt;/code&gt;と&lt;code&gt;rootfs&lt;/code&gt;というパーティションにわかれている場合がありますが、sshを有効化するには&lt;code&gt;boot&lt;/code&gt;直下に置くのが正解らしいです。&lt;/p&gt;
&lt;p&gt;　ラズパイに接続して操作するホストのPCのターミナルから、以下のコマンドを叩くだけでssh接続できます(デフォルトユーザーにログインする場合)。
&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ ssh pi@raspberrypi.local
&lt;/code&gt;&lt;/pre&gt;&lt;!-- raw HTML omitted --&gt;
&lt;h2 id=&#34;ipアドレスの固定&#34;&gt;IPアドレスの固定
&lt;/h2&gt;&lt;p&gt;　インターネットに繋げるたびにIPアドレスが変わると困るので、まずはラズパイのIPアドレスを固定します。ラズパイのIPアドレス固定の前に、ホストのPCのターミナルで以下を実行します。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ ipconfig /all
&lt;/code&gt;&lt;/pre&gt;&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;するとIPの構成が一覧で出てくるので、 &lt;strong&gt;デフォルトゲートウェイとDNSサーバーのIPアドレス&lt;/strong&gt;(192.168.x.OOOみたいなやつ)をメモします。
&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;　以降はssh接続を介してラズパイのコマンドを叩いていきます。まずはラズパイの設定ファイルを開いて編集します。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;pi@raspberrypi:~$ sudo nano /etc/dhcpcd.conf
&lt;/code&gt;&lt;/pre&gt;&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;nanoはviでもいいです(好み)。開いたら、末尾に以下を追加します。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;interface eth0(無線LANの場合はここをwlan0にする)
static ip_address=192.168.x.***/24
static routers=192.168.x.OOO
static domain_name_servers=192.168.x.OOO
&lt;/code&gt;&lt;/pre&gt;&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;&lt;code&gt;staric ip_adress=&lt;/code&gt;にラズパイに割り当てたいIPアドレスを書きます。***の部分は1桁、2桁台は他の危機に割り当てられていることが多いので適当に100～200くらいにするといいらしいです。/24はサブネットマスク長です。
&lt;code&gt;static routers=&lt;/code&gt;にデフォルトゲートウェイのIPアドレス、&lt;code&gt;static domain_name_servers=&lt;/code&gt;にDNSサーバーのIPアドレスを書きます。編集できたら、保存してラズパイを再起動すれば変更が適用されているはずです。
&lt;!-- raw HTML omitted --&gt;
&lt;strong&gt;&lt;a class=&#34;link&#34; href=&#34;https://mugeek.hatenablog.com/entry/2019/05/27/230256&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;参考記事&lt;/a&gt;&lt;/strong&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;h2 id=&#34;ユーザーの追加-権限の付与&#34;&gt;ユーザーの追加, 権限の付与
&lt;/h2&gt;&lt;h3 id=&#34;新しいユーザーの追加&#34;&gt;新しいユーザーの追加
&lt;/h3&gt;&lt;p&gt;　デフォルトユーザーである「pi」とは別のユーザーを作成し、権限をそちらに移行します。sshを介してラズパイのターミナルにて、&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;pi@raspberrypi:~$ sudo adduser |newuser|
&lt;/code&gt;&lt;/pre&gt;&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;|newuser| に任意のユーザー名を指定して実行します。「New password:」と「Retype new password:」へ新規ユーザーのパスワードを指定します。その後くらいにいろいろ設定項目が出てきますが、特に必要がないなら全てEnterで進んでもいいです。
&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;h3 id=&#34;権限の付与&#34;&gt;権限の付与
&lt;/h3&gt;&lt;p&gt;　「pi」ユーザーの権限を新しいユーザーに追加します。まずは「pi」ユーザーの権限を確認するために以下を実行します。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;pi@raspberrypi:~$ groups pi
&lt;/code&gt;&lt;/pre&gt;&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;すると「pi」ユーザーに付与されている権限が一覧で表示されるので、usermodコマンドで新しいユーザーに権限を移します。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;pi@raspberrypi:~$ sudo usermod -G pi,adm,dialout,cdrom,sudo,audio,video,plugdev,games,users,input,netdev,spi,i2c,gpio newuser
&lt;/code&gt;&lt;/pre&gt;&lt;!-- raw HTML omitted --&gt;
&lt;h3 id=&#34;piユーザーのホームフォルダのコピー&#34;&gt;「pi」ユーザーのホームフォルダのコピー
&lt;/h3&gt;&lt;p&gt;　「pi」ユーザーのホームフォルダの内容をnewuserのホームフォルダにコピーします。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;pi@raspberrypi:~$ sudo cp -r /home/pi/* /home/newuser
&lt;/code&gt;&lt;/pre&gt;&lt;!-- raw HTML omitted --&gt;
&lt;h2 id=&#34;デフォルトユーザーpiの無効化&#34;&gt;デフォルトユーザー(pi)の無効化
&lt;/h2&gt;&lt;p&gt;　ラズパイを起動する度に「pi」ユーザーに勝手にログインされると困るので、「pi」ユーザーへの自動ログインをオフにして、ついでに「pi」ユーザーを無効化します。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;pi@raspberrypi:~$ sudo nano /etc/lightdm/lightdm.conf
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;/lightdm/lightdm.confの126行目の先頭に#を入れてコメントアウトします(&lt;code&gt;#autologin-user=pi&lt;/code&gt;)。
&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;　次に、newuserでオートログインするようにします。autologin@.serviceを開いて、28行目の「&amp;ndash;autologin pi」を「&amp;ndash;autologin newuser」へ変更します。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;pi@raspberrypi:~$ sudo vi /etc/systemd/system/autologin@.service
&lt;/code&gt;&lt;/pre&gt;&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;　最後に「pi」ユーザーを無効にします。ユーザーのアカウントの有効期限を過去の日付にすることで無効化できます。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;pi@raspberrypi:~$ sudo usermod --expiredate 1 pi
&lt;/code&gt;&lt;/pre&gt;&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;以降は新しく作成したnewuserで作業します。&lt;!-- raw HTML omitted --&gt;
&lt;strong&gt;&lt;a class=&#34;link&#34; href=&#34;https://monoist.atmarkit.co.jp/mn/articles/1912/11/news022_2.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;参考記事&lt;/a&gt;&lt;/strong&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;h2 id=&#34;鍵ペアの生成と送信設定&#34;&gt;鍵ペアの生成と送信、設定
&lt;/h2&gt;&lt;h3 id=&#34;鍵の生成と送信&#34;&gt;鍵の生成と送信
&lt;/h3&gt;&lt;p&gt;　公開鍵認証とは、パスワードの代わりに公開鍵(ホスト側のPC)と秘密鍵(ラズパイ)のペアで認証する方法です。まずはホストのPCに鍵ペアを生成するディレクトリ及び鍵ペアを作ります。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ mkdir ~/.ssh/raspberrypi
$ ssh-keygen -t rsa
&lt;/code&gt;&lt;/pre&gt;&lt;!-- raw HTML omitted --&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;Enter file in which to save the key (/Users/username/raspberrypi/.ssh/id_rsa):
&lt;/code&gt;&lt;/pre&gt;&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;必要に応じてこの後に聞かれるパスフレーズも入力します。自分は省略しました。これで秘密鍵の&lt;code&gt;id_rsa&lt;/code&gt;と公開鍵の&lt;code&gt;id_rsa.pub&lt;/code&gt;が生成されます。これらのうち&lt;code&gt;id_rsa.pub&lt;/code&gt;をラズパイ側に送ります。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ scp ~/.ssh/raspberrypi/id_rsa.pub newuser@raspberrypi:~
&lt;/code&gt;&lt;/pre&gt;&lt;!-- raw HTML omitted --&gt;
&lt;h3 id=&#34;公開鍵の設定&#34;&gt;公開鍵の設定
&lt;/h3&gt;&lt;p&gt;　ラズパイにパスワード認証でログインし、鍵を管理する&lt;code&gt;.ssh&lt;/code&gt;を作ります。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;newuser@raspberrypi:~$ sudo mkdir ~/.ssh
&lt;/code&gt;&lt;/pre&gt;&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;先ほど送信した&lt;code&gt;id_rsa.pub&lt;/code&gt;を&lt;code&gt;authorized_keys&lt;/code&gt;と名前を変更しつつ&lt;code&gt;.ssh&lt;/code&gt;に移動します。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;newuser@raspberrypi:~$ sudo mv ~/id_rsa.pub ~/.ssh/authorized_keys
&lt;/code&gt;&lt;/pre&gt;&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;次に&lt;code&gt;.ssh&lt;/code&gt;、&lt;code&gt;authorized_keys&lt;/code&gt;のパーミッションを変更します。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;newuser@raspberrypi:~$ chmod 600 ~/.ssh/authorized_keys
newuser@raspberrypi:~$ chmod 700 ~/.ssh
&lt;/code&gt;&lt;/pre&gt;&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;最後に&lt;code&gt;ssh_config&lt;/code&gt;を修正します。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;newuser@raspberrypi:~$ sudo nano /etc/ssh/sshd_config
&lt;/code&gt;&lt;/pre&gt;&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;以下のような記載の行のコメントアウトを外して編集します。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;AuthorizedKeysFile .ssh/authorized_keys .ssh/authorized_keys2
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;この時にポート番号の変更や、パスワード認証のオフができます。しかし、&lt;strong&gt;公開鍵認証が上手くいってない状態でパスワード認証をオフにしてしまうと、次回からログインできなくなってしまう&lt;/strong&gt;ので慎重に行ってください。最悪OSのインストールし直しになります(私は既に何度かやらかしました)。
&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;最後にラズパイを再起動すると、次回から以下のコマンドで公開鍵認証でログインできるはずです。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ ssh -i [秘密鍵ファイル] -p [ポート番号] pi@[Raspberry PiのIPアドレス]
(例)ssh -i .ssh/id_rsa -p 22 pi@192.168.0.100
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;&lt;a class=&#34;link&#34; href=&#34;https://tool-lab.com/raspi-key-authentication-over-ssh/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;参考記事&lt;/a&gt;&lt;/strong&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;h1 id=&#34;ssh-configの追加&#34;&gt;ssh configの追加
&lt;/h1&gt;&lt;p&gt;　この方法で接続してもいいんですが、コマンドが長いので短縮します。
&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;~/.ssh/config&lt;/code&gt;を作り、以下を追記します。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;Host [任意のコマンド名]
	HostName [ラズパイのIPアドレス]
	User [ラズパイのユーザーネーム]
	Port [ラズパイのポート番号]
	IdentityFile [秘密鍵ファイル]
&lt;/code&gt;&lt;/pre&gt;&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;今回の例では以下のようになります。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;Host raspi
	HostName 192.168.1.100
	User newuser
	Port 22
	IdentityFile ~/.ssh/id_rsa
&lt;/code&gt;&lt;/pre&gt;&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;こうすることでssh接続時のコマンドを以下のように大幅に短縮できます。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;ssh raspi
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;&lt;a class=&#34;link&#34; href=&#34;https://zenn.dev/ryo_kawamata/articles/raspberrypi-auth-setting&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;参考記事&lt;/a&gt;&lt;/strong&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;以上です。ファイル名や環境は各々によって違うのでそこは適宜変更をおねがいします。&lt;/p&gt;
</description>
        </item>
        <item>
        <title>HUGOで作ったサイトにアマゾンのアフィリンクを貼る</title>
        <link>https://twoooooda.net/post/hugo%E3%81%A7%E4%BD%9C%E3%81%A3%E3%81%9F%E3%82%B5%E3%82%A4%E3%83%88%E3%81%AB%E3%82%A2%E3%83%9E%E3%82%BE%E3%83%B3%E3%81%AE%E3%82%A2%E3%83%95%E3%82%A3%E3%83%AA%E3%83%B3%E3%82%AF%E3%82%92%E8%B2%BC%E3%82%8B/</link>
        <pubDate>Tue, 13 Apr 2021 00:00:00 +0000</pubDate>
        
        <guid>https://twoooooda.net/post/hugo%E3%81%A7%E4%BD%9C%E3%81%A3%E3%81%9F%E3%82%B5%E3%82%A4%E3%83%88%E3%81%AB%E3%82%A2%E3%83%9E%E3%82%BE%E3%83%B3%E3%81%AE%E3%82%A2%E3%83%95%E3%82%A3%E3%83%AA%E3%83%B3%E3%82%AF%E3%82%92%E8%B2%BC%E3%82%8B/</guid>
        <description>&lt;img src="https://twoooooda.net/post/hugo%E3%81%A7%E4%BD%9C%E3%81%A3%E3%81%9F%E3%82%B5%E3%82%A4%E3%83%88%E3%81%AB%E3%82%A2%E3%83%9E%E3%82%BE%E3%83%B3%E3%81%AE%E3%82%A2%E3%83%95%E3%82%A3%E3%83%AA%E3%83%B3%E3%82%AF%E3%82%92%E8%B2%BC%E3%82%8B/hugo.png" alt="Featured image of post HUGOで作ったサイトにアマゾンのアフィリンクを貼る" /&gt;&lt;h1 id=&#34;hugoの仕様&#34;&gt;HUGOの仕様
&lt;/h1&gt;&lt;p&gt;　静的サイトジェネレータ &amp;ldquo;HUGO&amp;rdquo; は、テーマの制作者がGitHubに上げているリポジトリをサブモジュールとして使うことで自分のサイトにテーマを導入します。ゆえに、テーマのレイアウトに関わるコードを直接書き換えることはできません(ローカルファイルは書き換えられますが)。
&lt;!-- raw HTML omitted --&gt;
　しかしHUGOの仕様として、&lt;code&gt;/static&lt;/code&gt;や&lt;code&gt;/layouts&lt;/code&gt;以下のフォルダやファイルが優先して読み込まれるというものがあります。
&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;h1 id=&#34;ではどうするか&#34;&gt;ではどうするか
&lt;/h1&gt;&lt;p&gt;　&lt;a class=&#34;link&#34; href=&#34;https://themes.gohugo.io/themes/hugo-theme-stack/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;当サイトのテーマ&lt;/a&gt;を例にすると、&lt;code&gt;/themes/hugo-theme-stack/layouts/partials/sidebar/right.html&lt;/code&gt;を書き換えたい場合、該当のファイルを&lt;code&gt;/layouts/partials/&lt;/code&gt;にコピー＆ペーストすると、そちらの方が先に読み込まれるので結果的に編集して上書きが可能なわけです。
&lt;!-- raw HTML omitted --&gt;
　あとはAmazonのアフィリエイトリンクのHTMLコードを生成して、上記のright.htmlに書き込むとちゃんと表示されました。
&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Unityで蚊っぽい動きをするやつを作る</title>
        <link>https://twoooooda.net/post/mosquite-in-unity/</link>
        <pubDate>Fri, 02 Apr 2021 00:00:00 +0000</pubDate>
        
        <guid>https://twoooooda.net/post/mosquite-in-unity/</guid>
        <description>&lt;img src="https://twoooooda.net/post/mosquite-in-unity/ka.png" alt="Featured image of post Unityで蚊っぽい動きをするやつを作る" /&gt;&lt;h2 id=&#34;はじめに&#34;&gt;はじめに
&lt;/h2&gt;&lt;p&gt;　 少し前にOculus Quest2を購入し、しばらくハンドトラッキングで遊んでいたんですが、急に『手で蚊を潰すVRゲーム』を作りたくなったのでとりあえず蚊っぽい挙動をするナニカを作りました。
&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;h2 id=&#34;スクリプト&#34;&gt;スクリプト
&lt;/h2&gt;&lt;p&gt;　やっていることはごく簡単で、数フレームに一回ランダムでRotationの値を変更し、Z方向に常に力を加え続けているだけです。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-cs:Move_mosquite.cs&#34; data-lang=&#34;cs:Move_mosquite.cs&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;using&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;UnityEngine&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;Move_mosquite&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;MonoBehaviour&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;Rigidbody&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;rb&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;float&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;freq&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;speed&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;power&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Start&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;n&#34;&gt;rb&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;GetComponent&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Rigidbody&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;();&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Update&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;n&#34;&gt;rb&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;velocity&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;rb&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;velocity&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;normalized&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;speed&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;//変数speedで速度の設定&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;n&#34;&gt;rb&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;AddForce&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;transform&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;forward&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;power&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Time&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;deltaTime&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ForceMode&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Force&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;//Z方向(forward)に力を加え続ける&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Random&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;value&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;freq&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;//Rotationを変更する頻度を設定。毎フレームだと頻繁過ぎるので。&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;n&#34;&gt;transform&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;eulerAngles&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Vector3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Random&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Range&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;360&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Random&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Range&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;360&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Random&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Range&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;360&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;));&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;このままでは無限にどっかいってしまうので、適当にコライダーをつけるとか、壁に近づくと力を受けるとかにするといいかもしれません。&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;
なお、当方めちゃくちゃ初心者なのでもっと効率的なやり方や、もっとリアルになるやり方があるかもしれませんのであしからず&amp;hellip;.&lt;/p&gt;
&lt;h2 id=&#34;完成例&#34;&gt;完成例
&lt;/h2&gt;&lt;div class=&#34;video-wrapper&#34;&gt;
    &lt;iframe loading=&#34;lazy&#34; 
            src=&#34;https://www.youtube.com/embed/SFOzY6yHWQc&#34; 
            allowfullscreen 
            title=&#34;YouTube Video&#34;
    &gt;
    &lt;/iframe&gt;
&lt;/div&gt;

&lt;!-- raw HTML omitted --&gt;
</description>
        </item>
        <item>
        <title>静的サイトジェネレータ”HUGO”で個人ブログをつくり、GitHub Pagesで公開する</title>
        <link>https://twoooooda.net/post/%E9%9D%99%E7%9A%84%E3%82%B5%E3%82%A4%E3%83%88%E3%82%B8%E3%82%A7%E3%83%8D%E3%83%AC%E3%83%BC%E3%82%BFhugo%E3%81%A7%E5%80%8B%E4%BA%BA%E3%83%96%E3%83%AD%E3%82%B0%E3%82%92%E3%81%A4%E3%81%8F%E3%82%8Agithub-pages%E3%81%A7%E5%85%AC%E9%96%8B%E3%81%99%E3%82%8B/</link>
        <pubDate>Mon, 08 Mar 2021 00:00:00 +0000</pubDate>
        
        <guid>https://twoooooda.net/post/%E9%9D%99%E7%9A%84%E3%82%B5%E3%82%A4%E3%83%88%E3%82%B8%E3%82%A7%E3%83%8D%E3%83%AC%E3%83%BC%E3%82%BFhugo%E3%81%A7%E5%80%8B%E4%BA%BA%E3%83%96%E3%83%AD%E3%82%B0%E3%82%92%E3%81%A4%E3%81%8F%E3%82%8Agithub-pages%E3%81%A7%E5%85%AC%E9%96%8B%E3%81%99%E3%82%8B/</guid>
        <description>&lt;img src="https://twoooooda.net/post/%E9%9D%99%E7%9A%84%E3%82%B5%E3%82%A4%E3%83%88%E3%82%B8%E3%82%A7%E3%83%8D%E3%83%AC%E3%83%BC%E3%82%BFhugo%E3%81%A7%E5%80%8B%E4%BA%BA%E3%83%96%E3%83%AD%E3%82%B0%E3%82%92%E3%81%A4%E3%81%8F%E3%82%8Agithub-pages%E3%81%A7%E5%85%AC%E9%96%8B%E3%81%99%E3%82%8B/hugo.png" alt="Featured image of post 静的サイトジェネレータ”HUGO”で個人ブログをつくり、GitHub Pagesで公開する" /&gt;&lt;h2 id=&#34;はじめに&#34;&gt;はじめに
&lt;/h2&gt;&lt;p&gt;　自分は最近、当ブログを静的サイトジェネレータであるHUGOを用いて作成しました。HUGO自体はわかってしまえばごく簡単に導入、使用できるんですが、いかんせん自分がweb系、GitHubに関して無知であったためハマりポイントをことごとく踏み抜いていき、結局公開までかなり時間がかかってしまいました。なので覚えているうちに使い方や参考サイトをまとめようと思います。&lt;/p&gt;
&lt;p&gt;　ちなみにデプロイ方法等は我流でやっていますが、いろんな方法があるみたいなのであくまで一例としてお読み頂けたら光栄です。&lt;br&gt;
&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;h2 id=&#34;1hugoのインストール&#34;&gt;1.HUGOのインストール
&lt;/h2&gt;&lt;p&gt;　基本的には、HUGOの公式サイトにある&lt;a class=&#34;link&#34; href=&#34;https://gohugo.io/getting-started/quick-start/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Quick Start&lt;/a&gt;に従ってHUGOをインストールしていきます。自分はWindows環境なので、&lt;a class=&#34;link&#34; href=&#34;https://chocolatey.org/install&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Chocolatey&lt;/a&gt;というパッケージマネージャを使ってインストールしました。以降はコマンドプロンプト上で、&lt;code&gt;$ choco install hugo -confirm&lt;/code&gt;を実行するとHUGOがインストールされるはずです。&lt;code&gt;$ hugo version&lt;/code&gt;でバージョンが確認できたらインストールされています。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ hugo version
hugo v0.81.0-59D15C97 windows/amd64 ....  
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;h2 id=&#34;2githubの準備&#34;&gt;2.GitHubの準備
&lt;/h2&gt;&lt;p&gt;　自分のGitHubのページにて、[UserName].github.ioという名前でリポジトリを作ります。リポジトリ名をこうすることでGitHubさんがPages用のリポジトリだと勝手に判断してくれます。なのでリポジトリ名がページのURL&lt;code&gt;https://&amp;lt;UserName&amp;gt;.github.io&lt;/code&gt;になります。あとはこのリポジトリをクローンして取り敢えず環境は完成です。&lt;/p&gt;
&lt;p&gt;　一般的なのはソースコード用のリポジトリを別で作り、ビルド結果だけをPages用のリポジトリにあげる方法らしいのですが、自分はリポジトリが増えるのが嫌だったので、souceブランチをソースコード用、mainブランチをデプロイ用のブランチにしました。&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;h2 id=&#34;3サイトのひな形を作る&#34;&gt;3.サイトのひな形を作る
&lt;/h2&gt;&lt;p&gt;　まずsourceブランチを作り、その下にHUGOのコマンドでファイルを作っていきます。&lt;code&gt;$ hugo new site &amp;lt;フォルダ名&amp;gt;&lt;/code&gt;でHUGOを使う上で最小限のファイルとフォルダを作成できます。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ cd &amp;lt;UserName&amp;gt;.github.io
$ git branch source
$ git checkout source
$ hugo new site blog
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;自分はsourceブランチ直下で作業したかったので、blogフォルダ内の内容をsourceブランチ直下に移動させました(blogフォルダは削除)。&lt;br&gt;
&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;h2 id=&#34;4テーマを導入する&#34;&gt;4.テーマを導入する
&lt;/h2&gt;&lt;p&gt;　&lt;a class=&#34;link&#34; href=&#34;https://themes.gohugo.io/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;HUGO公式のthemeページ&lt;/a&gt;からテーマを選んで、自分のリポジトリに&lt;a class=&#34;link&#34; href=&#34;https://qiita.com/sotarok/items/0d525e568a6088f6f6bb&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;サブモジュール&lt;/a&gt;として追加します。例としてこのブログのテーマ(&lt;a class=&#34;link&#34; href=&#34;https://themes.gohugo.io/hugo-future-imperfect-slim/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Hugo Future Imperfect Slim&lt;/a&gt;)を用います。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ git submodule add https://github.com/pacollins/hugo-future-imperfect-slim.git themes/hugo-future-imperfect-slim
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;サブモジュール化ができたら、themes/hugo-future-imperfect-slim/&lt;strong&gt;exampleSite&lt;/strong&gt; 内のファイルやフォルダをまるっとブランチ直下にコピーします。それと同時に、もともとあったconfig.tomlは消しておきます(configファイルが競合するため)。&lt;br&gt;
&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;h2 id=&#34;5-試運転してみる&#34;&gt;5. 試運転してみる
&lt;/h2&gt;&lt;p&gt;　&lt;code&gt;$ hugo server&lt;/code&gt;でローカルにサーバーをたてて、&lt;a class=&#34;link&#34; href=&#34;http://localhost:1313/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;http://localhost:1313&lt;/a&gt;にアクセスするとサイトの内容を確認できます。ここまでが正しくなされているとテーマのDemoサイトと同じ状態になっているはずです。&lt;br&gt;
　また、&lt;code&gt;$ hugo&lt;/code&gt;でサイトのデータをビルドできます(/publicが生成される)。
&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;h2 id=&#34;6github-actionsの設定&#34;&gt;6.GitHub Actionsの設定
&lt;/h2&gt;&lt;p&gt;　&lt;strong&gt;GitHub Actions&lt;/strong&gt;とは、リポジトリにコミット等があった時にそれを検知して自動的にデプロイとかする機能(?)らしいです(今回の場合)。自分は雰囲気で使っているので詳しくは知りません。&lt;br&gt;
　sourceブランチの下に、.github/workflows/&lt;strong&gt;main.yml&lt;/strong&gt;を作成します。&lt;a class=&#34;link&#34; href=&#34;https://reona.dev/posts/20200331&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Reonaさんのブログ&lt;/a&gt;を参考にしてmain.ymlに記載のあるデプロイ先ブランチとかを編集しました。&lt;/p&gt;
&lt;p&gt;　ここまでやってきたことをまるっとsourceブランチにコミットすると、Actionsが働いてmainブランチにデプロイされ、ページが公開されるはずです。&lt;br&gt;
&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;h2 id=&#34;7-設定を編集する&#34;&gt;7. 設定を編集する
&lt;/h2&gt;&lt;p&gt;　config.tomlを見てみると、設定の項目がズラリとならんでいます。ここでサイトを自分用にするための設定をしていきます(サイトの名前、アイコン、URLなど)。&lt;br&gt;
　ここで、アイコンに設定したい画像等をconfig.tomlから指定するのですが、そういうのは基本 &lt;strong&gt;/static&lt;/strong&gt;に保存して、パスを指定するようです。追加のcssで見た目を変えたい時も、/themesの中には書かず、/layouts/partials内とかに書くようです(細かいところはテーマによって変わるのでテーマのDocumentを読んでね)。&lt;br&gt;
&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;h2 id=&#34;8記事を追加する&#34;&gt;8.記事を追加する
&lt;/h2&gt;&lt;p&gt;　サイトの枠組みが完成したら、あとはサンプルの記事を削除して、自分の記事を追加していきます。&lt;code&gt;$ hugo new &amp;lt;フォルダ名&amp;gt;/&amp;lt;ファイル名&amp;gt;&lt;/code&gt;で新しい記事を追加できます。基本的に記事は全てMarkdown形式で書きます。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;例) $ hugo new content/blog/article_2021-01-01.md  
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;h1 id=&#34;参考サイト&#34;&gt;参考サイト
&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://dev.to/mshr_h/hugo-github-pages-35me&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Hugo+Github Pagesで新しい個人ウェブサイトを作った&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://zenn.dev/nikaera/articles/hugo-github-actions-for-github-pages&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Hugo + GitHub Pages + GitHub Actions で独自ドメインのウェブサイトを構築する&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://reona.dev/posts/20200331&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;GitHub Pages × Hugo で技術ブログを始めた&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        
    </channel>
</rss>
