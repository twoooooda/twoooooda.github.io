[{
    "title": "ラズパイに公開鍵認証でssh接続するまで",
    "date": "",
    "description": "さっき買ってきたRaspberry piに公開鍵認証でssh接続するまでの方法を備忘録としてまとめます。",
    "body": "はじめに 　家に余ってたラズパイをテレビの録画サーバーにしようと思い、部屋の奥から引っ張り出してきたのはいいですが、初期設定もsshの接続設定も何もしてなかったので勉強がてらやってみました、例の如くやらないといけないことが複数サイトに渡って散らばっていたので、備忘録として一通りまとめます。なお、ラズパイのOSはインストール済み, 有線LAN接続なのを前提とし、ラズパイからモニターにはなるべく出力せずに設定することを目指します。\nホストのPCからラズパイにssh接続する 　OSをインストールしたmicroSDカードをラズパイに挿す前に, microSDカードの直下にsshという空のファイル(拡張子も無し)を作っておきます。こうすることでラズパイのGUIを触らずにsshをオンにできます。 　ラズパイに接続して操作するホストのPCのターミナルから、以下のコマンドを叩くだけでssh接続できます(デフォルトユーザーにログインする場合)。 $ ssh pi@raspberrypi.local \nIPアドレスの固定 　インターネットに繋げるたびにIPアドレスが変わると困るので、まずはラズパイのIPアドレスを固定します。ラズパイのIPアドレス固定の前に、ホストのPCのターミナルで以下を実行します。\n$ ipconfig /all \nするとIPの構成が一覧で出てくるので、 デフォルトゲートウェイとDNSサーバーのIPアドレス(192.168.x.OOOみたいなやつ)をメモします。 　以降はssh接続を介してラズパイのコマンドを叩いていきます。まずはラズパイの設定ファイルを開いて編集します。\npi@raspberrypi:~$ sudo nano /etc/dhcpcd.conf \nnanoはviでもいいです(好み)。開いたら、末尾に以下を追加します。\ninterface eth0(無線LANの場合はここをwlan0にする) static ip_address=192.168.x.***/24 static routers=192.168.x.OOO static domain_name_servers=192.168.x.OOO \nstaric ip_adress=にラズパイに割り当てたいIPアドレスを書きます。***の部分は1桁、2桁台は他の危機に割り当てられていることが多いので適当に100～200くらいにするといいらしいです。/24はサブネットマスク長です。 static routers=にデフォルトゲートウェイのIPアドレス、static domain_name_servers=にDNSサーバーのIPアドレスを書きます。編集できたら、保存してラズパイを再起動すれば変更が適用されているはずです。 参考記事 ユーザーの追加, 権限の付与 新しいユーザーの追加 　デフォルトユーザーである「pi」とは別のユーザーを作成し、権限をそちらに移行します。sshを介してラズパイのターミナルにて、\npi@raspberrypi:~$ sudo adduser |newuser| \n|newuser| に任意のユーザー名を指定して実行します。「New password:」と「Retype new password:」へ新規ユーザーのパスワードを指定します。その後くらいにいろいろ設定項目が出てきますが、特に必要がないなら全てEnterで進んでもいいです。 権限の付与 　「pi」ユーザーの権限を新しいユーザーに追加します。まずは「pi」ユーザーの権限を確認するために以下を実行します。\npi@raspberrypi:~$ groups pi \nすると「pi」ユーザーに付与されている権限が一覧で表示されるので、usermodコマンドで新しいユーザーに権限を移します。\npi@raspberrypi:~$ sudo usermod -G pi,adm,dialout,cdrom,sudo,audio,video,plugdev,games,users,input,netdev,spi,i2c,gpio newuser \n「pi」ユーザーのホームフォルダのコピー 　「pi」ユーザーのホームフォルダの内容をnewuserのホームフォルダにコピーします。\npi@raspberrypi:~$ sudo cp -r /home/pi/* /home/newuser \nデフォルトユーザー(pi)の無効化 　ラズパイを起動する度に「pi」ユーザーに勝手にログインされると困るので、「pi」ユーザーへの自動ログインをオフにして、ついでに「pi」ユーザーを無効化します。\npi@raspberrypi:~$ sudo nano /etc/lightdm/lightdm.conf /lightdm/lightdm.confの126行目の先頭に#を入れてコメントアウトします(#autologin-user=pi)。 　次に、newuserでオートログインするようにします。autologin@.serviceを開いて、28行目の「\u0026ndash;autologin pi」を「\u0026ndash;autologin newuser」へ変更します。\npi@raspberrypi:~$ sudo vi /etc/systemd/system/autologin@.service \n　最後に「pi」ユーザーを無効にします。ユーザーのアカウントの有効期限を過去の日付にすることで無効化できます。\npi@raspberrypi:~$ sudo usermod --expiredate 1 pi \n以降は新しく作成したnewuserで作業します。\n参考記事 鍵ペアの生成と送信、設定 鍵の生成と送信 　公開鍵認証とは、パスワードの代わりに公開鍵(ホスト側のPC)と秘密鍵(ラズパイ)のペアで認証する方法です。まずはホストのPCに鍵ペアを生成するディレクトリ及び鍵ペアを作ります。\n$ mkdir ~/.ssh/raspberrypi $ ssh-keygen -t rsa \nすると、鍵の生成場所を聞かれるので、先ほど作ったディレクトリを指定します。 Enter file in which to save the key (/Users/username/raspberrypi/.ssh/id_rsa): \n必要に応じてこの後に聞かれるパスフレーズも入力します。自分は省略しました。これで秘密鍵のid_rsaと公開鍵のid_rsa.pubが生成されます。これらのうちid_rsa.pubをラズパイ側に送ります。\n$ scp ~/.ssh/raspberrypi/id_rsa.pub newuser@raspberrypi:~ \n公開鍵の設定 　ラズパイにパスワード認証でログインし、鍵を管理する.sshを作ります。\nnewuser@raspberrypi:~$ sudo mkdir ~/.ssh \n先ほど送信したid_rsa.pubをauthorized_keysと名前を変更しつつ.sshに移動します。\nnewuser@raspberrypi:~$ sudo mv ~/id_rsa.pub ~/.ssh/authorized_keys \n次に.ssh、authorized_keysのパーミッションを変更します。\nnewuser@raspberrypi:~$ chmod 600 ~/.ssh/authorized_keys newuser@raspberrypi:~$ chmod 700 ~/.ssh \n最後にssh_configを修正します。\nnewuser@raspberrypi:~$ sudo nano /etc/ssh/sshd_config \n以下のような記載の行のコメントアウトを外して編集します。\nAuthorizedKeysFile .ssh/authorized_keys .ssh/authorized_keys2 この時にポート番号の変更や、パスワード認証のオフができます。しかし、公開鍵認証が上手くいってない状態でパスワード認証をオフにしてしまうと、次回からログインできなくなってしまうので慎重に行ってください。最悪OSのインストールし直しになります(私は既に何度かやらかしました)。 最後にラズパイを再起動すると、次回から以下のコマンドで公開鍵認証でログインできるはずです。\n$ ssh -i [秘密鍵ファイル] -p [ポート番号] pi@[Raspberry PiのIPアドレス] (例)ssh -i .ssh/id_rsa -p 22 pi@192.168.0.100 参考記事 ssh configの追加 　この方法で接続してもいいんですが、コマンドが長いので短縮します。 ~/.ssh/configを作り、以下を追記します。\nHost [任意のコマンド名] HostName [ラズパイのIPアドレス] User [ラズパイのユーザーネーム] Port [ラズパイのポート番号] IdentityFile [秘密鍵ファイル] \n今回の例では以下のようになります。\nHost raspi HostName 192.168.1.100 User newuser Port 22 IdentityFile ~/.ssh/id_rsa \nこうすることでssh接続時のコマンドを以下のように大幅に短縮できます。\nssh raspi 参考記事 以上です。ファイル名や環境は各々によって違うのでそこは適宜変更をおねがいします。\n",
    "ref": "/blog/%E3%83%A9%E3%82%BA%E3%83%91%E3%82%A4%E3%81%AEssh%E8%A8%AD%E5%AE%9A/"
  },{
    "title": "HUGOで作ったサイトにアマゾンのアフィリンクを貼る",
    "date": "",
    "description": "HUGOで作ったサイトにアマゾンのリンクを貼る方法の備忘録です。",
    "body": "HUGOの仕様 　静的サイトジェネレータ \u0026ldquo;HUGO\u0026rdquo; は、テーマの制作者がGitHubに上げているリポジトリをサブモジュールとして使うことで自分のサイトにテーマを導入します。ゆえに、テーマのレイアウトに関わるコードを直接書き換えることはできません(ローカルファイルは書き換えられますが)。 しかしHUGOの仕様として、/staticや/layouts以下のフォルダやファイルが優先して読み込まれるというものがあります。 ではどうするか 　当サイトのテーマを例にすると、/themes/hugo-future-imperfect-slim/layouts/partials/site-sidebar.htmlを書き換えたい場合、該当のファイルを/layouts/partials/にコピー＆ペーストすると、そちらの方が先に読み込まれるので結果的に編集して上書きが可能なわけです。 あとはAmazonのアフィリエイトリンクのHTMLコードを生成して、上記のsite-sidebar.htmlに書き込むとちゃんと表示されました。 ",
    "ref": "/blog/hugo%E3%81%A7%E4%BD%9C%E3%81%A3%E3%81%9F%E3%82%B5%E3%82%A4%E3%83%88%E3%81%AB%E3%82%A2%E3%83%9E%E3%82%BE%E3%83%B3%E3%81%AE%E3%82%A2%E3%83%95%E3%82%A3%E3%83%AA%E3%83%B3%E3%82%AF%E3%82%92%E8%B2%BC%E3%82%8B/"
  },{
    "title": "Unityで蚊っぽい動きをするやつを作る",
    "date": "",
    "description": "蚊特有の、あのウザい挙動をするオブジェクトを作ってみました。",
    "body": "はじめに 　少し前にOculus Quest2を購入し、しばらくハンドトラッキングで遊んでいたんですが、急に『手で蚊を潰すVRゲーム』を作りたくなったのでとりあえず蚊っぽい挙動をするナニカを作りました。 1.スクリプト 　やっていることはごく簡単で、数フレームに一回ランダムでRotationの値を変更し、Z方向に常に力を加え続けているだけです。\nusing UnityEngine; public class Move_mosquite : MonoBehaviour { Rigidbody rb; public float freq, speed, power; void Start() { rb = this.GetComponent\u0026lt;Rigidbody\u0026gt;(); } void Update() { rb.velocity = rb.velocity.normalized * speed; //変数speedで速度の設定  rb.AddForce(this.transform.forward * power * Time.deltaTime, ForceMode.Force); //Z方向(forward)に力を加え続ける  if (Random.value \u0026lt; freq) //Rotationを変更する頻度を設定。毎フレームだと頻繁過ぎるので。  { transform.eulerAngles = new Vector3(Random.Range(0, 360), Random.Range(0, 360), Random.Range(0, 360)); } } } \nこのままでは無限にどっかいってしまうので、適当にコライダーをつけるとか、壁に近づくと力を受けるとかにするといいかもしれません。\nなお、当方めちゃくちゃ初心者なのでもっと効率的なやり方や、もっとリアルになるやり方があるかもしれませんのであしからず\u0026hellip;.\n完成例   ",
    "ref": "/blog/unity%E3%81%A7%E8%9A%8A%E3%82%92%E4%BD%9C%E3%82%8B/"
  },{
    "title": "静的サイトジェネレータ”HUGO”で個人ブログをつくり、GitHub Pagesで公開する",
    "date": "",
    "description": "当ブログにも使われている便利ツールHUGOの使い方を、詰まった点も含めて簡単にまとめてみました。",
    "body": "はじめに 　自分は最近、当ブログを静的サイトジェネレータであるHUGOを用いて作成しました。HUGO自体はわかってしまえばごく簡単に導入、使用できるんですが、いかんせん自分がweb系、GitHubに関して無知であったためハマりポイントをことごとく踏み抜いていき、結局公開までかなり時間がかかってしまいました。なので覚えているうちに使い方や参考サイトをまとめようと思います。\n　ちなみにデプロイ方法等は我流でやっていますが、いろんな方法があるみたいなのであくまで一例としてお読み頂けたら光栄です。\n1.HUGOのインストール 　基本的には、HUGOの公式サイトにあるQuick Startに従ってHUGOをインストールしていきます。自分はWindows環境なので、Chocolateyというパッケージマネージャを使ってインストールしました。以降はコマンドプロンプト上で、$ choco install hugo -confirmを実行するとHUGOがインストールされるはずです。$ hugo versionでバージョンが確認できたらインストールされています。\n$ hugo version hugo v0.81.0-59D15C97 windows/amd64 ....  2.GitHubの準備 　自分のGitHubのページにて、.github.ioという名前でリポジトリを作ります。リポジトリ名をこうすることでGitHubさんがPages用のリポジトリだと勝手に判断してくれます。なのでリポジトリ名がページのURLhttp://\u0026lt;UserName\u0026gt;.github.ioになります。あとはこのリポジトリをクローンして取り敢えず環境は完成です。\n　一般的なのはソースコード用のリポジトリを別で作り、ビルド結果だけをPages用のリポジトリにあげる方法らしいのですが、自分はリポジトリが増えるのが嫌だったので、souceブランチをソースコード用、mainブランチをデプロイ用のブランチにしました。\n3.サイトのひな形を作る 　まずsourceブランチを作り、その下にHUGOのコマンドでファイルを作っていきます。$ hugo new site \u0026lt;フォルダ名\u0026gt;でHUGOを使う上で最小限のファイルとフォルダを作成できます。\n$ cd \u0026lt;UserName\u0026gt;.github.io $ git branch source $ git checkout source $ hugo new site blog  自分はsourceブランチ直下で作業したかったので、blogフォルダ内の内容をsourceブランチ直下に移動させました(blogフォルダは削除)。\n4.テーマを導入する 　HUGO公式のthemeページからテーマを選んで、自分のリポジトリにサブモジュールとして追加します。例としてこのブログのテーマ(Hugo Future Imperfect Slim)を用います。\n$ git submodule add https://github.com/pacollins/hugo-future-imperfect-slim.git themes/hugo-future-imperfect-slim  サブモジュール化ができたら、themes/hugo-future-imperfect-slim/exampleSite 内のファイルやフォルダをまるっとブランチ直下にコピーします。それと同時に、もともとあったconfig.tomlは消しておきます(configファイルが競合するため)。\n5. 試運転してみる 　$ hugo serverでローカルにサーバーをたてて、http://localhost:1313にアクセスするとサイトの内容を確認できます。ここまでが正しくなされているとテーマのDemoサイトと同じ状態になっているはずです。\nまた、$ hugoでサイトのデータをビルドできます(/publicが生成される)。 6.GitHub Actionsの設定 　GitHub Actionsとは、リポジトリにコミット等があった時にそれを検知して自動的にデプロイとかする機能(?)らしいです(今回の場合)。自分は雰囲気で使っているので詳しくは知りません。\nsourceブランチの下に、.github/workflows/main.ymlを作成します。Reonaさんのブログを参考にしてmain.ymlに記載のあるデプロイ先ブランチとかを編集しました。\n　ここまでやってきたことをまるっとsourceブランチにコミットすると、Actionsが働いてmainブランチにデプロイされ、ページが公開されるはずです。\n7. 設定を編集する 　config.tomlを見てみると、設定の項目がズラリとならんでいます。ここでサイトを自分用にするための設定をしていきます(サイトの名前、アイコン、URLなど)。\nここで、アイコンに設定したい画像等をconfig.tomlから指定するのですが、そういうのは基本 /staticに保存して、パスを指定するようです。追加のcssで見た目を変えたい時も、/themesの中には書かず、/layouts/partials内とかに書くようです(細かいところはテーマによって変わるのでテーマのDocumentを読んでね)。\n8.記事を追加する 　サイトの枠組みが完成したら、あとはサンプルの記事を削除して、自分の記事を追加していきます。$ hugo new \u0026lt;フォルダ名\u0026gt;/\u0026lt;ファイル名\u0026gt;で新しい記事を追加できます。基本的に記事は全てMarkdown形式で書きます。\n例) $ hugo new content/blog/article_2021-01-01.md  参考サイト  Hugo+Github Pagesで新しい個人ウェブサイトを作った Hugo + GitHub Pages + GitHub Actions で独自ドメインのウェブサイトを構築する GitHub Pages × Hugo で技術ブログを始めた  ",
    "ref": "/blog/hugo%E3%81%AE%E4%BD%BF%E3%81%84%E6%96%B9/"
  },{
    "title": "About Me",
    "date": "",
    "description": "私について",
    "body": "いっとりうむといいます。兵庫の大学の工学部に通っているオタクです。大学では主に電気関係の勉強をしており, サークルの運営もしています。VRやMRをはじめとした最新テクノロジー, 3Dプリンター等を用いたモノづくり, 映画やマンガが好きです。\n",
    "ref": "/about/"
  },{
    "title": "Hello, world！",
    "date": "",
    "description": "ようやく投稿ができる....",
    "body": "苦悩の末 　最近急にはてなブログやnoteとは違う個人ブログが欲しくなり、静的サイトジェネレーターであるHUGOと、勉強がてらGitHub Pages、Actionsを使ってブログを作ってみました。実はサイト作成にあたり数日間に渡り大変苦労したのですが、その話はHUGO等の使い方とともにまとめようと思います。\nではまた。\n",
    "ref": "/blog/hello/"
  },{
    "title": "Contact",
    "date": "",
    "description": "",
    "body": "送信できない場合は, TwitterのDMにてお願いします.\n",
    "ref": "/contact/"
  }]
