[{
    "title": "About Me",
    "date": "",
    "description": "私について",
    "body": "いっとりうむといいます。兵庫の大学の工学部に通っているオタクです。大学では主に電気関係の勉強をしており, サークルの運営もしています。VRやMRをはじめとした最新テクノロジー, 3Dプリンター等を用いたモノづくり, 映画やマンガが好きです。\n",
    "ref": "/about/"
  },{
    "title": "Hello, world！",
    "date": "",
    "description": "ようやく投稿ができる....",
    "body": "苦悩の末 　最近急にはてなブログやnoteとは違う個人ブログが欲しくなり、静的サイトジェネレーターであるHUGOと、勉強がてらGitHub Pages、Actionsを使ってブログを作ってみました。実はサイト作成にあたり数日間に渡り大変苦労したのですが、その話はHUGO等の使い方とともにまとめようと思います。\nではまた。\n",
    "ref": "/blog/hello/"
  },{
    "title": "静的サイトジェネレータ”HUGO”で個人ブログをつくり、GitHub Pagesで公開する",
    "date": "",
    "description": "当ブログにも使われている便利ツールHUGOの使い方を、詰まった点も含めて簡単にまとめてみました。",
    "body": "はじめに 　自分は最近、当ブログを静的サイトジェネレータであるHUGOを用いて作成しました。HUGO自体はわかってしまえばごく簡単に導入、使用できるんですが、いかんせん自分がweb系、GitHubに関して無知であったためハマりポイントをことごとく踏み抜いていき、結局公開までかなり時間がかかってしまいました。なので覚えているうちに使い方や参考サイトをまとめようと思います。\n　ちなみにデプロイ方法等は我流でやっていますが、いろんな方法があるみたいなのであくまで一例としてお読み頂けたら光栄です。\n1.HUGOのインストール 　基本的には、HUGOの公式サイトにあるQuick Startに従ってHUGOをインストールしていきます。自分はWindows環境なので、Chocolateyというパッケージマネージャを使ってインストールしました。以降はコマンドプロンプト上で、$ choco install hugo -confirmを実行するとHUGOがインストールされるはずです。$ hugo versionでバージョンが確認できたらインストールされています。\n$ hugo version hugo v0.81.0-59D15C97 windows/amd64 ....  2.GitHubの準備 　自分のGitHubのページにて、.github.ioという名前でリポジトリを作ります。リポジトリ名をこうすることでGitHubさんがPages用のリポジトリだと勝手に判断してくれます。なのでリポジトリ名がページのURLhttp://\u0026lt;UserName\u0026gt;.github.ioになります。あとはこのリポジトリをクローンして取り敢えず環境は完成です。\n　一般的なのはソースコード用のリポジトリを別で作り、ビルド結果だけをPages用のリポジトリ方法らしいのですが、自分はリポジトリが増えるのが嫌だったので、souceブランチをソースコード用、mainブランチをデプロイ用のブランチにしました。\n3.サイトのひな形を作る 　まずsourceブランチを作り、その下にHUGOのコマンドでファイルを作っていきます。$ hugo new site \u0026lt;フォルダ名\u0026gt;でHUGOを使う上で最小限のファイルとフォルダを作成できます。\n$ cd \u0026lt;UserName\u0026gt;.github.io $ git branch source $ git checkout source $ hugo new site blog  自分はsourceブランチ直下で作業したかったので、blogフォルダ内の内容をsourceブランチ直下に移動させました(blogフォルダは削除)。\n4.テーマを導入する 　HUGO公式のthemeページからテーマを選んで、自分のリポジトリにサブモジュールとして追加します。例としてこのブログのテーマ(Hugo Future Imperfect Slim)を用います。\n$ git submodule add https://github.com/pacollins/hugo-future-imperfect-slim.git themes/hugo-future-imperfect-slim  サブモジュール化ができたら、themes/hugo-future-imperfect-slim/exampleSite 内のファイルやフォルダをまるっとブランチ直下にコピーします。それと同時に、もともとあったconfig.tomlは消しておきます(configファイルが競合するため)。\n5. 試運転してみる 　$ hugo serverでローカルにサーバーをたてて、http://localhost:1313にアクセスするとサイトの内容を確認できます。ここまでが正しくなされているとテーマのDemoサイトと同じ状態になっているはずです。\nまた、$ hugoでサイトのデータをビルドできます(/publicが生成される)。 6.GitHub Actionsの設定 　GitHub Actionsとは、リポジトリにコミット等があった時にそれを検知して自動的にデプロイとかする機能(?)らしいです(今回の場合)。自分は雰囲気で使っているので詳しくは知りません。\nsourceブランチの下に、.github/workflows/main.ymlを作成します。Reonaさんのブログを参考にしてmain.ymlに記載のあるデプロイ先ブランチとかを編集しました。\n　ここまでやってきたことをまるっとsourceブランチにコミットすると、Actionsが働いてmainブランチにデプロイされ、ページが公開されるはずです。\n7. 設定を編集する 　config.tomlを見てみると、設定の項目がズラリとならんでいます。ここでサイトを自分用にするための設定をしていきます(サイトの名前、アイコン、URLなど)。\nここで、アイコンに設定したい画像等をconfig.tomlから指定するのですが、そういうのは基本 /staticに保存して、パスを指定するようです。追加のcssで見た目を変えたい時も、/themesの中には書かず、/layouts/partials内とかに書くようです(細かいところはテーマによって変わるのでテーマのDocumentを読んでね)。\n8.記事を追加する 　サイトの枠組みが完成したら、あとはサンプルの記事を削除して、自分の記事を追加していきます。$ hugo new \u0026lt;フォルダ名\u0026gt;/\u0026lt;ファイル名\u0026gt;で新しい記事を追加できます。基本的に記事は全てMarkdown形式で書きます。\n例) $ hugo new content/blog/article_2021-01-01.md  参考サイト  Hugo+Github Pagesで新しい個人ウェブサイトを作った Hugo + GitHub Pages + GitHub Actions で独自ドメインのウェブサイトを構築する GitHub Pages × Hugo で技術ブログを始めた  ",
    "ref": "/blog/hugo%E3%81%AE%E4%BD%BF%E3%81%84%E6%96%B9/"
  },{
    "title": "Contact",
    "date": "",
    "description": "",
    "body": "",
    "ref": "/contact/"
  }]
