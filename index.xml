<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>いっとりうむの足跡</title>
        <link>https://twoooooda.github.io/</link>
        <description>Recent content on いっとりうむの足跡</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>ja-jp</language>
        <lastBuildDate>Mon, 03 Jan 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://twoooooda.github.io/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>私の自作キーボード奮闘記</title>
        <link>https://twoooooda.github.io/p/%E7%A7%81%E3%81%AE%E8%87%AA%E4%BD%9C%E3%82%AD%E3%83%BC%E3%83%9C%E3%83%BC%E3%83%89%E5%A5%AE%E9%97%98%E8%A8%98/</link>
        <pubDate>Mon, 03 Jan 2022 00:00:00 +0000</pubDate>
        
        <guid>https://twoooooda.github.io/p/%E7%A7%81%E3%81%AE%E8%87%AA%E4%BD%9C%E3%82%AD%E3%83%BC%E3%83%9C%E3%83%BC%E3%83%89%E5%A5%AE%E9%97%98%E8%A8%98/</guid>
        <description>&lt;img src="https://twoooooda.github.io/p/%E7%A7%81%E3%81%AE%E8%87%AA%E4%BD%9C%E3%82%AD%E3%83%BC%E3%83%9C%E3%83%BC%E3%83%89%E5%A5%AE%E9%97%98%E8%A8%98/IMG_4085.JPEG" alt="Featured image of post 私の自作キーボード奮闘記" /&gt;&lt;p&gt;しばらく前から&lt;strong&gt;自作キーボード&lt;/strong&gt;の沼というものに興味があり、年が明けたら入るお年玉をアテに思い切って作ってみることにしました。&lt;/p&gt;
&lt;h2 id=&#34;用いたパーツ&#34;&gt;用いたパーツ&lt;/h2&gt;
&lt;h3 id=&#34;pcbケース&#34;&gt;PCB、ケース&lt;/h3&gt;
&lt;p&gt;　ケース、基板、プレート等がセットになっている&lt;a class=&#34;link&#34; href=&#34;https://ja.aliexpress.com/item/1005002964011779.html?spm=a2g0o.9042311.0.0.56ca4c4dMvOJNG&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Tom980&lt;/a&gt;というコンパクトなフルサイズキーボード自作キット(98キー)を買いました。フルカラーLEDつき、ホットスワップ方式ではんだ付けがいらないというのも高得点です。安価ながらなかなかいいキットだと思います。アリエクスプレスで買いました。&lt;/p&gt;
&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 133; 
			flex-basis: 320px&#34;
	&gt;
	&lt;a href=&#34;https://twoooooda.github.io/p/%E7%A7%81%E3%81%AE%E8%87%AA%E4%BD%9C%E3%82%AD%E3%83%BC%E3%83%9C%E3%83%BC%E3%83%89%E5%A5%AE%E9%97%98%E8%A8%98/IMG_4072.JPEG&#34; data-size=&#34;2048x1536&#34;&gt;
		&lt;img src=&#34;https://twoooooda.github.io/p/%E7%A7%81%E3%81%AE%E8%87%AA%E4%BD%9C%E3%82%AD%E3%83%BC%E3%83%9C%E3%83%BC%E3%83%89%E5%A5%AE%E9%97%98%E8%A8%98/IMG_4072.JPEG&#34;
			width=&#34;2048&#34;
			height=&#34;1536&#34;
			srcset=&#34;https://twoooooda.github.io/p/%E7%A7%81%E3%81%AE%E8%87%AA%E4%BD%9C%E3%82%AD%E3%83%BC%E3%83%9C%E3%83%BC%E3%83%89%E5%A5%AE%E9%97%98%E8%A8%98/IMG_4072_huba627ce408dee3a7f08411c7eee2a797_1130353_480x0_resize_q75_box.JPEG 480w, https://twoooooda.github.io/p/%E7%A7%81%E3%81%AE%E8%87%AA%E4%BD%9C%E3%82%AD%E3%83%BC%E3%83%9C%E3%83%BC%E3%83%89%E5%A5%AE%E9%97%98%E8%A8%98/IMG_4072_huba627ce408dee3a7f08411c7eee2a797_1130353_1024x0_resize_q75_box.JPEG 1024w&#34;
			loading=&#34;lazy&#34;
			alt=&#34;本体&#34;&gt;
	&lt;/a&gt;
	
	&lt;figcaption&gt;本体&lt;/figcaption&gt;
	
&lt;/figure&gt; &lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 75; 
			flex-basis: 180px&#34;
	&gt;
	&lt;a href=&#34;https://twoooooda.github.io/p/%E7%A7%81%E3%81%AE%E8%87%AA%E4%BD%9C%E3%82%AD%E3%83%BC%E3%83%9C%E3%83%BC%E3%83%89%E5%A5%AE%E9%97%98%E8%A8%98/IMG_4076.JPEG&#34; data-size=&#34;1536x2048&#34;&gt;
		&lt;img src=&#34;https://twoooooda.github.io/p/%E7%A7%81%E3%81%AE%E8%87%AA%E4%BD%9C%E3%82%AD%E3%83%BC%E3%83%9C%E3%83%BC%E3%83%89%E5%A5%AE%E9%97%98%E8%A8%98/IMG_4076.JPEG&#34;
			width=&#34;1536&#34;
			height=&#34;2048&#34;
			srcset=&#34;https://twoooooda.github.io/p/%E7%A7%81%E3%81%AE%E8%87%AA%E4%BD%9C%E3%82%AD%E3%83%BC%E3%83%9C%E3%83%BC%E3%83%89%E5%A5%AE%E9%97%98%E8%A8%98/IMG_4076_hu8cdceec2299e58daaebcc1ed3141dd50_1348717_480x0_resize_q75_box.JPEG 480w, https://twoooooda.github.io/p/%E7%A7%81%E3%81%AE%E8%87%AA%E4%BD%9C%E3%82%AD%E3%83%BC%E3%83%9C%E3%83%BC%E3%83%89%E5%A5%AE%E9%97%98%E8%A8%98/IMG_4076_hu8cdceec2299e58daaebcc1ed3141dd50_1348717_1024x0_resize_q75_box.JPEG 1024w&#34;
			loading=&#34;lazy&#34;
			alt=&#34;付属品(見切れてる方は普通のUSB端子です)&#34;&gt;
	&lt;/a&gt;
	
	&lt;figcaption&gt;付属品(見切れてる方は普通のUSB端子です)&lt;/figcaption&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;しかしこのキーボードキット、汎用のファームウェアであるQMKファームウェアに対応していない代わりに独自のファームウェアがあり、そちらにのみ対応しているようです。&lt;a class=&#34;link&#34; href=&#34;https://www.reddit.com/r/MechanicalKeyboards/comments/ox075j/holy_tom980_wianxp_980_review/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;redditのレビュー&lt;/a&gt;に落ちていました。が、レビュー曰く、このファームウェアは &amp;ldquo;&lt;strong&gt;almost complete garbage(ほぼ完全にゴミ)&lt;/strong&gt;&amp;rdquo; らしく、実際に使ってみても確かにゴミでした。具体的には、LEDの発光パターンや色は変えられるけど、特定のキーに別の役割を当てたり、マクロを割り当てたりなどがほぼ完全に機能していません。さらに(これは私だけの環境かもしれませんが)なぜか&lt;strong&gt;ESCキーが右Winキーになって&lt;/strong&gt;しまっていたりでなかなかよくわからん挙動をしています(これはPC内の別のソフトウェアでなんとかした)。それ以外は概ね満足です。&lt;/p&gt;
&lt;h3 id=&#34;キースイッチ&#34;&gt;キースイッチ&lt;/h3&gt;
&lt;p&gt;　キースイッチはいろいろ考えた結果、界隈では有名らしいHoly Pandaという高級タクタイルキースイッチの&lt;strong&gt;廉価版&lt;/strong&gt;である&lt;a class=&#34;link&#34; href=&#34;https://talpkeyboard.net/items/5fd61629b00aa37e7271319d&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;FEKER like Holy Panda&lt;/a&gt;を採用しました。リンクから飛べるTALP KEYBORDという国内の自作キーボード専門店から購入しました。&lt;/p&gt;
&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 133; 
			flex-basis: 320px&#34;
	&gt;
	&lt;a href=&#34;https://twoooooda.github.io/p/%E7%A7%81%E3%81%AE%E8%87%AA%E4%BD%9C%E3%82%AD%E3%83%BC%E3%83%9C%E3%83%BC%E3%83%89%E5%A5%AE%E9%97%98%E8%A8%98/IMG_4021.JPEG&#34; data-size=&#34;2048x1536&#34;&gt;
		&lt;img src=&#34;https://twoooooda.github.io/p/%E7%A7%81%E3%81%AE%E8%87%AA%E4%BD%9C%E3%82%AD%E3%83%BC%E3%83%9C%E3%83%BC%E3%83%89%E5%A5%AE%E9%97%98%E8%A8%98/IMG_4021.JPEG&#34;
			width=&#34;2048&#34;
			height=&#34;1536&#34;
			srcset=&#34;https://twoooooda.github.io/p/%E7%A7%81%E3%81%AE%E8%87%AA%E4%BD%9C%E3%82%AD%E3%83%BC%E3%83%9C%E3%83%BC%E3%83%89%E5%A5%AE%E9%97%98%E8%A8%98/IMG_4021_hu83defd51203ed6c0d3eaf0e27b9d29cc_992717_480x0_resize_q75_box.JPEG 480w, https://twoooooda.github.io/p/%E7%A7%81%E3%81%AE%E8%87%AA%E4%BD%9C%E3%82%AD%E3%83%BC%E3%83%9C%E3%83%BC%E3%83%89%E5%A5%AE%E9%97%98%E8%A8%98/IMG_4021_hu83defd51203ed6c0d3eaf0e27b9d29cc_992717_1024x0_resize_q75_box.JPEG 1024w&#34;
			loading=&#34;lazy&#34;
			alt=&#34;100個買った&#34;&gt;
	&lt;/a&gt;
	
	&lt;figcaption&gt;100個買った&lt;/figcaption&gt;
	
&lt;/figure&gt; &lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 177; 
			flex-basis: 426px&#34;
	&gt;
	&lt;a href=&#34;https://twoooooda.github.io/p/%E7%A7%81%E3%81%AE%E8%87%AA%E4%BD%9C%E3%82%AD%E3%83%BC%E3%83%9C%E3%83%BC%E3%83%89%E5%A5%AE%E9%97%98%E8%A8%98/IMG_4022.JPG&#34; data-size=&#34;3520x1980&#34;&gt;
		&lt;img src=&#34;https://twoooooda.github.io/p/%E7%A7%81%E3%81%AE%E8%87%AA%E4%BD%9C%E3%82%AD%E3%83%BC%E3%83%9C%E3%83%BC%E3%83%89%E5%A5%AE%E9%97%98%E8%A8%98/IMG_4022.JPG&#34;
			width=&#34;3520&#34;
			height=&#34;1980&#34;
			srcset=&#34;https://twoooooda.github.io/p/%E7%A7%81%E3%81%AE%E8%87%AA%E4%BD%9C%E3%82%AD%E3%83%BC%E3%83%9C%E3%83%BC%E3%83%89%E5%A5%AE%E9%97%98%E8%A8%98/IMG_4022_huc04e1bec12b62420dbf200ee50154676_1436636_480x0_resize_q75_box.JPG 480w, https://twoooooda.github.io/p/%E7%A7%81%E3%81%AE%E8%87%AA%E4%BD%9C%E3%82%AD%E3%83%BC%E3%83%9C%E3%83%BC%E3%83%89%E5%A5%AE%E9%97%98%E8%A8%98/IMG_4022_huc04e1bec12b62420dbf200ee50154676_1436636_1024x0_resize_q75_box.JPG 1024w&#34;
			loading=&#34;lazy&#34;
			alt=&#34;形状はCherry MX準拠&#34;&gt;
	&lt;/a&gt;
	
	&lt;figcaption&gt;形状はCherry MX準拠&lt;/figcaption&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;押下圧は公称で67gとなっており、少々重めです。分類はタクタイルとなっており、心地よいタイピング音とサクサク感のある押し心地でかなり好印象です。多少の個体差はあるものの買った100個すべてのスイッチがきちんと動作しており、品質も問題なしでした。TALP KEYBORDさんありがとうございました。&lt;/p&gt;
&lt;h3 id=&#34;キーキャップ&#34;&gt;キーキャップ&lt;/h3&gt;
&lt;p&gt;　キーキャップは、アリエクスプレスで見つけたこの&lt;a class=&#34;link&#34; href=&#34;https://ja.aliexpress.com/item/1005001622318975.html?spm=a2g0o.9042311.0.0.56ca4c4dMvOJNG&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;可愛いキーキャップ&lt;/a&gt;をほぼ即決で採用しました。全体的にデザインがめちゃくちゃ好みで、キャップの種類も豊富で実物のクオリティもそれなりに高く満足しているのですが、届いたパッケージにはラベルも何もなく、ストアページも何か後ろめたいことがありそうな感じなので、まぁおそらく正規品ではないのでしょう。クリプトンフューチャーメディア等の初音ミク公式から発売されたらそちらに買い換えようと思います。
&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 133; 
			flex-basis: 320px&#34;
	&gt;
	&lt;a href=&#34;https://twoooooda.github.io/p/%E7%A7%81%E3%81%AE%E8%87%AA%E4%BD%9C%E3%82%AD%E3%83%BC%E3%83%9C%E3%83%BC%E3%83%89%E5%A5%AE%E9%97%98%E8%A8%98/IMG_4086.JPEG&#34; data-size=&#34;2048x1536&#34;&gt;
		&lt;img src=&#34;https://twoooooda.github.io/p/%E7%A7%81%E3%81%AE%E8%87%AA%E4%BD%9C%E3%82%AD%E3%83%BC%E3%83%9C%E3%83%BC%E3%83%89%E5%A5%AE%E9%97%98%E8%A8%98/IMG_4086.JPEG&#34;
			width=&#34;2048&#34;
			height=&#34;1536&#34;
			srcset=&#34;https://twoooooda.github.io/p/%E7%A7%81%E3%81%AE%E8%87%AA%E4%BD%9C%E3%82%AD%E3%83%BC%E3%83%9C%E3%83%BC%E3%83%89%E5%A5%AE%E9%97%98%E8%A8%98/IMG_4086_hu446c6d2ece216e9b8156f95aa97eb6e0_1089320_480x0_resize_q75_box.JPEG 480w, https://twoooooda.github.io/p/%E7%A7%81%E3%81%AE%E8%87%AA%E4%BD%9C%E3%82%AD%E3%83%BC%E3%83%9C%E3%83%BC%E3%83%89%E5%A5%AE%E9%97%98%E8%A8%98/IMG_4086_hu446c6d2ece216e9b8156f95aa97eb6e0_1089320_1024x0_resize_q75_box.JPEG 1024w&#34;
			loading=&#34;lazy&#34;
			alt=&#34;可愛い～&#34;&gt;
	&lt;/a&gt;
	
	&lt;figcaption&gt;可愛い～&lt;/figcaption&gt;
	
&lt;/figure&gt; &lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 75; 
			flex-basis: 180px&#34;
	&gt;
	&lt;a href=&#34;https://twoooooda.github.io/p/%E7%A7%81%E3%81%AE%E8%87%AA%E4%BD%9C%E3%82%AD%E3%83%BC%E3%83%9C%E3%83%BC%E3%83%89%E5%A5%AE%E9%97%98%E8%A8%98/IMG_4090.jpeg&#34; data-size=&#34;1536x2048&#34;&gt;
		&lt;img src=&#34;https://twoooooda.github.io/p/%E7%A7%81%E3%81%AE%E8%87%AA%E4%BD%9C%E3%82%AD%E3%83%BC%E3%83%9C%E3%83%BC%E3%83%89%E5%A5%AE%E9%97%98%E8%A8%98/IMG_4090.jpeg&#34;
			width=&#34;1536&#34;
			height=&#34;2048&#34;
			srcset=&#34;https://twoooooda.github.io/p/%E7%A7%81%E3%81%AE%E8%87%AA%E4%BD%9C%E3%82%AD%E3%83%BC%E3%83%9C%E3%83%BC%E3%83%89%E5%A5%AE%E9%97%98%E8%A8%98/IMG_4090_huc2513fb94ceb53f4891d4a1cf9205db1_990682_480x0_resize_q75_box.jpeg 480w, https://twoooooda.github.io/p/%E7%A7%81%E3%81%AE%E8%87%AA%E4%BD%9C%E3%82%AD%E3%83%BC%E3%83%9C%E3%83%BC%E3%83%89%E5%A5%AE%E9%97%98%E8%A8%98/IMG_4090_huc2513fb94ceb53f4891d4a1cf9205db1_990682_1024x0_resize_q75_box.jpeg 1024w&#34;
			loading=&#34;lazy&#34;
			alt=&#34;見てのとおり、パッケージには何もなし&#34;&gt;
	&lt;/a&gt;
	
	&lt;figcaption&gt;見てのとおり、パッケージには何もなし&lt;/figcaption&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&#34;その他に揃えたもの&#34;&gt;その他に揃えたもの&lt;/h3&gt;
&lt;p&gt;　今回はlubeという、キースイッチの内部の擦れる部分にグリスを塗って音や打ち心地を改善する作業にも挑戦したかったので、それ用のツールもいくつか揃えました。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;スイッチを分解するための&lt;strong&gt;キースイッチオープナー&lt;/strong&gt;(&lt;a class=&#34;link&#34; href=&#34;https://talpkeyboard.net/items/5ffc48fd8a45725bc56a391a&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;TALP KEYBORD&lt;/a&gt;さんでスイッチと一緒に買った)&lt;/li&gt;
&lt;li&gt;キースイッチ内部に塗るグリス &amp;ldquo;&lt;strong&gt;Tribosys 3203&lt;/strong&gt;&amp;rdquo; (&lt;a class=&#34;link&#34; href=&#34;https://shop.yushakobo.jp/collections/accessory/products/lubricants&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;詳しく&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;lubeするパーツを置いておける&lt;strong&gt;lubeステーション&lt;/strong&gt;(3Dプリンターで出力した。&lt;a class=&#34;link&#34; href=&#34;https://www.thingiverse.com/thing:4920600&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;使ったモデル&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;100均で買った細い筆&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 133; 
			flex-basis: 320px&#34;
	&gt;
	&lt;a href=&#34;https://twoooooda.github.io/p/%E7%A7%81%E3%81%AE%E8%87%AA%E4%BD%9C%E3%82%AD%E3%83%BC%E3%83%9C%E3%83%BC%E3%83%89%E5%A5%AE%E9%97%98%E8%A8%98/IMG_4066.JPEG&#34; data-size=&#34;2048x1536&#34;&gt;
		&lt;img src=&#34;https://twoooooda.github.io/p/%E7%A7%81%E3%81%AE%E8%87%AA%E4%BD%9C%E3%82%AD%E3%83%BC%E3%83%9C%E3%83%BC%E3%83%89%E5%A5%AE%E9%97%98%E8%A8%98/IMG_4066.JPEG&#34;
			width=&#34;2048&#34;
			height=&#34;1536&#34;
			srcset=&#34;https://twoooooda.github.io/p/%E7%A7%81%E3%81%AE%E8%87%AA%E4%BD%9C%E3%82%AD%E3%83%BC%E3%83%9C%E3%83%BC%E3%83%89%E5%A5%AE%E9%97%98%E8%A8%98/IMG_4066_hu0d5ad7e4cfcd5b0f393d1495cc47a9f5_1239536_480x0_resize_q75_box.JPEG 480w, https://twoooooda.github.io/p/%E7%A7%81%E3%81%AE%E8%87%AA%E4%BD%9C%E3%82%AD%E3%83%BC%E3%83%9C%E3%83%BC%E3%83%89%E5%A5%AE%E9%97%98%E8%A8%98/IMG_4066_hu0d5ad7e4cfcd5b0f393d1495cc47a9f5_1239536_1024x0_resize_q75_box.JPEG 1024w&#34;
			loading=&#34;lazy&#34;
			alt=&#34;スイッチオープナー&#34;&gt;
	&lt;/a&gt;
	
	&lt;figcaption&gt;スイッチオープナー&lt;/figcaption&gt;
	
&lt;/figure&gt; &lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 133; 
			flex-basis: 320px&#34;
	&gt;
	&lt;a href=&#34;https://twoooooda.github.io/p/%E7%A7%81%E3%81%AE%E8%87%AA%E4%BD%9C%E3%82%AD%E3%83%BC%E3%83%9C%E3%83%BC%E3%83%89%E5%A5%AE%E9%97%98%E8%A8%98/IMG_4068.JPEG&#34; data-size=&#34;2048x1536&#34;&gt;
		&lt;img src=&#34;https://twoooooda.github.io/p/%E7%A7%81%E3%81%AE%E8%87%AA%E4%BD%9C%E3%82%AD%E3%83%BC%E3%83%9C%E3%83%BC%E3%83%89%E5%A5%AE%E9%97%98%E8%A8%98/IMG_4068.JPEG&#34;
			width=&#34;2048&#34;
			height=&#34;1536&#34;
			srcset=&#34;https://twoooooda.github.io/p/%E7%A7%81%E3%81%AE%E8%87%AA%E4%BD%9C%E3%82%AD%E3%83%BC%E3%83%9C%E3%83%BC%E3%83%89%E5%A5%AE%E9%97%98%E8%A8%98/IMG_4068_hu48e024ec4811925f920df2b2b2001ff3_1133670_480x0_resize_q75_box.JPEG 480w, https://twoooooda.github.io/p/%E7%A7%81%E3%81%AE%E8%87%AA%E4%BD%9C%E3%82%AD%E3%83%BC%E3%83%9C%E3%83%BC%E3%83%89%E5%A5%AE%E9%97%98%E8%A8%98/IMG_4068_hu48e024ec4811925f920df2b2b2001ff3_1133670_1024x0_resize_q75_box.JPEG 1024w&#34;
			loading=&#34;lazy&#34;
			alt=&#34;グリス&#34;&gt;
	&lt;/a&gt;
	
	&lt;figcaption&gt;グリス&lt;/figcaption&gt;
	
&lt;/figure&gt;
&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 133; 
			flex-basis: 320px&#34;
	&gt;
	&lt;a href=&#34;https://twoooooda.github.io/p/%E7%A7%81%E3%81%AE%E8%87%AA%E4%BD%9C%E3%82%AD%E3%83%BC%E3%83%9C%E3%83%BC%E3%83%89%E5%A5%AE%E9%97%98%E8%A8%98/IMG_4067.JPEG&#34; data-size=&#34;2048x1536&#34;&gt;
		&lt;img src=&#34;https://twoooooda.github.io/p/%E7%A7%81%E3%81%AE%E8%87%AA%E4%BD%9C%E3%82%AD%E3%83%BC%E3%83%9C%E3%83%BC%E3%83%89%E5%A5%AE%E9%97%98%E8%A8%98/IMG_4067.JPEG&#34;
			width=&#34;2048&#34;
			height=&#34;1536&#34;
			srcset=&#34;https://twoooooda.github.io/p/%E7%A7%81%E3%81%AE%E8%87%AA%E4%BD%9C%E3%82%AD%E3%83%BC%E3%83%9C%E3%83%BC%E3%83%89%E5%A5%AE%E9%97%98%E8%A8%98/IMG_4067_hu16aba72b8b4a121185d7856a1a5b531e_1142744_480x0_resize_q75_box.JPEG 480w, https://twoooooda.github.io/p/%E7%A7%81%E3%81%AE%E8%87%AA%E4%BD%9C%E3%82%AD%E3%83%BC%E3%83%9C%E3%83%BC%E3%83%89%E5%A5%AE%E9%97%98%E8%A8%98/IMG_4067_hu16aba72b8b4a121185d7856a1a5b531e_1142744_1024x0_resize_q75_box.JPEG 1024w&#34;
			loading=&#34;lazy&#34;
			alt=&#34;lubeステーション&#34;&gt;
	&lt;/a&gt;
	
	&lt;figcaption&gt;lubeステーション&lt;/figcaption&gt;
	
&lt;/figure&gt; &lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 133; 
			flex-basis: 320px&#34;
	&gt;
	&lt;a href=&#34;https://twoooooda.github.io/p/%E7%A7%81%E3%81%AE%E8%87%AA%E4%BD%9C%E3%82%AD%E3%83%BC%E3%83%9C%E3%83%BC%E3%83%89%E5%A5%AE%E9%97%98%E8%A8%98/IMG_4069.JPEG&#34; data-size=&#34;2048x1536&#34;&gt;
		&lt;img src=&#34;https://twoooooda.github.io/p/%E7%A7%81%E3%81%AE%E8%87%AA%E4%BD%9C%E3%82%AD%E3%83%BC%E3%83%9C%E3%83%BC%E3%83%89%E5%A5%AE%E9%97%98%E8%A8%98/IMG_4069.JPEG&#34;
			width=&#34;2048&#34;
			height=&#34;1536&#34;
			srcset=&#34;https://twoooooda.github.io/p/%E7%A7%81%E3%81%AE%E8%87%AA%E4%BD%9C%E3%82%AD%E3%83%BC%E3%83%9C%E3%83%BC%E3%83%89%E5%A5%AE%E9%97%98%E8%A8%98/IMG_4069_hu9e6ed29d71e6d89397b9e5baa2dacccb_1120092_480x0_resize_q75_box.JPEG 480w, https://twoooooda.github.io/p/%E7%A7%81%E3%81%AE%E8%87%AA%E4%BD%9C%E3%82%AD%E3%83%BC%E3%83%9C%E3%83%BC%E3%83%89%E5%A5%AE%E9%97%98%E8%A8%98/IMG_4069_hu9e6ed29d71e6d89397b9e5baa2dacccb_1120092_1024x0_resize_q75_box.JPEG 1024w&#34;
			loading=&#34;lazy&#34;
			alt=&#34;使ったのは1.5mm径の筆。もっと細くていいかも&#34;&gt;
	&lt;/a&gt;
	
	&lt;figcaption&gt;使ったのは1.5mm径の筆。もっと細くていいかも&lt;/figcaption&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&#34;lubeが大変だった&#34;&gt;lubeが大変だった&lt;/h2&gt;
&lt;p&gt;　&lt;strong&gt;大変でした&amp;hellip;&lt;/strong&gt; 自作キーボードと言えば、Happy Hacking Keybordに代表される60%キーボードのような配列が一般的だと思いますが、今回作ったのはコンパクトながらフルサイズキーボードなので、98キーあります(ちなみにフルサイズキーボードは全部で106～109キー)。当然すべてのスイッチについてlubeしました。慣れるとスイッチ一つあたり5分くらいで済ませられるようになりましたが、かなり細かい作業なので一日にできる個数は限られており結局終わるまで数日かかりました(lubeしながら年越した)。&lt;/p&gt;
&lt;p&gt;グリスの選択や、塗る場所は&lt;a class=&#34;link&#34; href=&#34;https://keys.recompile.net/docs/keyswitch-best-practice/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;このサイト&lt;/a&gt;を参考にしました。
&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 133; 
			flex-basis: 320px&#34;
	&gt;
	&lt;a href=&#34;https://twoooooda.github.io/p/%E7%A7%81%E3%81%AE%E8%87%AA%E4%BD%9C%E3%82%AD%E3%83%BC%E3%83%9C%E3%83%BC%E3%83%89%E5%A5%AE%E9%97%98%E8%A8%98/IMG_4071.JPEG&#34; data-size=&#34;2048x1536&#34;&gt;
		&lt;img src=&#34;https://twoooooda.github.io/p/%E7%A7%81%E3%81%AE%E8%87%AA%E4%BD%9C%E3%82%AD%E3%83%BC%E3%83%9C%E3%83%BC%E3%83%89%E5%A5%AE%E9%97%98%E8%A8%98/IMG_4071.JPEG&#34;
			width=&#34;2048&#34;
			height=&#34;1536&#34;
			srcset=&#34;https://twoooooda.github.io/p/%E7%A7%81%E3%81%AE%E8%87%AA%E4%BD%9C%E3%82%AD%E3%83%BC%E3%83%9C%E3%83%BC%E3%83%89%E5%A5%AE%E9%97%98%E8%A8%98/IMG_4071_hu659a128a785803e8c3092722a1c3ff58_1182792_480x0_resize_q75_box.JPEG 480w, https://twoooooda.github.io/p/%E7%A7%81%E3%81%AE%E8%87%AA%E4%BD%9C%E3%82%AD%E3%83%BC%E3%83%9C%E3%83%BC%E3%83%89%E5%A5%AE%E9%97%98%E8%A8%98/IMG_4071_hu659a128a785803e8c3092722a1c3ff58_1182792_1024x0_resize_q75_box.JPEG 1024w&#34;
			loading=&#34;lazy&#34;
			alt=&#34;lubeの様子&#34;&gt;
	&lt;/a&gt;
	
	&lt;figcaption&gt;lubeの様子&lt;/figcaption&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;　lubeの効果ですが、たしかにあるように&lt;strong&gt;感じます&lt;/strong&gt;。lubeする前と後とでタイピングの比較はしてないので何とも言えないですが、カチャカチャというプラスチックが擦れるような音が軽減されたり、打ち心地がサクサクとした感触になったりで効果はあると思います。たぶん。ただ、60%キーボードならいざ知らず今回は98キーあるので、それら全てにlubeする労力と効果が見合うかは微妙です。私は普段からキーボードにかなり触るのでやってよかったと感じますが、とりあえず自作キーボードをやってみたいという方には障壁になるかもしれません。&lt;/p&gt;
&lt;h2 id=&#34;総額でいくらくらい&#34;&gt;総額でいくらくらい？&lt;/h2&gt;
&lt;p&gt;　詳細な値段はそれぞれのリンクから飛んでもらえれば値段はわかると思います。自作キットやキーキャップはアリエクスプレスで買ったので比較的安く抑えることができました。キースイッチやグリスはそれぞれ国内販売店である&lt;a class=&#34;link&#34; href=&#34;https://talpkeyboard.net/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;TALP KEYBORD&lt;/a&gt;や&lt;a class=&#34;link&#34; href=&#34;https://shop.yushakobo.jp/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;遊舎工房&lt;/a&gt;で購入したので、送料もかかり少し高くついてしまいました。&lt;/p&gt;
&lt;p&gt;筆やその他100均で買ったツール、lubeステーションの印刷代を除き、グリス代や送料を含めた総額は、&lt;strong&gt;¥21,136&lt;/strong&gt;となりました。これを安いと見るか高いと見るかはあなた次第です&amp;hellip;&lt;/p&gt;
&lt;h2 id=&#34;総評&#34;&gt;総評&lt;/h2&gt;
&lt;p&gt;これまでつらつら書いてきましたが、金と時間をかけながらも&lt;strong&gt;自分でキーボードを作って良かった&lt;/strong&gt;と思っています。キースイッチやグリスの選択、塗り方で押し心地や音を、外装やキーキャップの選択によってデザインを、ケースや基板によってキーボードの配列や機能を完全にカスタイマイズできるところが自作キーボードのいいところだと今回の挑戦でわかりました。少しでも気なった方は是非この沼に飛び込んでみては。
&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 133; 
			flex-basis: 320px&#34;
	&gt;
	&lt;a href=&#34;https://twoooooda.github.io/p/%E7%A7%81%E3%81%AE%E8%87%AA%E4%BD%9C%E3%82%AD%E3%83%BC%E3%83%9C%E3%83%BC%E3%83%89%E5%A5%AE%E9%97%98%E8%A8%98/IMG_4093.JPEG&#34; data-size=&#34;2048x1536&#34;&gt;
		&lt;img src=&#34;https://twoooooda.github.io/p/%E7%A7%81%E3%81%AE%E8%87%AA%E4%BD%9C%E3%82%AD%E3%83%BC%E3%83%9C%E3%83%BC%E3%83%89%E5%A5%AE%E9%97%98%E8%A8%98/IMG_4093.JPEG&#34;
			width=&#34;2048&#34;
			height=&#34;1536&#34;
			srcset=&#34;https://twoooooda.github.io/p/%E7%A7%81%E3%81%AE%E8%87%AA%E4%BD%9C%E3%82%AD%E3%83%BC%E3%83%9C%E3%83%BC%E3%83%89%E5%A5%AE%E9%97%98%E8%A8%98/IMG_4093_hu2bc48c5a963c9b05f13e95703f79cedc_951730_480x0_resize_q75_box.JPEG 480w, https://twoooooda.github.io/p/%E7%A7%81%E3%81%AE%E8%87%AA%E4%BD%9C%E3%82%AD%E3%83%BC%E3%83%9C%E3%83%BC%E3%83%89%E5%A5%AE%E9%97%98%E8%A8%98/IMG_4093_hu2bc48c5a963c9b05f13e95703f79cedc_951730_1024x0_resize_q75_box.JPEG 1024w&#34;
			loading=&#34;lazy&#34;
			alt=&#34; &#34;&gt;
	&lt;/a&gt;
	
	&lt;figcaption&gt;&lt;/figcaption&gt;
	
&lt;/figure&gt; &lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 133; 
			flex-basis: 320px&#34;
	&gt;
	&lt;a href=&#34;https://twoooooda.github.io/p/%E7%A7%81%E3%81%AE%E8%87%AA%E4%BD%9C%E3%82%AD%E3%83%BC%E3%83%9C%E3%83%BC%E3%83%89%E5%A5%AE%E9%97%98%E8%A8%98/IMG_4096.JPEG&#34; data-size=&#34;2048x1536&#34;&gt;
		&lt;img src=&#34;https://twoooooda.github.io/p/%E7%A7%81%E3%81%AE%E8%87%AA%E4%BD%9C%E3%82%AD%E3%83%BC%E3%83%9C%E3%83%BC%E3%83%89%E5%A5%AE%E9%97%98%E8%A8%98/IMG_4096.JPEG&#34;
			width=&#34;2048&#34;
			height=&#34;1536&#34;
			srcset=&#34;https://twoooooda.github.io/p/%E7%A7%81%E3%81%AE%E8%87%AA%E4%BD%9C%E3%82%AD%E3%83%BC%E3%83%9C%E3%83%BC%E3%83%89%E5%A5%AE%E9%97%98%E8%A8%98/IMG_4096_hu358d4baf67c7c828f2ff7864579eccc3_838295_480x0_resize_q75_box.JPEG 480w, https://twoooooda.github.io/p/%E7%A7%81%E3%81%AE%E8%87%AA%E4%BD%9C%E3%82%AD%E3%83%BC%E3%83%9C%E3%83%BC%E3%83%89%E5%A5%AE%E9%97%98%E8%A8%98/IMG_4096_hu358d4baf67c7c828f2ff7864579eccc3_838295_1024x0_resize_q75_box.JPEG 1024w&#34;
			loading=&#34;lazy&#34;
			alt=&#34; &#34;&gt;
	&lt;/a&gt;
	
	&lt;figcaption&gt;&lt;/figcaption&gt;
	
&lt;/figure&gt;&lt;/p&gt;
</description>
        </item>
        <item>
        <title>「Looking Glass Portrait」着弾&amp;開封レビュー</title>
        <link>https://twoooooda.github.io/p/looking-glass-portrait%E7%9D%80%E5%BC%BE%E9%96%8B%E5%B0%81%E3%83%AC%E3%83%93%E3%83%A5%E3%83%BC/</link>
        <pubDate>Tue, 12 Oct 2021 00:00:00 +0000</pubDate>
        
        <guid>https://twoooooda.github.io/p/looking-glass-portrait%E7%9D%80%E5%BC%BE%E9%96%8B%E5%B0%81%E3%83%AC%E3%83%93%E3%83%A5%E3%83%BC/</guid>
        <description>&lt;img src="https://twoooooda.github.io/p/looking-glass-portrait%E7%9D%80%E5%BC%BE%E9%96%8B%E5%B0%81%E3%83%AC%E3%83%93%E3%83%A5%E3%83%BC/IMG_3916.JPEG" alt="Featured image of post 「Looking Glass Portrait」着弾&amp;開封レビュー" /&gt;&lt;p&gt;こんばんは、いっとりうむです。今年の2月くらいに、クラウドファンディングサイトkickstarterでバック(お金を出して支援すること)した返礼品である「Looking Glass Portrait」がやっと届きました。他のバッカーの方は5月くらいには届いていたようですが、住所登録のフォームの入力が遅れてしまったせいで到着が今になってしまいました。&lt;/p&gt;
&lt;h2 id=&#34;looking-glassとは&#34;&gt;Looking Glassとは？&lt;/h2&gt;
&lt;p&gt;端的に言うとズバリ「&lt;strong&gt;裸眼で立体視可能なディスプレイ&lt;/strong&gt;」です。一般的な立体視ディスプレイは青色と赤色のフィルムをレンズとしたメガネや、偏光フィルタを使ったメガネをかける必要があったりしますが、Looking Glassはそういった類のものは全く必要とせず立体視が可能です。詳しい原理は&lt;a class=&#34;link&#34; href=&#34;http://docs-ja.lookingglassfactory.com/Appendix/how-it-works/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;公式のドキュメント&lt;/a&gt;に書いてあるのでそちらを読んでもらうのが一番確実ですが、レンチキュラーレンズという特殊な構造を持ったディスプレイに横方向45視点くらいからの画像を同時に表示して、両目による視差、あるいは横に動いた時の視差を実現しています。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;最初に世に出たLooking Glassは,、全面に巨大で重厚なアクリルの塊がついた8.9インチのディスプレイでした(購入済み)。購入当時はだいたい8万円でした。  &lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 133; 
			flex-basis: 320px&#34;
	&gt;
	&lt;a href=&#34;https://twoooooda.github.io/p/looking-glass-portrait%E7%9D%80%E5%BC%BE%E9%96%8B%E5%B0%81%E3%83%AC%E3%83%93%E3%83%A5%E3%83%BC/IMG_3939.jpeg&#34; data-size=&#34;2048x1536&#34;&gt;
		&lt;img src=&#34;https://twoooooda.github.io/p/looking-glass-portrait%E7%9D%80%E5%BC%BE%E9%96%8B%E5%B0%81%E3%83%AC%E3%83%93%E3%83%A5%E3%83%BC/IMG_3939.jpeg&#34;
			width=&#34;2048&#34;
			height=&#34;1536&#34;
			srcset=&#34;https://twoooooda.github.io/p/looking-glass-portrait%E7%9D%80%E5%BC%BE%E9%96%8B%E5%B0%81%E3%83%AC%E3%83%93%E3%83%A5%E3%83%BC/IMG_3939_hu94decce26e3a7e33e42a439a430f7b44_919883_480x0_resize_q75_box.jpeg 480w, https://twoooooda.github.io/p/looking-glass-portrait%E7%9D%80%E5%BC%BE%E9%96%8B%E5%B0%81%E3%83%AC%E3%83%93%E3%83%A5%E3%83%BC/IMG_3939_hu94decce26e3a7e33e42a439a430f7b44_919883_1024x0_resize_q75_box.jpeg 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;初代の8インチのものがあまりに重く、場所も取るため、小型化＆薄型化&amp;amp;低価格化(クラファン特価で$199)した「Looking Glass Portrait」が2020年末に発表されました。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;開封&#34;&gt;開封&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;製造元のLooking Glass Factory社はスタートアップながら、かなりちゃんとした化粧箱で届きました。  &lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 133; 
			flex-basis: 320px&#34;
	&gt;
	&lt;a href=&#34;https://twoooooda.github.io/p/looking-glass-portrait%E7%9D%80%E5%BC%BE%E9%96%8B%E5%B0%81%E3%83%AC%E3%83%93%E3%83%A5%E3%83%BC/IMG_3910.JPEG&#34; data-size=&#34;2048x1536&#34;&gt;
		&lt;img src=&#34;https://twoooooda.github.io/p/looking-glass-portrait%E7%9D%80%E5%BC%BE%E9%96%8B%E5%B0%81%E3%83%AC%E3%83%93%E3%83%A5%E3%83%BC/IMG_3910.JPEG&#34;
			width=&#34;2048&#34;
			height=&#34;1536&#34;
			srcset=&#34;https://twoooooda.github.io/p/looking-glass-portrait%E7%9D%80%E5%BC%BE%E9%96%8B%E5%B0%81%E3%83%AC%E3%83%93%E3%83%A5%E3%83%BC/IMG_3910_hu2e7ed5dee128fd3b00085ffe3a3845f0_811413_480x0_resize_q75_box.JPEG 480w, https://twoooooda.github.io/p/looking-glass-portrait%E7%9D%80%E5%BC%BE%E9%96%8B%E5%B0%81%E3%83%AC%E3%83%93%E3%83%A5%E3%83%BC/IMG_3910_hu2e7ed5dee128fd3b00085ffe3a3845f0_811413_1024x0_resize_q75_box.JPEG 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;キャリーケース付きのプランをバックしたので、まずはそちらが顔を覗かせます。  &lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 133; 
			flex-basis: 320px&#34;
	&gt;
	&lt;a href=&#34;https://twoooooda.github.io/p/looking-glass-portrait%E7%9D%80%E5%BC%BE%E9%96%8B%E5%B0%81%E3%83%AC%E3%83%93%E3%83%A5%E3%83%BC/IMG_3912.JPEG&#34; data-size=&#34;2048x1536&#34;&gt;
		&lt;img src=&#34;https://twoooooda.github.io/p/looking-glass-portrait%E7%9D%80%E5%BC%BE%E9%96%8B%E5%B0%81%E3%83%AC%E3%83%93%E3%83%A5%E3%83%BC/IMG_3912.JPEG&#34;
			width=&#34;2048&#34;
			height=&#34;1536&#34;
			srcset=&#34;https://twoooooda.github.io/p/looking-glass-portrait%E7%9D%80%E5%BC%BE%E9%96%8B%E5%B0%81%E3%83%AC%E3%83%93%E3%83%A5%E3%83%BC/IMG_3912_hu002b5e618bb541c906e0447e4f1edf36_988170_480x0_resize_q75_box.JPEG 480w, https://twoooooda.github.io/p/looking-glass-portrait%E7%9D%80%E5%BC%BE%E9%96%8B%E5%B0%81%E3%83%AC%E3%83%93%E3%83%A5%E3%83%BC/IMG_3912_hu002b5e618bb541c906e0447e4f1edf36_988170_1024x0_resize_q75_box.JPEG 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;本体。画面部分を見ると、先代と比べてアクリル塊が無くなっているどころか凹んでいます。  &lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 133; 
			flex-basis: 320px&#34;
	&gt;
	&lt;a href=&#34;https://twoooooda.github.io/p/looking-glass-portrait%E7%9D%80%E5%BC%BE%E9%96%8B%E5%B0%81%E3%83%AC%E3%83%93%E3%83%A5%E3%83%BC/IMG_3913.JPEG&#34; data-size=&#34;2048x1536&#34;&gt;
		&lt;img src=&#34;https://twoooooda.github.io/p/looking-glass-portrait%E7%9D%80%E5%BC%BE%E9%96%8B%E5%B0%81%E3%83%AC%E3%83%93%E3%83%A5%E3%83%BC/IMG_3913.JPEG&#34;
			width=&#34;2048&#34;
			height=&#34;1536&#34;
			srcset=&#34;https://twoooooda.github.io/p/looking-glass-portrait%E7%9D%80%E5%BC%BE%E9%96%8B%E5%B0%81%E3%83%AC%E3%83%93%E3%83%A5%E3%83%BC/IMG_3913_hu1f002fc8ce42707afd8416e90100275e_964683_480x0_resize_q75_box.JPEG 480w, https://twoooooda.github.io/p/looking-glass-portrait%E7%9D%80%E5%BC%BE%E9%96%8B%E5%B0%81%E3%83%AC%E3%83%93%E3%83%A5%E3%83%BC/IMG_3913_hu1f002fc8ce42707afd8416e90100275e_964683_1024x0_resize_q75_box.JPEG 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;   &lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 133; 
			flex-basis: 320px&#34;
	&gt;
	&lt;a href=&#34;https://twoooooda.github.io/p/looking-glass-portrait%E7%9D%80%E5%BC%BE%E9%96%8B%E5%B0%81%E3%83%AC%E3%83%93%E3%83%A5%E3%83%BC/IMG_3916.JPEG&#34; data-size=&#34;2048x1536&#34;&gt;
		&lt;img src=&#34;https://twoooooda.github.io/p/looking-glass-portrait%E7%9D%80%E5%BC%BE%E9%96%8B%E5%B0%81%E3%83%AC%E3%83%93%E3%83%A5%E3%83%BC/IMG_3916.JPEG&#34;
			width=&#34;2048&#34;
			height=&#34;1536&#34;
			srcset=&#34;https://twoooooda.github.io/p/looking-glass-portrait%E7%9D%80%E5%BC%BE%E9%96%8B%E5%B0%81%E3%83%AC%E3%83%93%E3%83%A5%E3%83%BC/IMG_3916_hu6809022b3e0725950ccd8f93b10b6e03_935601_480x0_resize_q75_box.JPEG 480w, https://twoooooda.github.io/p/looking-glass-portrait%E7%9D%80%E5%BC%BE%E9%96%8B%E5%B0%81%E3%83%AC%E3%83%93%E3%83%A5%E3%83%BC/IMG_3916_hu6809022b3e0725950ccd8f93b10b6e03_935601_1024x0_resize_q75_box.JPEG 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;キャリーケースもしかっりしたオリジナルのものが付いてきました。  &lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 133; 
			flex-basis: 320px&#34;
	&gt;
	&lt;a href=&#34;https://twoooooda.github.io/p/looking-glass-portrait%E7%9D%80%E5%BC%BE%E9%96%8B%E5%B0%81%E3%83%AC%E3%83%93%E3%83%A5%E3%83%BC/IMG_3936.JPEG&#34; data-size=&#34;2048x1536&#34;&gt;
		&lt;img src=&#34;https://twoooooda.github.io/p/looking-glass-portrait%E7%9D%80%E5%BC%BE%E9%96%8B%E5%B0%81%E3%83%AC%E3%83%93%E3%83%A5%E3%83%BC/IMG_3936.JPEG&#34;
			width=&#34;2048&#34;
			height=&#34;1536&#34;
			srcset=&#34;https://twoooooda.github.io/p/looking-glass-portrait%E7%9D%80%E5%BC%BE%E9%96%8B%E5%B0%81%E3%83%AC%E3%83%93%E3%83%A5%E3%83%BC/IMG_3936_huee72702ff3bc6a79fe58a80492533072_1580354_480x0_resize_q75_box.JPEG 480w, https://twoooooda.github.io/p/looking-glass-portrait%E7%9D%80%E5%BC%BE%E9%96%8B%E5%B0%81%E3%83%AC%E3%83%93%E3%83%A5%E3%83%BC/IMG_3936_huee72702ff3bc6a79fe58a80492533072_1580354_1024x0_resize_q75_box.JPEG 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;付属品はHDMIケーブル、USB Type-Cケーブル、USB Type-C端子のACアダプタ(5V, 3A)、クリーニングクロス、キャリーケースに着ける紐がついてきました。紙類は簡単な説明書、サンキューカード的な奴、ステッカー。  &lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 188; 
			flex-basis: 452px&#34;
	&gt;
	&lt;a href=&#34;https://twoooooda.github.io/p/looking-glass-portrait%E7%9D%80%E5%BC%BE%E9%96%8B%E5%B0%81%E3%83%AC%E3%83%93%E3%83%A5%E3%83%BC/IMG_3931.JPEG&#34; data-size=&#34;2435x1291&#34;&gt;
		&lt;img src=&#34;https://twoooooda.github.io/p/looking-glass-portrait%E7%9D%80%E5%BC%BE%E9%96%8B%E5%B0%81%E3%83%AC%E3%83%93%E3%83%A5%E3%83%BC/IMG_3931.JPEG&#34;
			width=&#34;2435&#34;
			height=&#34;1291&#34;
			srcset=&#34;https://twoooooda.github.io/p/looking-glass-portrait%E7%9D%80%E5%BC%BE%E9%96%8B%E5%B0%81%E3%83%AC%E3%83%93%E3%83%A5%E3%83%BC/IMG_3931_hu42429720c005d22bdbb88be9ba16e546_1414826_480x0_resize_q75_box.JPEG 480w, https://twoooooda.github.io/p/looking-glass-portrait%E7%9D%80%E5%BC%BE%E9%96%8B%E5%B0%81%E3%83%AC%E3%83%93%E3%83%A5%E3%83%BC/IMG_3931_hu42429720c005d22bdbb88be9ba16e546_1414826_1024x0_resize_q75_box.JPEG 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;   &lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 133; 
			flex-basis: 320px&#34;
	&gt;
	&lt;a href=&#34;https://twoooooda.github.io/p/looking-glass-portrait%E7%9D%80%E5%BC%BE%E9%96%8B%E5%B0%81%E3%83%AC%E3%83%93%E3%83%A5%E3%83%BC/IMG_3935.JPEG&#34; data-size=&#34;2048x1536&#34;&gt;
		&lt;img src=&#34;https://twoooooda.github.io/p/looking-glass-portrait%E7%9D%80%E5%BC%BE%E9%96%8B%E5%B0%81%E3%83%AC%E3%83%93%E3%83%A5%E3%83%BC/IMG_3935.JPEG&#34;
			width=&#34;2048&#34;
			height=&#34;1536&#34;
			srcset=&#34;https://twoooooda.github.io/p/looking-glass-portrait%E7%9D%80%E5%BC%BE%E9%96%8B%E5%B0%81%E3%83%AC%E3%83%93%E3%83%A5%E3%83%BC/IMG_3935_hu1e544ab704f129ce52a7ddbbbc2c458e_1081503_480x0_resize_q75_box.JPEG 480w, https://twoooooda.github.io/p/looking-glass-portrait%E7%9D%80%E5%BC%BE%E9%96%8B%E5%B0%81%E3%83%AC%E3%83%93%E3%83%A5%E3%83%BC/IMG_3935_hu1e544ab704f129ce52a7ddbbbc2c458e_1081503_1024x0_resize_q75_box.JPEG 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;looking-glass-portrait&#34;&gt;Looking Glass Portrait&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;スペックとしては、画面サイズが7.9インチ、重量660g。Rasberry pi 4を搭載しており、PCにつないでディスプレイとして使う他にも、電源に繋ぐだけで単体でデモを表示できます。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;向かって左側面にはHDMIとUSB Type-Cポート、3.5mmオーディオOUT。右側面には電源スイッチ(上)、LED調光スイッチ(下)、デモ操作用のタッチスイッチが3つ並んでいます。  &lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 133; 
			flex-basis: 320px&#34;
	&gt;
	&lt;a href=&#34;https://twoooooda.github.io/p/looking-glass-portrait%E7%9D%80%E5%BC%BE%E9%96%8B%E5%B0%81%E3%83%AC%E3%83%93%E3%83%A5%E3%83%BC/IMG_3932.JPEG&#34; data-size=&#34;2048x1536&#34;&gt;
		&lt;img src=&#34;https://twoooooda.github.io/p/looking-glass-portrait%E7%9D%80%E5%BC%BE%E9%96%8B%E5%B0%81%E3%83%AC%E3%83%93%E3%83%A5%E3%83%BC/IMG_3932.JPEG&#34;
			width=&#34;2048&#34;
			height=&#34;1536&#34;
			srcset=&#34;https://twoooooda.github.io/p/looking-glass-portrait%E7%9D%80%E5%BC%BE%E9%96%8B%E5%B0%81%E3%83%AC%E3%83%93%E3%83%A5%E3%83%BC/IMG_3932_hue33645b8ab5d81411694ce0c32a10c84_746764_480x0_resize_q75_box.JPEG 480w, https://twoooooda.github.io/p/looking-glass-portrait%E7%9D%80%E5%BC%BE%E9%96%8B%E5%B0%81%E3%83%AC%E3%83%93%E3%83%A5%E3%83%BC/IMG_3932_hue33645b8ab5d81411694ce0c32a10c84_746764_1024x0_resize_q75_box.JPEG 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;   &lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 133; 
			flex-basis: 320px&#34;
	&gt;
	&lt;a href=&#34;https://twoooooda.github.io/p/looking-glass-portrait%E7%9D%80%E5%BC%BE%E9%96%8B%E5%B0%81%E3%83%AC%E3%83%93%E3%83%A5%E3%83%BC/IMG_3933.JPEG&#34; data-size=&#34;2048x1536&#34;&gt;
		&lt;img src=&#34;https://twoooooda.github.io/p/looking-glass-portrait%E7%9D%80%E5%BC%BE%E9%96%8B%E5%B0%81%E3%83%AC%E3%83%93%E3%83%A5%E3%83%BC/IMG_3933.JPEG&#34;
			width=&#34;2048&#34;
			height=&#34;1536&#34;
			srcset=&#34;https://twoooooda.github.io/p/looking-glass-portrait%E7%9D%80%E5%BC%BE%E9%96%8B%E5%B0%81%E3%83%AC%E3%83%93%E3%83%A5%E3%83%BC/IMG_3933_hua9f91ac3808f45c9ab8e51794cad5044_695042_480x0_resize_q75_box.JPEG 480w, https://twoooooda.github.io/p/looking-glass-portrait%E7%9D%80%E5%BC%BE%E9%96%8B%E5%B0%81%E3%83%AC%E3%83%93%E3%83%A5%E3%83%BC/IMG_3933_hua9f91ac3808f45c9ab8e51794cad5044_695042_1024x0_resize_q75_box.JPEG 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;ラズパイ4を内部に搭載しているので、USB Type-Cポートから電源に繋ぐだけでプリセットのデモを表示できます。デモにはiPhone12 ProのLiDARセンサーを使って撮影したポートレート写真や3DCGムービーが入ってました。中にはVirtual YouTuberのキズナアイ親分のショート動画もあってビックリしました。  &lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 133; 
			flex-basis: 320px&#34;
	&gt;
	&lt;a href=&#34;https://twoooooda.github.io/p/looking-glass-portrait%E7%9D%80%E5%BC%BE%E9%96%8B%E5%B0%81%E3%83%AC%E3%83%93%E3%83%A5%E3%83%BC/IMG_3917.JPEG&#34; data-size=&#34;2048x1536&#34;&gt;
		&lt;img src=&#34;https://twoooooda.github.io/p/looking-glass-portrait%E7%9D%80%E5%BC%BE%E9%96%8B%E5%B0%81%E3%83%AC%E3%83%93%E3%83%A5%E3%83%BC/IMG_3917.JPEG&#34;
			width=&#34;2048&#34;
			height=&#34;1536&#34;
			srcset=&#34;https://twoooooda.github.io/p/looking-glass-portrait%E7%9D%80%E5%BC%BE%E9%96%8B%E5%B0%81%E3%83%AC%E3%83%93%E3%83%A5%E3%83%BC/IMG_3917_hubf683a200a040976b190f735bbd12f63_945404_480x0_resize_q75_box.JPEG 480w, https://twoooooda.github.io/p/looking-glass-portrait%E7%9D%80%E5%BC%BE%E9%96%8B%E5%B0%81%E3%83%AC%E3%83%93%E3%83%A5%E3%83%BC/IMG_3917_hubf683a200a040976b190f735bbd12f63_945404_1024x0_resize_q75_box.JPEG 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;   &lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 133; 
			flex-basis: 320px&#34;
	&gt;
	&lt;a href=&#34;https://twoooooda.github.io/p/looking-glass-portrait%E7%9D%80%E5%BC%BE%E9%96%8B%E5%B0%81%E3%83%AC%E3%83%93%E3%83%A5%E3%83%BC/IMG_3918.JPEG&#34; data-size=&#34;2048x1536&#34;&gt;
		&lt;img src=&#34;https://twoooooda.github.io/p/looking-glass-portrait%E7%9D%80%E5%BC%BE%E9%96%8B%E5%B0%81%E3%83%AC%E3%83%93%E3%83%A5%E3%83%BC/IMG_3918.JPEG&#34;
			width=&#34;2048&#34;
			height=&#34;1536&#34;
			srcset=&#34;https://twoooooda.github.io/p/looking-glass-portrait%E7%9D%80%E5%BC%BE%E9%96%8B%E5%B0%81%E3%83%AC%E3%83%93%E3%83%A5%E3%83%BC/IMG_3918_huf660111d3c8255b21dd33a1fb8151534_1371319_480x0_resize_q75_box.JPEG 480w, https://twoooooda.github.io/p/looking-glass-portrait%E7%9D%80%E5%BC%BE%E9%96%8B%E5%B0%81%E3%83%AC%E3%83%93%E3%83%A5%E3%83%BC/IMG_3918_huf660111d3c8255b21dd33a1fb8151534_1371319_1024x0_resize_q75_box.JPEG 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;推奨解像度は普段あまり馴染みのない1536×2048。数字上はフルHDよりも高精細ですが、構造が特殊なこともありフルHDモニターよりもドット感が目立ちます。見てのとおり、エクスプローラーの文字も読めません。  &lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 119; 
			flex-basis: 287px&#34;
	&gt;
	&lt;a href=&#34;https://twoooooda.github.io/p/looking-glass-portrait%E7%9D%80%E5%BC%BE%E9%96%8B%E5%B0%81%E3%83%AC%E3%83%93%E3%83%A5%E3%83%BC/27fdf35d66736661addb0b5a359d93e8.png&#34; data-size=&#34;384x321&#34;&gt;
		&lt;img src=&#34;https://twoooooda.github.io/p/looking-glass-portrait%E7%9D%80%E5%BC%BE%E9%96%8B%E5%B0%81%E3%83%AC%E3%83%93%E3%83%A5%E3%83%BC/27fdf35d66736661addb0b5a359d93e8.png&#34;
			width=&#34;384&#34;
			height=&#34;321&#34;
			srcset=&#34;https://twoooooda.github.io/p/looking-glass-portrait%E7%9D%80%E5%BC%BE%E9%96%8B%E5%B0%81%E3%83%AC%E3%83%93%E3%83%A5%E3%83%BC/27fdf35d66736661addb0b5a359d93e8_hue0fe90825d8f30be0a769c5abd208c24_16445_480x0_resize_box_3.png 480w, https://twoooooda.github.io/p/looking-glass-portrait%E7%9D%80%E5%BC%BE%E9%96%8B%E5%B0%81%E3%83%AC%E3%83%93%E3%83%A5%E3%83%BC/27fdf35d66736661addb0b5a359d93e8_hue0fe90825d8f30be0a769c5abd208c24_16445_1024x0_resize_box_3.png 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;   &lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 133; 
			flex-basis: 320px&#34;
	&gt;
	&lt;a href=&#34;https://twoooooda.github.io/p/looking-glass-portrait%E7%9D%80%E5%BC%BE%E9%96%8B%E5%B0%81%E3%83%AC%E3%83%93%E3%83%A5%E3%83%BC/IMG_3940.jpeg&#34; data-size=&#34;2048x1536&#34;&gt;
		&lt;img src=&#34;https://twoooooda.github.io/p/looking-glass-portrait%E7%9D%80%E5%BC%BE%E9%96%8B%E5%B0%81%E3%83%AC%E3%83%93%E3%83%A5%E3%83%BC/IMG_3940.jpeg&#34;
			width=&#34;2048&#34;
			height=&#34;1536&#34;
			srcset=&#34;https://twoooooda.github.io/p/looking-glass-portrait%E7%9D%80%E5%BC%BE%E9%96%8B%E5%B0%81%E3%83%AC%E3%83%93%E3%83%A5%E3%83%BC/IMG_3940_hu2a33bc277d9e5d0ef6bfcbcb716732cb_1346520_480x0_resize_q75_box.jpeg 480w, https://twoooooda.github.io/p/looking-glass-portrait%E7%9D%80%E5%BC%BE%E9%96%8B%E5%B0%81%E3%83%AC%E3%83%93%E3%83%A5%E3%83%BC/IMG_3940_hu2a33bc277d9e5d0ef6bfcbcb716732cb_1346520_1024x0_resize_q75_box.jpeg 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;こればかりは画像で全く伝わらないのが惜しいですが、初代Looking Glassより小型軽量化しているのにも関わらず、遜色なくちゃんと裸眼立体視出来ています。立体視の体験的には劇的に進化したという感じは少ないですが、着実に良い製品となっています。軽くなったことにより取り回しやすくなり、何倍も使いやすくなったのではないでしょうか。手の届く範囲まで値段も下がっているので、興味がある方は購入してみても後悔しないと思います。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>Apple公式下取りサービス「Apple Trade In」利用レビュー</title>
        <link>https://twoooooda.github.io/p/apple%E5%85%AC%E5%BC%8F%E4%B8%8B%E5%8F%96%E3%82%8A%E3%82%B5%E3%83%BC%E3%83%93%E3%82%B9apple-trade-in%E5%88%A9%E7%94%A8%E3%83%AC%E3%83%93%E3%83%A5%E3%83%BC/</link>
        <pubDate>Sun, 03 Oct 2021 00:00:00 +0000</pubDate>
        
        <guid>https://twoooooda.github.io/p/apple%E5%85%AC%E5%BC%8F%E4%B8%8B%E5%8F%96%E3%82%8A%E3%82%B5%E3%83%BC%E3%83%93%E3%82%B9apple-trade-in%E5%88%A9%E7%94%A8%E3%83%AC%E3%83%93%E3%83%A5%E3%83%BC/</guid>
        <description>&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://twoooooda.github.io/p/iphone-13-mini%E8%B2%B7%E3%81%A3%E3%81%9F%E3%82%88%E3%83%BC/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;前回記事&lt;/a&gt;のとおり、先日発売されたiPhone13 mini を買うことにしました。幸いにして私は物持ちがすこぶる良く、2年前のiPhone11の状態もほぼ無傷だったので、Apple公式の下取りサービスである「Apple Trade In」を使ってiPhone11を下取りに出すことにしました。&lt;/p&gt;
&lt;h2 id=&#34;apple-trade-inとは&#34;&gt;Apple Trade Inとは&lt;/h2&gt;
&lt;p&gt;前述の通り、Apple社が公式で行っているApple製品下取りサービスです。AppleがiPhone6 Plus(下取り価格約3,000円)から、iPhone12 ProMax(最大84,000円)までのシリーズを引き取り、相応の値段を購入額から割り引くというよくある感じのサービスです。iPhone6以前の機種は無料で回収されるのみとのこと。&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;h3 id=&#34;利用手順&#34;&gt;利用手順&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;まずはiPhoneの新規購入画面で、サービスに関係する基本的なフォームを入力します。今回はiPhone11 64GBモデルなので最大33000円で下取ってくれるようです。
&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 44; 
			flex-basis: 105px&#34;
	&gt;
	&lt;a href=&#34;https://twoooooda.github.io/p/apple%E5%85%AC%E5%BC%8F%E4%B8%8B%E5%8F%96%E3%82%8A%E3%82%B5%E3%83%BC%E3%83%93%E3%82%B9apple-trade-in%E5%88%A9%E7%94%A8%E3%83%AC%E3%83%93%E3%83%A5%E3%83%BC/aab9cf0b114ce358f95a619c9ba0b4dd.png&#34; data-size=&#34;413x936&#34;&gt;
		&lt;img src=&#34;https://twoooooda.github.io/p/apple%E5%85%AC%E5%BC%8F%E4%B8%8B%E5%8F%96%E3%82%8A%E3%82%B5%E3%83%BC%E3%83%93%E3%82%B9apple-trade-in%E5%88%A9%E7%94%A8%E3%83%AC%E3%83%93%E3%83%A5%E3%83%BC/aab9cf0b114ce358f95a619c9ba0b4dd.png&#34;
			width=&#34;413&#34;
			height=&#34;936&#34;
			srcset=&#34;https://twoooooda.github.io/p/apple%E5%85%AC%E5%BC%8F%E4%B8%8B%E5%8F%96%E3%82%8A%E3%82%B5%E3%83%BC%E3%83%93%E3%82%B9apple-trade-in%E5%88%A9%E7%94%A8%E3%83%AC%E3%83%93%E3%83%A5%E3%83%BC/aab9cf0b114ce358f95a619c9ba0b4dd_hue3dc759cd00d869e60fa30400af81db7_76827_480x0_resize_box_3.png 480w, https://twoooooda.github.io/p/apple%E5%85%AC%E5%BC%8F%E4%B8%8B%E5%8F%96%E3%82%8A%E3%82%B5%E3%83%BC%E3%83%93%E3%82%B9apple-trade-in%E5%88%A9%E7%94%A8%E3%83%AC%E3%83%93%E3%83%A5%E3%83%BC/aab9cf0b114ce358f95a619c9ba0b4dd_hue3dc759cd00d869e60fa30400af81db7_76827_1024x0_resize_box_3.png 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;↑をきちんと入力して新規購入の決済を完了すると、しばらくして追加の情報を入力するためのリンクがメールで届きます。私の場合は9/28に決済を済ませた後すぐにメールが来ました。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;このフォームでは、&lt;strong&gt;自分の職業&lt;/strong&gt;(会社員or自営業or学生orその他 くらいざっくりしたもの)と、&lt;strong&gt;本人確認書類&lt;/strong&gt;のアップロードを求められます。本人確認書類は、運転免許証や健康保険証、パスポート、住民票の写し、在留カード、公共料金の領収書などから2点の提出を求められます。&lt;/li&gt;
&lt;li&gt;2点のうち1点は裏面もアップロードする必要があるので、運転免許証or健康保険証はほぼ必須でしょう。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;次に、iPhoneを回収してもらうための集荷依頼のフォームがあります。日時と時間帯を指定してこのフォームは完了です。&lt;strong&gt;14日以内&lt;/strong&gt;にデバイスを送らないと下取りがキャンセルになるようです。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;h2 id=&#34;930-新iphone受け取り後&#34;&gt;9/30 新iPhone受け取り後&lt;/h2&gt;
&lt;p&gt;iPhone受け取ったら下取りキットの発送が保留になってました。メールも来ないしちょっと心配になりました。&lt;/p&gt;
&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 303; 
			flex-basis: 729px&#34;
	&gt;
	&lt;a href=&#34;https://twoooooda.github.io/p/apple%E5%85%AC%E5%BC%8F%E4%B8%8B%E5%8F%96%E3%82%8A%E3%82%B5%E3%83%BC%E3%83%93%E3%82%B9apple-trade-in%E5%88%A9%E7%94%A8%E3%83%AC%E3%83%93%E3%83%A5%E3%83%BC/d7e82602fbf3e432c2c15873917397a2.png&#34; data-size=&#34;954x314&#34;&gt;
		&lt;img src=&#34;https://twoooooda.github.io/p/apple%E5%85%AC%E5%BC%8F%E4%B8%8B%E5%8F%96%E3%82%8A%E3%82%B5%E3%83%BC%E3%83%93%E3%82%B9apple-trade-in%E5%88%A9%E7%94%A8%E3%83%AC%E3%83%93%E3%83%A5%E3%83%BC/d7e82602fbf3e432c2c15873917397a2.png&#34;
			width=&#34;954&#34;
			height=&#34;314&#34;
			srcset=&#34;https://twoooooda.github.io/p/apple%E5%85%AC%E5%BC%8F%E4%B8%8B%E5%8F%96%E3%82%8A%E3%82%B5%E3%83%BC%E3%83%93%E3%82%B9apple-trade-in%E5%88%A9%E7%94%A8%E3%83%AC%E3%83%93%E3%83%A5%E3%83%BC/d7e82602fbf3e432c2c15873917397a2_hufff6320fe37798413cc84340c8c0d798_79078_480x0_resize_box_3.png 480w, https://twoooooda.github.io/p/apple%E5%85%AC%E5%BC%8F%E4%B8%8B%E5%8F%96%E3%82%8A%E3%82%B5%E3%83%BC%E3%83%93%E3%82%B9apple-trade-in%E5%88%A9%E7%94%A8%E3%83%AC%E3%83%93%E3%83%A5%E3%83%BC/d7e82602fbf3e432c2c15873917397a2_hufff6320fe37798413cc84340c8c0d798_79078_1024x0_resize_box_3.png 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&#34;103-集荷に来てくれました&#34;&gt;10/3 集荷に来てくれました&lt;/h2&gt;
&lt;p&gt;指定の集荷時間を14時～16時にしたのですが、無事15時前にヤマトさんに来ていただきました。渡すものは下取りに出すiPhone11のみで、梱包もヤマトのお兄さんがやってくれました。本当に玄関先で生の本体を渡すだけでした。&lt;/p&gt;
&lt;p&gt;前日に集荷予定のリマインダーメールも寄越してくれました。&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;h2 id=&#34;105-査定下取りプロセス完了&#34;&gt;10/5 査定、下取りプロセス完了&lt;/h2&gt;
&lt;p&gt;Appleから査定及び下取りプロセスがすべて完了したという旨のメールが来ました。&lt;/p&gt;
&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 240; 
			flex-basis: 576px&#34;
	&gt;
	&lt;a href=&#34;https://twoooooda.github.io/p/apple%E5%85%AC%E5%BC%8F%E4%B8%8B%E5%8F%96%E3%82%8A%E3%82%B5%E3%83%BC%E3%83%93%E3%82%B9apple-trade-in%E5%88%A9%E7%94%A8%E3%83%AC%E3%83%93%E3%83%A5%E3%83%BC/143552.png&#34; data-size=&#34;747x311&#34;&gt;
		&lt;img src=&#34;https://twoooooda.github.io/p/apple%E5%85%AC%E5%BC%8F%E4%B8%8B%E5%8F%96%E3%82%8A%E3%82%B5%E3%83%BC%E3%83%93%E3%82%B9apple-trade-in%E5%88%A9%E7%94%A8%E3%83%AC%E3%83%93%E3%83%A5%E3%83%BC/143552.png&#34;
			width=&#34;747&#34;
			height=&#34;311&#34;
			srcset=&#34;https://twoooooda.github.io/p/apple%E5%85%AC%E5%BC%8F%E4%B8%8B%E5%8F%96%E3%82%8A%E3%82%B5%E3%83%BC%E3%83%93%E3%82%B9apple-trade-in%E5%88%A9%E7%94%A8%E3%83%AC%E3%83%93%E3%83%A5%E3%83%BC/143552_hu662f2b605f72f7bab64f27cf226952a6_54360_480x0_resize_box_3.png 480w, https://twoooooda.github.io/p/apple%E5%85%AC%E5%BC%8F%E4%B8%8B%E5%8F%96%E3%82%8A%E3%82%B5%E3%83%BC%E3%83%93%E3%82%B9apple-trade-in%E5%88%A9%E7%94%A8%E3%83%AC%E3%83%93%E3%83%A5%E3%83%BC/143552_hu662f2b605f72f7bab64f27cf226952a6_54360_1024x0_resize_box_3.png 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;また、後日クレカの利用履歴を確認すると、同日10/5にクレカ経由で返金手続きがなされていました。&lt;/p&gt;
&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 269; 
			flex-basis: 645px&#34;
	&gt;
	&lt;a href=&#34;https://twoooooda.github.io/p/apple%E5%85%AC%E5%BC%8F%E4%B8%8B%E5%8F%96%E3%82%8A%E3%82%B5%E3%83%BC%E3%83%93%E3%82%B9apple-trade-in%E5%88%A9%E7%94%A8%E3%83%AC%E3%83%93%E3%83%A5%E3%83%BC/IMG_3937.JPEG&#34; data-size=&#34;1125x418&#34;&gt;
		&lt;img src=&#34;https://twoooooda.github.io/p/apple%E5%85%AC%E5%BC%8F%E4%B8%8B%E5%8F%96%E3%82%8A%E3%82%B5%E3%83%BC%E3%83%93%E3%82%B9apple-trade-in%E5%88%A9%E7%94%A8%E3%83%AC%E3%83%93%E3%83%A5%E3%83%BC/IMG_3937.JPEG&#34;
			width=&#34;1125&#34;
			height=&#34;418&#34;
			srcset=&#34;https://twoooooda.github.io/p/apple%E5%85%AC%E5%BC%8F%E4%B8%8B%E5%8F%96%E3%82%8A%E3%82%B5%E3%83%BC%E3%83%93%E3%82%B9apple-trade-in%E5%88%A9%E7%94%A8%E3%83%AC%E3%83%93%E3%83%A5%E3%83%BC/IMG_3937_hua284b590ca1d23c78d041734ec6830b9_95276_480x0_resize_q75_box.JPEG 480w, https://twoooooda.github.io/p/apple%E5%85%AC%E5%BC%8F%E4%B8%8B%E5%8F%96%E3%82%8A%E3%82%B5%E3%83%BC%E3%83%93%E3%82%B9apple-trade-in%E5%88%A9%E7%94%A8%E3%83%AC%E3%83%93%E3%83%A5%E3%83%BC/IMG_3937_hua284b590ca1d23c78d041734ec6830b9_95276_1024x0_resize_q75_box.JPEG 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;新iPhone購入から、約1週間で全ての手続きが完了したことになります。&lt;/strong&gt;&lt;/p&gt;
</description>
        </item>
        <item>
        <title>iPhone 13 mini買ったよー</title>
        <link>https://twoooooda.github.io/p/iphone-13-mini%E8%B2%B7%E3%81%A3%E3%81%9F%E3%82%88%E3%83%BC/</link>
        <pubDate>Fri, 01 Oct 2021 00:00:00 +0000</pubDate>
        
        <guid>https://twoooooda.github.io/p/iphone-13-mini%E8%B2%B7%E3%81%A3%E3%81%9F%E3%82%88%E3%83%BC/</guid>
        <description>&lt;img src="https://twoooooda.github.io/p/iphone-13-mini%E8%B2%B7%E3%81%A3%E3%81%9F%E3%82%88%E3%83%BC/IMG_3890.JPEG" alt="Featured image of post iPhone 13 mini買ったよー" /&gt;&lt;p&gt;私は今まで2019年モデルのiPhone11 64GBを使っていたのですが、購入当初からデカいし重いなぁと思い続けていました。そこで、先日のAppleの製品発表会で発表された&lt;strong&gt;iPhone 13 mini&lt;/strong&gt;を買うことにしました。
&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;h2 id=&#34;13のminiにした理由&#34;&gt;13のminiにした理由&lt;/h2&gt;
&lt;p&gt;普段家にいるときは大抵の場合、デスクトップPCに向かって作業したり暇を潰しており、さらに巷を賑わしている流行り病のせいでその習慣には拍車がかかっていました。動画を見たりするのももちろんPCで見るので、&lt;strong&gt;iPhone11&lt;/strong&gt;のような大きめのディスプレイを持つスマホは全く必要ありませんでした。しかも、昨年11月に発売された&lt;strong&gt;iPad Air 4&lt;/strong&gt;も所持しているので、スマホの存在理由といったら移動時間などの空き時間にSNSを確認したり、mobile Suicaやpaypayでの支払いくらいなので、これを機に思い切ってスマホを小型化させることにした次第です。
&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;h2 id=&#34;本題&#34;&gt;本題&lt;/h2&gt;
&lt;p&gt;個人的にApple製品は配送よりも、Apple Storeに直接受け取りに行く方が体験として好きです。なので今回もApple Store心斎橋に受け取りに行きました。受け取りは9/30に行きました。&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 133; 
			flex-basis: 320px&#34;
	&gt;
	&lt;a href=&#34;https://twoooooda.github.io/p/iphone-13-mini%E8%B2%B7%E3%81%A3%E3%81%9F%E3%82%88%E3%83%BC/imag.jpg&#34; data-size=&#34;1000x750&#34;&gt;
		&lt;img src=&#34;https://twoooooda.github.io/p/iphone-13-mini%E8%B2%B7%E3%81%A3%E3%81%9F%E3%82%88%E3%83%BC/imag.jpg&#34;
			width=&#34;1000&#34;
			height=&#34;750&#34;
			srcset=&#34;https://twoooooda.github.io/p/iphone-13-mini%E8%B2%B7%E3%81%A3%E3%81%9F%E3%82%88%E3%83%BC/imag_hub799776ae2f9da12dad976d2622f5e68_221959_480x0_resize_q75_box.jpg 480w, https://twoooooda.github.io/p/iphone-13-mini%E8%B2%B7%E3%81%A3%E3%81%9F%E3%82%88%E3%83%BC/imag_hub799776ae2f9da12dad976d2622f5e68_221959_1024x0_resize_q75_box.jpg 1024w&#34;
			loading=&#34;lazy&#34;
			alt=&#34;心斎橋前の様子&#34;&gt;
	&lt;/a&gt;
	
	&lt;figcaption&gt;心斎橋前の様子&lt;/figcaption&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;受け取りの手順としては、事前決済の時に発行される&lt;strong&gt;注文番号&lt;/strong&gt;あるいは&lt;strong&gt;専用QRコード&lt;/strong&gt;をスタッフに見せるだけで、製品を受け取れました。事前のAppleからのメールには「&lt;strong&gt;公共機関が発行した写真付きの身分証明書&lt;/strong&gt;」が必要と書いてありましたが、特に提出は求められませんでした(学生証とか保険証とか住民票とか用意したのに～)。
&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;h3 id=&#34;受け取れた&#34;&gt;受け取れた～&lt;/h3&gt;
&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 133; 
			flex-basis: 320px&#34;
	&gt;
	&lt;a href=&#34;https://twoooooda.github.io/p/iphone-13-mini%E8%B2%B7%E3%81%A3%E3%81%9F%E3%82%88%E3%83%BC/IMG_3885.JPEG&#34; data-size=&#34;2048x1536&#34;&gt;
		&lt;img src=&#34;https://twoooooda.github.io/p/iphone-13-mini%E8%B2%B7%E3%81%A3%E3%81%9F%E3%82%88%E3%83%BC/IMG_3885.JPEG&#34;
			width=&#34;2048&#34;
			height=&#34;1536&#34;
			srcset=&#34;https://twoooooda.github.io/p/iphone-13-mini%E8%B2%B7%E3%81%A3%E3%81%9F%E3%82%88%E3%83%BC/IMG_3885_hue98e4b0b9fd391cfe29acfbcf0a1f342_480890_480x0_resize_q75_box.JPEG 480w, https://twoooooda.github.io/p/iphone-13-mini%E8%B2%B7%E3%81%A3%E3%81%9F%E3%82%88%E3%83%BC/IMG_3885_hue98e4b0b9fd391cfe29acfbcf0a1f342_480890_1024x0_resize_q75_box.JPEG 1024w&#34;
			loading=&#34;lazy&#34;
			alt=&#34;　&#34;&gt;
	&lt;/a&gt;
	
	&lt;figcaption&gt;&lt;/figcaption&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;h2 id=&#34;ちっちゃ軽いiphone-13-mini&#34;&gt;ちっちゃ軽い、iPhone 13 mini&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;先代のiPhone11と比べると、ACアダプターが入ってない分箱がすっごい薄い。容量は128GBで、(product)REDの赤いモデルを買いました。
&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 133; 
			flex-basis: 320px&#34;
	&gt;
	&lt;a href=&#34;https://twoooooda.github.io/p/iphone-13-mini%E8%B2%B7%E3%81%A3%E3%81%9F%E3%82%88%E3%83%BC/IMG_3892-1.JPEG&#34; data-size=&#34;2048x1536&#34;&gt;
		&lt;img src=&#34;https://twoooooda.github.io/p/iphone-13-mini%E8%B2%B7%E3%81%A3%E3%81%9F%E3%82%88%E3%83%BC/IMG_3892-1.JPEG&#34;
			width=&#34;2048&#34;
			height=&#34;1536&#34;
			srcset=&#34;https://twoooooda.github.io/p/iphone-13-mini%E8%B2%B7%E3%81%A3%E3%81%9F%E3%82%88%E3%83%BC/IMG_3892-1_hu62793f4066a8231efa65e88e6c2d947e_682001_480x0_resize_q75_box.JPEG 480w, https://twoooooda.github.io/p/iphone-13-mini%E8%B2%B7%E3%81%A3%E3%81%9F%E3%82%88%E3%83%BC/IMG_3892-1_hu62793f4066a8231efa65e88e6c2d947e_682001_1024x0_resize_q75_box.JPEG 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;
&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;美しい～。箱を開けたときのこの感動はApple製品の醍醐味でもあります。
&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 133; 
			flex-basis: 320px&#34;
	&gt;
	&lt;a href=&#34;https://twoooooda.github.io/p/iphone-13-mini%E8%B2%B7%E3%81%A3%E3%81%9F%E3%82%88%E3%83%BC/IMG_3890.JPEG&#34; data-size=&#34;2048x1536&#34;&gt;
		&lt;img src=&#34;https://twoooooda.github.io/p/iphone-13-mini%E8%B2%B7%E3%81%A3%E3%81%9F%E3%82%88%E3%83%BC/IMG_3890.JPEG&#34;
			width=&#34;2048&#34;
			height=&#34;1536&#34;
			srcset=&#34;https://twoooooda.github.io/p/iphone-13-mini%E8%B2%B7%E3%81%A3%E3%81%9F%E3%82%88%E3%83%BC/IMG_3890_huf5c7757fa31de48e7d485b23d6b9e1f6_790172_480x0_resize_q75_box.JPEG 480w, https://twoooooda.github.io/p/iphone-13-mini%E8%B2%B7%E3%81%A3%E3%81%9F%E3%82%88%E3%83%BC/IMG_3890_huf5c7757fa31de48e7d485b23d6b9e1f6_790172_1024x0_resize_q75_box.JPEG 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;
&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;個人的な推しポイントが色み。iPhone11よりも深いレッドになってます。
&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 133; 
			flex-basis: 320px&#34;
	&gt;
	&lt;a href=&#34;https://twoooooda.github.io/p/iphone-13-mini%E8%B2%B7%E3%81%A3%E3%81%9F%E3%82%88%E3%83%BC/IMG_0238.JPEG&#34; data-size=&#34;2048x1536&#34;&gt;
		&lt;img src=&#34;https://twoooooda.github.io/p/iphone-13-mini%E8%B2%B7%E3%81%A3%E3%81%9F%E3%82%88%E3%83%BC/IMG_0238.JPEG&#34;
			width=&#34;2048&#34;
			height=&#34;1536&#34;
			srcset=&#34;https://twoooooda.github.io/p/iphone-13-mini%E8%B2%B7%E3%81%A3%E3%81%9F%E3%82%88%E3%83%BC/IMG_0238_huce43c888420153ed30a2f4a04af1b27e_1012436_480x0_resize_q75_box.JPEG 480w, https://twoooooda.github.io/p/iphone-13-mini%E8%B2%B7%E3%81%A3%E3%81%9F%E3%82%88%E3%83%BC/IMG_0238_huce43c888420153ed30a2f4a04af1b27e_1012436_1024x0_resize_q75_box.JPEG 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;
&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;箱の内容物はめちゃくちゃ簡素。意味のあるものといえば本体、ケーブル、SIMピンくらいしか入ってません。しかもLightning to USB type-Cという世界一使いにくいケーブルなのでこれすら意味があるのか疑わしい。
&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 133; 
			flex-basis: 320px&#34;
	&gt;
	&lt;a href=&#34;https://twoooooda.github.io/p/iphone-13-mini%E8%B2%B7%E3%81%A3%E3%81%9F%E3%82%88%E3%83%BC/IMG_3892.JPEG&#34; data-size=&#34;2048x1536&#34;&gt;
		&lt;img src=&#34;https://twoooooda.github.io/p/iphone-13-mini%E8%B2%B7%E3%81%A3%E3%81%9F%E3%82%88%E3%83%BC/IMG_3892.JPEG&#34;
			width=&#34;2048&#34;
			height=&#34;1536&#34;
			srcset=&#34;https://twoooooda.github.io/p/iphone-13-mini%E8%B2%B7%E3%81%A3%E3%81%9F%E3%82%88%E3%83%BC/IMG_3892_huc8d6f1e72ed937c55cde2b0c0efdbe93_637913_480x0_resize_q75_box.JPEG 480w, https://twoooooda.github.io/p/iphone-13-mini%E8%B2%B7%E3%81%A3%E3%81%9F%E3%82%88%E3%83%BC/IMG_3892_huc8d6f1e72ed937c55cde2b0c0efdbe93_637913_1024x0_resize_q75_box.JPEG 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;
&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;私が持っているiPhone7, 11, 13 miniの比較です(左から順に11, 7, 13 mini)。筐体サイズは13 miniが最小ですが、ホームボタンが無い分画面サイズは7よりも大きくなっています(画像2枚目のディスプレイの色調が違うのは、環境光によって色みを調節するTrue Toneという機能が13 miniでONになっているからだと思われる。11は写真撮る前にファクトリーリセットしちゃった)。
&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 133; 
			flex-basis: 320px&#34;
	&gt;
	&lt;a href=&#34;https://twoooooda.github.io/p/iphone-13-mini%E8%B2%B7%E3%81%A3%E3%81%9F%E3%82%88%E3%83%BC/IMG_0236.JPEG&#34; data-size=&#34;2048x1536&#34;&gt;
		&lt;img src=&#34;https://twoooooda.github.io/p/iphone-13-mini%E8%B2%B7%E3%81%A3%E3%81%9F%E3%82%88%E3%83%BC/IMG_0236.JPEG&#34;
			width=&#34;2048&#34;
			height=&#34;1536&#34;
			srcset=&#34;https://twoooooda.github.io/p/iphone-13-mini%E8%B2%B7%E3%81%A3%E3%81%9F%E3%82%88%E3%83%BC/IMG_0236_hu66ef7146e72dd8c920d9c98c51015209_955598_480x0_resize_q75_box.JPEG 480w, https://twoooooda.github.io/p/iphone-13-mini%E8%B2%B7%E3%81%A3%E3%81%9F%E3%82%88%E3%83%BC/IMG_0236_hu66ef7146e72dd8c920d9c98c51015209_955598_1024x0_resize_q75_box.JPEG 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt; &lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 133; 
			flex-basis: 320px&#34;
	&gt;
	&lt;a href=&#34;https://twoooooda.github.io/p/iphone-13-mini%E8%B2%B7%E3%81%A3%E3%81%9F%E3%82%88%E3%83%BC/IMG_0237.JPEG&#34; data-size=&#34;2048x1536&#34;&gt;
		&lt;img src=&#34;https://twoooooda.github.io/p/iphone-13-mini%E8%B2%B7%E3%81%A3%E3%81%9F%E3%82%88%E3%83%BC/IMG_0237.JPEG&#34;
			width=&#34;2048&#34;
			height=&#34;1536&#34;
			srcset=&#34;https://twoooooda.github.io/p/iphone-13-mini%E8%B2%B7%E3%81%A3%E3%81%9F%E3%82%88%E3%83%BC/IMG_0237_hu55a5ee29023950dd383f013e461d9ac3_1013922_480x0_resize_q75_box.JPEG 480w, https://twoooooda.github.io/p/iphone-13-mini%E8%B2%B7%E3%81%A3%E3%81%9F%E3%82%88%E3%83%BC/IMG_0237_hu55a5ee29023950dd383f013e461d9ac3_1013922_1024x0_resize_q75_box.JPEG 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;丸1日くらい使ってみて&#34;&gt;丸1日くらい使ってみて&lt;/h2&gt;
&lt;p&gt;やはり軽くて小さいのは正義です。先代よりも驚くほど手にしっくりきます。よくあんな重いiPhone11なんか使ってたなと思うほどです。調べてみると11→13 miniでは&lt;strong&gt;50gも軽く&lt;/strong&gt;なっているらしい。&lt;/p&gt;
&lt;p&gt;もともとスマホでしていたことと言えばTwitterかYouTubeくらいなので、画面の小ささもそんなに不便を感じません。12 miniではかねてより言われていた&lt;strong&gt;バッテリー問題&lt;/strong&gt;ですが、たしかに使っていると減っていっているという実感はあります。ですが今のところ極端にもたないという感じもないです。しかし、私はスマホで全くと言っていいほどゲームはやらないので、ゲームをある程度する人にとっては参考にならないかもしれません&amp;hellip;&lt;/p&gt;
</description>
        </item>
        <item>
        <title>ラズパイに公開鍵認証でssh接続するまで</title>
        <link>https://twoooooda.github.io/p/%E3%83%A9%E3%82%BA%E3%83%91%E3%82%A4%E3%81%AB%E5%85%AC%E9%96%8B%E9%8D%B5%E8%AA%8D%E8%A8%BC%E3%81%A7ssh%E6%8E%A5%E7%B6%9A%E3%81%99%E3%82%8B%E3%81%BE%E3%81%A7/</link>
        <pubDate>Thu, 03 Jun 2021 00:00:00 +0000</pubDate>
        
        <guid>https://twoooooda.github.io/p/%E3%83%A9%E3%82%BA%E3%83%91%E3%82%A4%E3%81%AB%E5%85%AC%E9%96%8B%E9%8D%B5%E8%AA%8D%E8%A8%BC%E3%81%A7ssh%E6%8E%A5%E7%B6%9A%E3%81%99%E3%82%8B%E3%81%BE%E3%81%A7/</guid>
        <description>&lt;img src="https://twoooooda.github.io/p/%E3%83%A9%E3%82%BA%E3%83%91%E3%82%A4%E3%81%AB%E5%85%AC%E9%96%8B%E9%8D%B5%E8%AA%8D%E8%A8%BC%E3%81%A7ssh%E6%8E%A5%E7%B6%9A%E3%81%99%E3%82%8B%E3%81%BE%E3%81%A7/raspi.jpeg" alt="Featured image of post ラズパイに公開鍵認証でssh接続するまで" /&gt;&lt;h2 id=&#34;はじめに&#34;&gt;はじめに&lt;/h2&gt;
&lt;p&gt;　家に余ってたラズパイをテレビの録画サーバーにしようと思い、部屋の奥から引っ張り出してきたのはいいですが、初期設定もsshの接続設定も何もしてなかったので勉強がてらやってみました、例の如くやらないといけないことが複数サイトに渡って散らばっていたので、備忘録として一通りまとめます。なお、ラズパイのOSはインストール済み, 有線LAN接続なのを前提とし、ラズパイからモニターにはなるべく出力せずに設定することを目指します。&lt;br&gt;
&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;h2 id=&#34;ホストのpcからラズパイにssh接続する&#34;&gt;ホストのPCからラズパイにssh接続する&lt;/h2&gt;
&lt;p&gt;　OSをインストールしたmicroSDカードをラズパイに挿す前に, microSDカードの直下にsshという空のファイル(拡張子も無し)を作っておきます。こうすることでラズパイのGUIを触らずにsshをオンにできます。
&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;※7/28追記&lt;!-- raw HTML omitted --&gt;
OSが入ったSDカードを覗くと、&lt;code&gt;boot&lt;/code&gt;と&lt;code&gt;rootfs&lt;/code&gt;というパーティションにわかれている場合がありますが、sshを有効化するには&lt;code&gt;boot&lt;/code&gt;直下に置くのが正解らしいです。&lt;/p&gt;
&lt;p&gt;　ラズパイに接続して操作するホストのPCのターミナルから、以下のコマンドを叩くだけでssh接続できます(デフォルトユーザーにログインする場合)。
&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ ssh pi@raspberrypi.local
&lt;/code&gt;&lt;/pre&gt;&lt;!-- raw HTML omitted --&gt;
&lt;h2 id=&#34;ipアドレスの固定&#34;&gt;IPアドレスの固定&lt;/h2&gt;
&lt;p&gt;　インターネットに繋げるたびにIPアドレスが変わると困るので、まずはラズパイのIPアドレスを固定します。ラズパイのIPアドレス固定の前に、ホストのPCのターミナルで以下を実行します。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ ipconfig /all
&lt;/code&gt;&lt;/pre&gt;&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;するとIPの構成が一覧で出てくるので、 &lt;strong&gt;デフォルトゲートウェイとDNSサーバーのIPアドレス&lt;/strong&gt;(192.168.x.OOOみたいなやつ)をメモします。
&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;　以降はssh接続を介してラズパイのコマンドを叩いていきます。まずはラズパイの設定ファイルを開いて編集します。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;pi@raspberrypi:~$ sudo nano /etc/dhcpcd.conf
&lt;/code&gt;&lt;/pre&gt;&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;nanoはviでもいいです(好み)。開いたら、末尾に以下を追加します。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;interface eth0(無線LANの場合はここをwlan0にする)
static ip_address=192.168.x.***/24
static routers=192.168.x.OOO
static domain_name_servers=192.168.x.OOO
&lt;/code&gt;&lt;/pre&gt;&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;&lt;code&gt;staric ip_adress=&lt;/code&gt;にラズパイに割り当てたいIPアドレスを書きます。***の部分は1桁、2桁台は他の危機に割り当てられていることが多いので適当に100～200くらいにするといいらしいです。/24はサブネットマスク長です。
&lt;code&gt;static routers=&lt;/code&gt;にデフォルトゲートウェイのIPアドレス、&lt;code&gt;static domain_name_servers=&lt;/code&gt;にDNSサーバーのIPアドレスを書きます。編集できたら、保存してラズパイを再起動すれば変更が適用されているはずです。
&lt;!-- raw HTML omitted --&gt;
&lt;strong&gt;&lt;a class=&#34;link&#34; href=&#34;https://mugeek.hatenablog.com/entry/2019/05/27/230256&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;参考記事&lt;/a&gt;&lt;/strong&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;h2 id=&#34;ユーザーの追加-権限の付与&#34;&gt;ユーザーの追加, 権限の付与&lt;/h2&gt;
&lt;h3 id=&#34;新しいユーザーの追加&#34;&gt;新しいユーザーの追加&lt;/h3&gt;
&lt;p&gt;　デフォルトユーザーである「pi」とは別のユーザーを作成し、権限をそちらに移行します。sshを介してラズパイのターミナルにて、&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;pi@raspberrypi:~$ sudo adduser |newuser|
&lt;/code&gt;&lt;/pre&gt;&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;|newuser| に任意のユーザー名を指定して実行します。「New password:」と「Retype new password:」へ新規ユーザーのパスワードを指定します。その後くらいにいろいろ設定項目が出てきますが、特に必要がないなら全てEnterで進んでもいいです。
&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;h3 id=&#34;権限の付与&#34;&gt;権限の付与&lt;/h3&gt;
&lt;p&gt;　「pi」ユーザーの権限を新しいユーザーに追加します。まずは「pi」ユーザーの権限を確認するために以下を実行します。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;pi@raspberrypi:~$ groups pi
&lt;/code&gt;&lt;/pre&gt;&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;すると「pi」ユーザーに付与されている権限が一覧で表示されるので、usermodコマンドで新しいユーザーに権限を移します。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;pi@raspberrypi:~$ sudo usermod -G pi,adm,dialout,cdrom,sudo,audio,video,plugdev,games,users,input,netdev,spi,i2c,gpio newuser
&lt;/code&gt;&lt;/pre&gt;&lt;!-- raw HTML omitted --&gt;
&lt;h3 id=&#34;piユーザーのホームフォルダのコピー&#34;&gt;「pi」ユーザーのホームフォルダのコピー&lt;/h3&gt;
&lt;p&gt;　「pi」ユーザーのホームフォルダの内容をnewuserのホームフォルダにコピーします。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;pi@raspberrypi:~$ sudo cp -r /home/pi/* /home/newuser
&lt;/code&gt;&lt;/pre&gt;&lt;!-- raw HTML omitted --&gt;
&lt;h2 id=&#34;デフォルトユーザーpiの無効化&#34;&gt;デフォルトユーザー(pi)の無効化&lt;/h2&gt;
&lt;p&gt;　ラズパイを起動する度に「pi」ユーザーに勝手にログインされると困るので、「pi」ユーザーへの自動ログインをオフにして、ついでに「pi」ユーザーを無効化します。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;pi@raspberrypi:~$ sudo nano /etc/lightdm/lightdm.conf
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;/lightdm/lightdm.confの126行目の先頭に#を入れてコメントアウトします(&lt;code&gt;#autologin-user=pi&lt;/code&gt;)。
&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;　次に、newuserでオートログインするようにします。autologin@.serviceを開いて、28行目の「&amp;ndash;autologin pi」を「&amp;ndash;autologin newuser」へ変更します。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;pi@raspberrypi:~$ sudo vi /etc/systemd/system/autologin@.service
&lt;/code&gt;&lt;/pre&gt;&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;　最後に「pi」ユーザーを無効にします。ユーザーのアカウントの有効期限を過去の日付にすることで無効化できます。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;pi@raspberrypi:~$ sudo usermod --expiredate 1 pi
&lt;/code&gt;&lt;/pre&gt;&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;以降は新しく作成したnewuserで作業します。&lt;!-- raw HTML omitted --&gt;
&lt;strong&gt;&lt;a class=&#34;link&#34; href=&#34;https://monoist.atmarkit.co.jp/mn/articles/1912/11/news022_2.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;参考記事&lt;/a&gt;&lt;/strong&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;h2 id=&#34;鍵ペアの生成と送信設定&#34;&gt;鍵ペアの生成と送信、設定&lt;/h2&gt;
&lt;h3 id=&#34;鍵の生成と送信&#34;&gt;鍵の生成と送信&lt;/h3&gt;
&lt;p&gt;　公開鍵認証とは、パスワードの代わりに公開鍵(ホスト側のPC)と秘密鍵(ラズパイ)のペアで認証する方法です。まずはホストのPCに鍵ペアを生成するディレクトリ及び鍵ペアを作ります。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ mkdir ~/.ssh/raspberrypi
$ ssh-keygen -t rsa
&lt;/code&gt;&lt;/pre&gt;&lt;!-- raw HTML omitted --&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;Enter file in which to save the key (/Users/username/raspberrypi/.ssh/id_rsa):
&lt;/code&gt;&lt;/pre&gt;&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;必要に応じてこの後に聞かれるパスフレーズも入力します。自分は省略しました。これで秘密鍵の&lt;code&gt;id_rsa&lt;/code&gt;と公開鍵の&lt;code&gt;id_rsa.pub&lt;/code&gt;が生成されます。これらのうち&lt;code&gt;id_rsa.pub&lt;/code&gt;をラズパイ側に送ります。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ scp ~/.ssh/raspberrypi/id_rsa.pub newuser@raspberrypi:~
&lt;/code&gt;&lt;/pre&gt;&lt;!-- raw HTML omitted --&gt;
&lt;h3 id=&#34;公開鍵の設定&#34;&gt;公開鍵の設定&lt;/h3&gt;
&lt;p&gt;　ラズパイにパスワード認証でログインし、鍵を管理する&lt;code&gt;.ssh&lt;/code&gt;を作ります。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;newuser@raspberrypi:~$ sudo mkdir ~/.ssh
&lt;/code&gt;&lt;/pre&gt;&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;先ほど送信した&lt;code&gt;id_rsa.pub&lt;/code&gt;を&lt;code&gt;authorized_keys&lt;/code&gt;と名前を変更しつつ&lt;code&gt;.ssh&lt;/code&gt;に移動します。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;newuser@raspberrypi:~$ sudo mv ~/id_rsa.pub ~/.ssh/authorized_keys
&lt;/code&gt;&lt;/pre&gt;&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;次に&lt;code&gt;.ssh&lt;/code&gt;、&lt;code&gt;authorized_keys&lt;/code&gt;のパーミッションを変更します。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;newuser@raspberrypi:~$ chmod 600 ~/.ssh/authorized_keys
newuser@raspberrypi:~$ chmod 700 ~/.ssh
&lt;/code&gt;&lt;/pre&gt;&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;最後に&lt;code&gt;ssh_config&lt;/code&gt;を修正します。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;newuser@raspberrypi:~$ sudo nano /etc/ssh/sshd_config
&lt;/code&gt;&lt;/pre&gt;&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;以下のような記載の行のコメントアウトを外して編集します。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;AuthorizedKeysFile .ssh/authorized_keys .ssh/authorized_keys2
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;この時にポート番号の変更や、パスワード認証のオフができます。しかし、&lt;strong&gt;公開鍵認証が上手くいってない状態でパスワード認証をオフにしてしまうと、次回からログインできなくなってしまう&lt;/strong&gt;ので慎重に行ってください。最悪OSのインストールし直しになります(私は既に何度かやらかしました)。
&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;最後にラズパイを再起動すると、次回から以下のコマンドで公開鍵認証でログインできるはずです。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ ssh -i [秘密鍵ファイル] -p [ポート番号] pi@[Raspberry PiのIPアドレス]
(例)ssh -i .ssh/id_rsa -p 22 pi@192.168.0.100
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;&lt;a class=&#34;link&#34; href=&#34;https://tool-lab.com/raspi-key-authentication-over-ssh/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;参考記事&lt;/a&gt;&lt;/strong&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;h1 id=&#34;ssh-configの追加&#34;&gt;ssh configの追加&lt;/h1&gt;
&lt;p&gt;　この方法で接続してもいいんですが、コマンドが長いので短縮します。
&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;~/.ssh/config&lt;/code&gt;を作り、以下を追記します。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;Host [任意のコマンド名]
	HostName [ラズパイのIPアドレス]
	User [ラズパイのユーザーネーム]
	Port [ラズパイのポート番号]
	IdentityFile [秘密鍵ファイル]
&lt;/code&gt;&lt;/pre&gt;&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;今回の例では以下のようになります。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;Host raspi
	HostName 192.168.1.100
	User newuser
	Port 22
	IdentityFile ~/.ssh/id_rsa
&lt;/code&gt;&lt;/pre&gt;&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;こうすることでssh接続時のコマンドを以下のように大幅に短縮できます。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;ssh raspi
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;&lt;a class=&#34;link&#34; href=&#34;https://zenn.dev/ryo_kawamata/articles/raspberrypi-auth-setting&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;参考記事&lt;/a&gt;&lt;/strong&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;以上です。ファイル名や環境は各々によって違うのでそこは適宜変更をおねがいします。&lt;/p&gt;
</description>
        </item>
        <item>
        <title>HUGOで作ったサイトにアマゾンのアフィリンクを貼る</title>
        <link>https://twoooooda.github.io/p/hugo%E3%81%A7%E4%BD%9C%E3%81%A3%E3%81%9F%E3%82%B5%E3%82%A4%E3%83%88%E3%81%AB%E3%82%A2%E3%83%9E%E3%82%BE%E3%83%B3%E3%81%AE%E3%82%A2%E3%83%95%E3%82%A3%E3%83%AA%E3%83%B3%E3%82%AF%E3%82%92%E8%B2%BC%E3%82%8B/</link>
        <pubDate>Tue, 13 Apr 2021 00:00:00 +0000</pubDate>
        
        <guid>https://twoooooda.github.io/p/hugo%E3%81%A7%E4%BD%9C%E3%81%A3%E3%81%9F%E3%82%B5%E3%82%A4%E3%83%88%E3%81%AB%E3%82%A2%E3%83%9E%E3%82%BE%E3%83%B3%E3%81%AE%E3%82%A2%E3%83%95%E3%82%A3%E3%83%AA%E3%83%B3%E3%82%AF%E3%82%92%E8%B2%BC%E3%82%8B/</guid>
        <description>&lt;img src="https://twoooooda.github.io/p/hugo%E3%81%A7%E4%BD%9C%E3%81%A3%E3%81%9F%E3%82%B5%E3%82%A4%E3%83%88%E3%81%AB%E3%82%A2%E3%83%9E%E3%82%BE%E3%83%B3%E3%81%AE%E3%82%A2%E3%83%95%E3%82%A3%E3%83%AA%E3%83%B3%E3%82%AF%E3%82%92%E8%B2%BC%E3%82%8B/hugo.png" alt="Featured image of post HUGOで作ったサイトにアマゾンのアフィリンクを貼る" /&gt;&lt;h1 id=&#34;hugoの仕様&#34;&gt;HUGOの仕様&lt;/h1&gt;
&lt;p&gt;　静的サイトジェネレータ &amp;ldquo;HUGO&amp;rdquo; は、テーマの制作者がGitHubに上げているリポジトリをサブモジュールとして使うことで自分のサイトにテーマを導入します。ゆえに、テーマのレイアウトに関わるコードを直接書き換えることはできません(ローカルファイルは書き換えられますが)。
&lt;!-- raw HTML omitted --&gt;
　しかしHUGOの仕様として、&lt;code&gt;/static&lt;/code&gt;や&lt;code&gt;/layouts&lt;/code&gt;以下のフォルダやファイルが優先して読み込まれるというものがあります。
&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;h1 id=&#34;ではどうするか&#34;&gt;ではどうするか&lt;/h1&gt;
&lt;p&gt;　&lt;a class=&#34;link&#34; href=&#34;https://themes.gohugo.io/themes/hugo-theme-stack/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;当サイトのテーマ&lt;/a&gt;を例にすると、&lt;code&gt;/themes/hugo-theme-stack/layouts/partials/sidebar/right.html&lt;/code&gt;を書き換えたい場合、該当のファイルを&lt;code&gt;/layouts/partials/&lt;/code&gt;にコピー＆ペーストすると、そちらの方が先に読み込まれるので結果的に編集して上書きが可能なわけです。
&lt;!-- raw HTML omitted --&gt;
　あとはAmazonのアフィリエイトリンクのHTMLコードを生成して、上記のright.htmlに書き込むとちゃんと表示されました。
&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Unityで蚊っぽい動きをするやつを作る</title>
        <link>https://twoooooda.github.io/p/unity%E3%81%A7%E8%9A%8A%E3%81%A3%E3%81%BD%E3%81%84%E5%8B%95%E3%81%8D%E3%82%92%E3%81%99%E3%82%8B%E3%82%84%E3%81%A4%E3%82%92%E4%BD%9C%E3%82%8B/</link>
        <pubDate>Fri, 02 Apr 2021 00:00:00 +0000</pubDate>
        
        <guid>https://twoooooda.github.io/p/unity%E3%81%A7%E8%9A%8A%E3%81%A3%E3%81%BD%E3%81%84%E5%8B%95%E3%81%8D%E3%82%92%E3%81%99%E3%82%8B%E3%82%84%E3%81%A4%E3%82%92%E4%BD%9C%E3%82%8B/</guid>
        <description>&lt;img src="https://twoooooda.github.io/p/unity%E3%81%A7%E8%9A%8A%E3%81%A3%E3%81%BD%E3%81%84%E5%8B%95%E3%81%8D%E3%82%92%E3%81%99%E3%82%8B%E3%82%84%E3%81%A4%E3%82%92%E4%BD%9C%E3%82%8B/ka.png" alt="Featured image of post Unityで蚊っぽい動きをするやつを作る" /&gt;&lt;h2 id=&#34;はじめに&#34;&gt;はじめに&lt;/h2&gt;
&lt;p&gt;　 少し前にOculus Quest2を購入し、しばらくハンドトラッキングで遊んでいたんですが、急に『手で蚊を潰すVRゲーム』を作りたくなったのでとりあえず蚊っぽい挙動をするナニカを作りました。
&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;h2 id=&#34;スクリプト&#34;&gt;スクリプト&lt;/h2&gt;
&lt;p&gt;　やっていることはごく簡単で、数フレームに一回ランダムでRotationの値を変更し、Z方向に常に力を加え続けているだけです。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-cs:Move_mosquite.cs&#34; data-lang=&#34;cs:Move_mosquite.cs&#34;&gt;&lt;span class=&#34;k&#34;&gt;using&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;UnityEngine&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

&lt;span class=&#34;k&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;Move_mosquite&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;MonoBehaviour&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;Rigidbody&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;rb&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;float&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;freq&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;speed&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;power&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

    &lt;span class=&#34;k&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Start&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;rb&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;GetComponent&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Rigidbody&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;();&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

    &lt;span class=&#34;k&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Update&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;rb&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;velocity&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;rb&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;velocity&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;normalized&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;speed&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;//変数speedで速度の設定
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;        &lt;span class=&#34;n&#34;&gt;rb&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;AddForce&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;transform&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;forward&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;power&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Time&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;deltaTime&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ForceMode&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Force&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;//Z方向(forward)に力を加え続ける
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Random&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;value&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;freq&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;//Rotationを変更する頻度を設定。毎フレームだと頻繁過ぎるので。
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;        &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
            &lt;span class=&#34;n&#34;&gt;transform&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;eulerAngles&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Vector3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Random&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Range&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;360&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Random&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Range&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;360&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Random&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Range&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;360&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;));&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;このままでは無限にどっかいってしまうので、適当にコライダーをつけるとか、壁に近づくと力を受けるとかにするといいかもしれません。&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;
なお、当方めちゃくちゃ初心者なのでもっと効率的なやり方や、もっとリアルになるやり方があるかもしれませんのであしからず&amp;hellip;.&lt;/p&gt;
&lt;h2 id=&#34;完成例&#34;&gt;完成例&lt;/h2&gt;
&lt;div class=&#34;video-wrapper&#34;&gt;
    &lt;iframe loading=&#34;lazy&#34; 
            src=&#34;https://www.youtube.com/embed/SFOzY6yHWQc&#34; 
            allowfullscreen 
            title=&#34;YouTube Video&#34;
    &gt;
    &lt;/iframe&gt;
&lt;/div&gt;

&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;
</description>
        </item>
        <item>
        <title>静的サイトジェネレータ”HUGO”で個人ブログをつくり、GitHub Pagesで公開する</title>
        <link>https://twoooooda.github.io/p/%E9%9D%99%E7%9A%84%E3%82%B5%E3%82%A4%E3%83%88%E3%82%B8%E3%82%A7%E3%83%8D%E3%83%AC%E3%83%BC%E3%82%BFhugo%E3%81%A7%E5%80%8B%E4%BA%BA%E3%83%96%E3%83%AD%E3%82%B0%E3%82%92%E3%81%A4%E3%81%8F%E3%82%8Agithub-pages%E3%81%A7%E5%85%AC%E9%96%8B%E3%81%99%E3%82%8B/</link>
        <pubDate>Mon, 08 Mar 2021 00:00:00 +0000</pubDate>
        
        <guid>https://twoooooda.github.io/p/%E9%9D%99%E7%9A%84%E3%82%B5%E3%82%A4%E3%83%88%E3%82%B8%E3%82%A7%E3%83%8D%E3%83%AC%E3%83%BC%E3%82%BFhugo%E3%81%A7%E5%80%8B%E4%BA%BA%E3%83%96%E3%83%AD%E3%82%B0%E3%82%92%E3%81%A4%E3%81%8F%E3%82%8Agithub-pages%E3%81%A7%E5%85%AC%E9%96%8B%E3%81%99%E3%82%8B/</guid>
        <description>&lt;img src="https://twoooooda.github.io/p/%E9%9D%99%E7%9A%84%E3%82%B5%E3%82%A4%E3%83%88%E3%82%B8%E3%82%A7%E3%83%8D%E3%83%AC%E3%83%BC%E3%82%BFhugo%E3%81%A7%E5%80%8B%E4%BA%BA%E3%83%96%E3%83%AD%E3%82%B0%E3%82%92%E3%81%A4%E3%81%8F%E3%82%8Agithub-pages%E3%81%A7%E5%85%AC%E9%96%8B%E3%81%99%E3%82%8B/hugo.png" alt="Featured image of post 静的サイトジェネレータ”HUGO”で個人ブログをつくり、GitHub Pagesで公開する" /&gt;&lt;h2 id=&#34;はじめに&#34;&gt;はじめに&lt;/h2&gt;
&lt;p&gt;　自分は最近、当ブログを静的サイトジェネレータであるHUGOを用いて作成しました。HUGO自体はわかってしまえばごく簡単に導入、使用できるんですが、いかんせん自分がweb系、GitHubに関して無知であったためハマりポイントをことごとく踏み抜いていき、結局公開までかなり時間がかかってしまいました。なので覚えているうちに使い方や参考サイトをまとめようと思います。&lt;/p&gt;
&lt;p&gt;　ちなみにデプロイ方法等は我流でやっていますが、いろんな方法があるみたいなのであくまで一例としてお読み頂けたら光栄です。&lt;br&gt;
&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;h2 id=&#34;1hugoのインストール&#34;&gt;1.HUGOのインストール&lt;/h2&gt;
&lt;p&gt;　基本的には、HUGOの公式サイトにある&lt;a class=&#34;link&#34; href=&#34;https://gohugo.io/getting-started/quick-start/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Quick Start&lt;/a&gt;に従ってHUGOをインストールしていきます。自分はWindows環境なので、&lt;a class=&#34;link&#34; href=&#34;https://chocolatey.org/install&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Chocolatey&lt;/a&gt;というパッケージマネージャを使ってインストールしました。以降はコマンドプロンプト上で、&lt;code&gt;$ choco install hugo -confirm&lt;/code&gt;を実行するとHUGOがインストールされるはずです。&lt;code&gt;$ hugo version&lt;/code&gt;でバージョンが確認できたらインストールされています。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ hugo version
hugo v0.81.0-59D15C97 windows/amd64 ....  
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;h2 id=&#34;2githubの準備&#34;&gt;2.GitHubの準備&lt;/h2&gt;
&lt;p&gt;　自分のGitHubのページにて、[UserName].github.ioという名前でリポジトリを作ります。リポジトリ名をこうすることでGitHubさんがPages用のリポジトリだと勝手に判断してくれます。なのでリポジトリ名がページのURL&lt;code&gt;https://&amp;lt;UserName&amp;gt;.github.io&lt;/code&gt;になります。あとはこのリポジトリをクローンして取り敢えず環境は完成です。&lt;/p&gt;
&lt;p&gt;　一般的なのはソースコード用のリポジトリを別で作り、ビルド結果だけをPages用のリポジトリにあげる方法らしいのですが、自分はリポジトリが増えるのが嫌だったので、souceブランチをソースコード用、mainブランチをデプロイ用のブランチにしました。&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;h2 id=&#34;3サイトのひな形を作る&#34;&gt;3.サイトのひな形を作る&lt;/h2&gt;
&lt;p&gt;　まずsourceブランチを作り、その下にHUGOのコマンドでファイルを作っていきます。&lt;code&gt;$ hugo new site &amp;lt;フォルダ名&amp;gt;&lt;/code&gt;でHUGOを使う上で最小限のファイルとフォルダを作成できます。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ cd &amp;lt;UserName&amp;gt;.github.io
$ git branch source
$ git checkout source
$ hugo new site blog
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;自分はsourceブランチ直下で作業したかったので、blogフォルダ内の内容をsourceブランチ直下に移動させました(blogフォルダは削除)。&lt;br&gt;
&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;h2 id=&#34;4テーマを導入する&#34;&gt;4.テーマを導入する&lt;/h2&gt;
&lt;p&gt;　&lt;a class=&#34;link&#34; href=&#34;https://themes.gohugo.io/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;HUGO公式のthemeページ&lt;/a&gt;からテーマを選んで、自分のリポジトリに&lt;a class=&#34;link&#34; href=&#34;https://qiita.com/sotarok/items/0d525e568a6088f6f6bb&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;サブモジュール&lt;/a&gt;として追加します。例としてこのブログのテーマ(&lt;a class=&#34;link&#34; href=&#34;https://themes.gohugo.io/hugo-future-imperfect-slim/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Hugo Future Imperfect Slim&lt;/a&gt;)を用います。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ git submodule add https://github.com/pacollins/hugo-future-imperfect-slim.git themes/hugo-future-imperfect-slim
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;サブモジュール化ができたら、themes/hugo-future-imperfect-slim/&lt;strong&gt;exampleSite&lt;/strong&gt; 内のファイルやフォルダをまるっとブランチ直下にコピーします。それと同時に、もともとあったconfig.tomlは消しておきます(configファイルが競合するため)。&lt;br&gt;
&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;h2 id=&#34;5-試運転してみる&#34;&gt;5. 試運転してみる&lt;/h2&gt;
&lt;p&gt;　&lt;code&gt;$ hugo server&lt;/code&gt;でローカルにサーバーをたてて、&lt;a class=&#34;link&#34; href=&#34;http://localhost:1313/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;http://localhost:1313&lt;/a&gt;にアクセスするとサイトの内容を確認できます。ここまでが正しくなされているとテーマのDemoサイトと同じ状態になっているはずです。&lt;br&gt;
　また、&lt;code&gt;$ hugo&lt;/code&gt;でサイトのデータをビルドできます(/publicが生成される)。
&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;h2 id=&#34;6github-actionsの設定&#34;&gt;6.GitHub Actionsの設定&lt;/h2&gt;
&lt;p&gt;　&lt;strong&gt;GitHub Actions&lt;/strong&gt;とは、リポジトリにコミット等があった時にそれを検知して自動的にデプロイとかする機能(?)らしいです(今回の場合)。自分は雰囲気で使っているので詳しくは知りません。&lt;br&gt;
　sourceブランチの下に、.github/workflows/&lt;strong&gt;main.yml&lt;/strong&gt;を作成します。&lt;a class=&#34;link&#34; href=&#34;https://reona.dev/posts/20200331&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Reonaさんのブログ&lt;/a&gt;を参考にしてmain.ymlに記載のあるデプロイ先ブランチとかを編集しました。&lt;/p&gt;
&lt;p&gt;　ここまでやってきたことをまるっとsourceブランチにコミットすると、Actionsが働いてmainブランチにデプロイされ、ページが公開されるはずです。&lt;br&gt;
&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;h2 id=&#34;7-設定を編集する&#34;&gt;7. 設定を編集する&lt;/h2&gt;
&lt;p&gt;　config.tomlを見てみると、設定の項目がズラリとならんでいます。ここでサイトを自分用にするための設定をしていきます(サイトの名前、アイコン、URLなど)。&lt;br&gt;
　ここで、アイコンに設定したい画像等をconfig.tomlから指定するのですが、そういうのは基本 &lt;strong&gt;/static&lt;/strong&gt;に保存して、パスを指定するようです。追加のcssで見た目を変えたい時も、/themesの中には書かず、/layouts/partials内とかに書くようです(細かいところはテーマによって変わるのでテーマのDocumentを読んでね)。&lt;br&gt;
&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;h2 id=&#34;8記事を追加する&#34;&gt;8.記事を追加する&lt;/h2&gt;
&lt;p&gt;　サイトの枠組みが完成したら、あとはサンプルの記事を削除して、自分の記事を追加していきます。&lt;code&gt;$ hugo new &amp;lt;フォルダ名&amp;gt;/&amp;lt;ファイル名&amp;gt;&lt;/code&gt;で新しい記事を追加できます。基本的に記事は全てMarkdown形式で書きます。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;例) $ hugo new content/blog/article_2021-01-01.md  
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;h1 id=&#34;参考サイト&#34;&gt;参考サイト&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://dev.to/mshr_h/hugo-github-pages-35me&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Hugo+Github Pagesで新しい個人ウェブサイトを作った&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://zenn.dev/nikaera/articles/hugo-github-actions-for-github-pages&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Hugo + GitHub Pages + GitHub Actions で独自ドメインのウェブサイトを構築する&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://reona.dev/posts/20200331&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;GitHub Pages × Hugo で技術ブログを始めた&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>Hello, world！</title>
        <link>https://twoooooda.github.io/p/hello-world/</link>
        <pubDate>Sun, 07 Mar 2021 00:00:00 +0000</pubDate>
        
        <guid>https://twoooooda.github.io/p/hello-world/</guid>
        <description>&lt;img src="https://twoooooda.github.io/p/hello-world/publicdomainq-0012425opp.jpg" alt="Featured image of post Hello, world！" /&gt;&lt;h2 id=&#34;苦悩の末&#34;&gt;苦悩の末&lt;/h2&gt;
&lt;p&gt;　最近急にはてなブログやnoteとは違う個人ブログが欲しくなり、静的サイトジェネレーターであるHUGOと、勉強がてらGitHub Pages、Actionsを使ってブログを作ってみました。実はサイト作成にあたり数日間に渡り大変苦労したのですが、その話はHUGO等の使い方とともにまとめようと思います。&lt;/p&gt;
&lt;p&gt;ではまた。&lt;/p&gt;
</description>
        </item>
        
    </channel>
</rss>
